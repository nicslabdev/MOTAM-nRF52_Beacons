
/Users/manuel/ParticleDesarrollo/TrafficLightCatM1/target/TrafficLightCatM1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042d8  000d4018  000d4018  00004018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000000  2003f400  2003f400  000183cc  2**0
                  CONTENTS
  3 .data         000000b0  2003e358  000d82f0  0000e358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          000003e8  2003e408  2003e408  0001e408  2**2
                  ALLOC
  5 .module_info_suffix 00000028  000d83a0  000d83a0  000183a0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  000d83c8  000d83c8  000183c8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   000bb3be  00000000  00000000  000183cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000f728  00000000  00000000  000d378a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00019422  00000000  00000000  000e2eb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001f58  00000000  00000000  000fc2d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00003e28  00000000  00000000  000fe22c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00031fa6  00000000  00000000  00102054  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00024f9c  00000000  00000000  00133ffa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000f0c9f  00000000  00000000  00158f96  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000bbfc  00000000  00000000  00249c38  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4018 <user_part_module>:
   d4018:	98 7e 0d 00                                         .~..

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <module_user_pre_init+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <module_user_pre_init+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <module_user_pre_init+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f003 fec1 	bl	d7db4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <module_user_pre_init+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <module_user_pre_init+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f003 fec6 	bl	d7dca <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <module_user_pre_init+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e358 	.word	0x2003e358
   d4048:	000d82f0 	.word	0x000d82f0
   d404c:	2003e408 	.word	0x2003e408
   d4050:	2003e408 	.word	0x2003e408
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f003 f84d 	bl	d70f8 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d82e8 	.word	0x000d82e8
   d4080:	000d82b0 	.word	0x000d82b0

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f001 bb4a 	b.w	d571c <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f93b 	bl	d4304 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f002 bfff 	b.w	d7094 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f001 bec7 	b.w	d5e28 <malloc>

000d409a <_ZdlPv>:
   d409a:	f001 becd 	b.w	d5e38 <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f001 becb 	b.w	d5e38 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr

000d40b2 <_ZN10CloudClass22update_string_variableEPKc18Spark_Data_TypeDefPKvPv>:

    static const void* update_string_variable(const char* name, Spark_Data_TypeDef type, const void* var, void* reserved)
    {
        const String* s = (const String*)var;
        return s->c_str();
    }
   d40b2:	6810      	ldr	r0, [r2, #0]
   d40b4:	4770      	bx	lr

000d40b6 <_ZNK19ArduinoJson6101_00020DeserializationError14safeBoolHelperEv>:
namespace ARDUINOJSON_NAMESPACE {

class DeserializationError {
  // safe bool idiom
  typedef void (DeserializationError::*bool_type)() const;
  void safeBoolHelper() const {}
   d40b6:	4770      	bx	lr

000d40b8 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
   d40b8:	6803      	ldr	r3, [r0, #0]
   d40ba:	4718      	bx	r3

000d40bc <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d40bc:	2a01      	cmp	r2, #1
   d40be:	d002      	beq.n	d40c6 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
   d40c0:	2a02      	cmp	r2, #2
   d40c2:	d002      	beq.n	d40ca <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
   d40c4:	e004      	b.n	d40d0 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d40c6:	6001      	str	r1, [r0, #0]
	      break;
   d40c8:	e002      	b.n	d40d0 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d40ca:	680b      	ldr	r3, [r1, #0]
   d40cc:	b100      	cbz	r0, d40d0 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
   d40ce:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d40d0:	2000      	movs	r0, #0
   d40d2:	4770      	bx	lr

000d40d4 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   d40d4:	6943      	ldr	r3, [r0, #20]
   d40d6:	b113      	cbz	r3, d40de <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d40d8:	6983      	ldr	r3, [r0, #24]
   d40da:	300c      	adds	r0, #12
   d40dc:	4718      	bx	r3
   d40de:	4770      	bx	lr

000d40e0 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   d40e0:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d40e2:	2100      	movs	r1, #0
   d40e4:	4604      	mov	r4, r0
   d40e6:	4608      	mov	r0, r1
   d40e8:	f001 fc7a 	bl	d59e0 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d40ec:	a902      	add	r1, sp, #8
   d40ee:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   d40f0:	4620      	mov	r0, r4

    static void invoke_timer(os_timer_t timer)
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d40f2:	f841 3d04 	str.w	r3, [r1, #-4]!
            os_timer_get_id(timer, &id);
   d40f6:	f001 fc8b 	bl	d5a10 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   d40fa:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   d40fc:	b10c      	cbz	r4, d4102 <_ZN5Timer12invoke_timerEPv+0x22>
                t->running = true;
   d40fe:	2301      	movs	r3, #1
   d4100:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d4102:	2100      	movs	r1, #0
   d4104:	2001      	movs	r0, #1
   d4106:	f001 fc6b 	bl	d59e0 <os_thread_scheduling>
            }
        }
        if (t) {
   d410a:	b12c      	cbz	r4, d4118 <_ZN5Timer12invoke_timerEPv+0x38>
            t->timeout();
   d410c:	6823      	ldr	r3, [r4, #0]
   d410e:	4620      	mov	r0, r4
   d4110:	689b      	ldr	r3, [r3, #8]
   d4112:	4798      	blx	r3
            t->running = false;
   d4114:	2300      	movs	r3, #0
   d4116:	7123      	strb	r3, [r4, #4]
        }
    }
   d4118:	b002      	add	sp, #8
   d411a:	bd10      	pop	{r4, pc}

000d411c <_ZN19ArduinoJson6101_00011VariantData7setTypeEh.isra.16>:
    return _flags & VALUE_MASK;
  }

  void setType(uint8_t t) {
    _flags &= KEY_IS_OWNED;
    _flags |= t;
   d411c:	7803      	ldrb	r3, [r0, #0]
   d411e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   d4122:	4319      	orrs	r1, r3
   d4124:	7001      	strb	r1, [r0, #0]
   d4126:	4770      	bx	lr

000d4128 <_ZN19ArduinoJson6101_00017BasicJsonDocumentINS_16DefaultAllocatorEED1Ev>:
  BasicJsonDocument(VariantRef src)
      : JsonDocument(allocPool(src.memoryUsage())) {
    set(src);
  }

  ~BasicJsonDocument() {
   d4128:	b510      	push	{r4, lr}
   d412a:	4604      	mov	r4, r0
  void* allocate(size_t n) {
    return malloc(n);
  }

  void deallocate(void* p) {
    free(p);
   d412c:	6840      	ldr	r0, [r0, #4]
   d412e:	f001 fe83 	bl	d5e38 <free>
    freePool();
  }
   d4132:	4620      	mov	r0, r4
   d4134:	bd10      	pop	{r4, pc}

000d4136 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4136:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4138:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d413a:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d413c:	b113      	cbz	r3, d4144 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d413e:	2203      	movs	r2, #3
   d4140:	4601      	mov	r1, r0
   d4142:	4798      	blx	r3
    }
   d4144:	4620      	mov	r0, r4
   d4146:	bd10      	pop	{r4, pc}

000d4148 <_ZN5Timer5_stopEjb>:
    {
        stop(fromISR);
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
    }

    bool _stop(unsigned block, bool fromISR=false)
   d4148:	b507      	push	{r0, r1, r2, lr}
    {
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   d414a:	6880      	ldr	r0, [r0, #8]
   d414c:	2300      	movs	r3, #0
   d414e:	b138      	cbz	r0, d4160 <_ZN5Timer5_stopEjb+0x18>
   d4150:	e88d 000a 	stmia.w	sp, {r1, r3}
   d4154:	2102      	movs	r1, #2
   d4156:	f001 fc63 	bl	d5a20 <os_timer_change>
   d415a:	fab0 f080 	clz	r0, r0
   d415e:	0940      	lsrs	r0, r0, #5
    }
   d4160:	b003      	add	sp, #12
   d4162:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4168 <_ZN5TimerD1Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d4168:	b538      	push	{r3, r4, r5, lr}
   d416a:	4b10      	ldr	r3, [pc, #64]	; (d41ac <_ZN5TimerD1Ev+0x44>)
   d416c:	6003      	str	r3, [r0, #0]
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
    }

    void dispose()
    {
        if (handle) {
   d416e:	6883      	ldr	r3, [r0, #8]
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d4170:	4604      	mov	r4, r0
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
    }

    void dispose()
    {
        if (handle) {
   d4172:	b1a3      	cbz	r3, d419e <_ZN5TimerD1Ev+0x36>
    bool changePeriodFromISR(unsigned period) { return _changePeriod(period, 0, true); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d4174:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d4178:	2200      	movs	r2, #0
   d417a:	f7ff ffe5 	bl	d4148 <_ZN5Timer5_stopEjb>
    {
        if (handle) {
            stop();
            // Make sure the callback will not be called after this object is destroyed.
            // TODO: Consider assigning a higher priority to the timer thread
            os_timer_set_id(handle, nullptr);
   d417e:	2100      	movs	r1, #0
   d4180:	68a0      	ldr	r0, [r4, #8]
   d4182:	f001 fc65 	bl	d5a50 <os_timer_set_id>
            while (running) {
   d4186:	7923      	ldrb	r3, [r4, #4]
   d4188:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d418c:	b113      	cbz	r3, d4194 <_ZN5TimerD1Ev+0x2c>
                os_thread_yield();
   d418e:	f001 fc0f 	bl	d59b0 <os_thread_yield>
   d4192:	e7f8      	b.n	d4186 <_ZN5TimerD1Ev+0x1e>
            }
            os_timer_destroy(handle, nullptr);
   d4194:	4629      	mov	r1, r5
   d4196:	68a0      	ldr	r0, [r4, #8]
   d4198:	f001 fc32 	bl	d5a00 <os_timer_destroy>
            handle = nullptr;
   d419c:	60a5      	str	r5, [r4, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d419e:	f104 000c 	add.w	r0, r4, #12
   d41a2:	f7ff ffc8 	bl	d4136 <_ZNSt14_Function_baseD1Ev>

    virtual ~Timer() {
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
   d41a6:	4620      	mov	r0, r4
   d41a8:	bd38      	pop	{r3, r4, r5, pc}
   d41aa:	bf00      	nop
   d41ac:	000d7eb4 	.word	0x000d7eb4

000d41b0 <_ZN5TimerD0Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d41b0:	b510      	push	{r4, lr}
   d41b2:	4604      	mov	r4, r0
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
   d41b4:	f7ff ffd8 	bl	d4168 <_ZN5TimerD1Ev>
   d41b8:	4620      	mov	r0, r4
   d41ba:	211c      	movs	r1, #28
   d41bc:	f002 fffd 	bl	d71ba <_ZdlPvj>
   d41c0:	4620      	mov	r0, r4
   d41c2:	bd10      	pop	{r4, pc}

000d41c4 <_ZN19ArduinoJson6101_00011VariantSlot4nextEv>:
  const VariantData* data() const {
    return reinterpret_cast<const VariantData*>(&_content);
  }

  VariantSlot* next() {
    return _next ? this + _next : 0;
   d41c4:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   d41c8:	b113      	cbz	r3, d41d0 <_ZN19ArduinoJson6101_00011VariantSlot4nextEv+0xc>
   d41ca:	eb00 1003 	add.w	r0, r0, r3, lsl #4
   d41ce:	4770      	bx	lr
   d41d0:	4618      	mov	r0, r3
  }
   d41d2:	4770      	bx	lr

000d41d4 <_ZNK19ArduinoJson6101_00021ConstRamStringAdapter6equalsEPKc>:

class ConstRamStringAdapter {
 public:
  ConstRamStringAdapter(const char* str = 0) : _str(str) {}

  bool equals(const char* expected) const {
   d41d4:	b508      	push	{r3, lr}
    const char* actual = _str;
   d41d6:	6800      	ldr	r0, [r0, #0]

class ConstRamStringAdapter {
 public:
  ConstRamStringAdapter(const char* str = 0) : _str(str) {}

  bool equals(const char* expected) const {
   d41d8:	460b      	mov	r3, r1
    const char* actual = _str;
    if (!actual || !expected) return actual == expected;
   d41da:	b100      	cbz	r0, d41de <_ZNK19ArduinoJson6101_00021ConstRamStringAdapter6equalsEPKc+0xa>
   d41dc:	b919      	cbnz	r1, d41e6 <_ZNK19ArduinoJson6101_00021ConstRamStringAdapter6equalsEPKc+0x12>
   d41de:	1ac3      	subs	r3, r0, r3
   d41e0:	4258      	negs	r0, r3
   d41e2:	4158      	adcs	r0, r3
   d41e4:	bd08      	pop	{r3, pc}
    return strcmp(actual, expected) == 0;
   d41e6:	f003 fe21 	bl	d7e2c <strcmp>
   d41ea:	fab0 f080 	clz	r0, r0
   d41ee:	0940      	lsrs	r0, r0, #5
  }
   d41f0:	bd08      	pop	{r3, pc}

000d41f2 <_ZNK19ArduinoJson6101_00014CollectionData7getSlotINS_21ConstRamStringAdapterEEEPNS_11VariantSlotET_.isra.26>:
    s2 = s2->next();
  }
}

template <typename TAdaptedString>
inline VariantSlot* CollectionData::getSlot(TAdaptedString key) const {
   d41f2:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d41f4:	ad02      	add	r5, sp, #8
   d41f6:	4604      	mov	r4, r0
   d41f8:	f845 1d04 	str.w	r1, [r5, #-4]!
  VariantSlot* slot = _head;
  while (slot) {
   d41fc:	b14c      	cbz	r4, d4212 <_ZNK19ArduinoJson6101_00014CollectionData7getSlotINS_21ConstRamStringAdapterEEEPNS_11VariantSlotET_.isra.26+0x20>
    if (key.equals(slot->key())) break;
   d41fe:	68e1      	ldr	r1, [r4, #12]
   d4200:	4628      	mov	r0, r5
   d4202:	f7ff ffe7 	bl	d41d4 <_ZNK19ArduinoJson6101_00021ConstRamStringAdapter6equalsEPKc>
   d4206:	b920      	cbnz	r0, d4212 <_ZNK19ArduinoJson6101_00014CollectionData7getSlotINS_21ConstRamStringAdapterEEEPNS_11VariantSlotET_.isra.26+0x20>
    slot = slot->next();
   d4208:	4620      	mov	r0, r4
   d420a:	f7ff ffdb 	bl	d41c4 <_ZN19ArduinoJson6101_00011VariantSlot4nextEv>
   d420e:	4604      	mov	r4, r0
   d4210:	e7f4      	b.n	d41fc <_ZNK19ArduinoJson6101_00014CollectionData7getSlotINS_21ConstRamStringAdapterEEEPNS_11VariantSlotET_.isra.26+0xa>
  }
  return slot;
}
   d4212:	4620      	mov	r0, r4
   d4214:	b003      	add	sp, #12
   d4216:	bd30      	pop	{r4, r5, pc}

000d4218 <_ZNK19ArduinoJson6101_00016RamStringAdapter4saveEPNS_10MemoryPoolE>:

class RamStringAdapter : public ConstRamStringAdapter {
 public:
  RamStringAdapter(const char* str) : ConstRamStringAdapter(str) {}

  char* save(MemoryPool* pool) const {
   d4218:	b538      	push	{r3, r4, r5, lr}
   d421a:	4605      	mov	r5, r0
    if (!_str) return NULL;
   d421c:	6800      	ldr	r0, [r0, #0]

class RamStringAdapter : public ConstRamStringAdapter {
 public:
  RamStringAdapter(const char* str) : ConstRamStringAdapter(str) {}

  char* save(MemoryPool* pool) const {
   d421e:	460c      	mov	r4, r1
    if (!_str) return NULL;
   d4220:	b168      	cbz	r0, d423e <_ZNK19ArduinoJson6101_00016RamStringAdapter4saveEPNS_10MemoryPoolE+0x26>
    return 0;
  }

  size_t size() const {
    if (!_str) return 0;
    return strlen(_str);
   d4222:	f003 fe30 	bl	d7e86 <strlen>
    _left = _begin;
    _right = _end;
  }

  bool canAlloc(size_t bytes) const {
    return _left + bytes <= _right;
   d4226:	6863      	ldr	r3, [r4, #4]
    size_t n = size() + 1;
   d4228:	1c42      	adds	r2, r0, #1
  VariantSlot* allocVariant() {
    return allocRight<VariantSlot>();
  }

  char* allocFrozenString(size_t n) {
    if (!canAlloc(n)) return 0;
   d422a:	68a0      	ldr	r0, [r4, #8]
    _left = _begin;
    _right = _end;
  }

  bool canAlloc(size_t bytes) const {
    return _left + bytes <= _right;
   d422c:	1899      	adds	r1, r3, r2
  VariantSlot* allocVariant() {
    return allocRight<VariantSlot>();
  }

  char* allocFrozenString(size_t n) {
    if (!canAlloc(n)) return 0;
   d422e:	4281      	cmp	r1, r0
   d4230:	d807      	bhi.n	d4242 <_ZNK19ArduinoJson6101_00016RamStringAdapter4saveEPNS_10MemoryPoolE+0x2a>
    char* s = _left;
    _left += n;
   d4232:	6061      	str	r1, [r4, #4]
    char* dup = pool->allocFrozenString(n);
    if (dup) memcpy(dup, _str, n);
   d4234:	b133      	cbz	r3, d4244 <_ZNK19ArduinoJson6101_00016RamStringAdapter4saveEPNS_10MemoryPoolE+0x2c>
   d4236:	6829      	ldr	r1, [r5, #0]
   d4238:	4618      	mov	r0, r3
   d423a:	f003 fdbb 	bl	d7db4 <memcpy>
class RamStringAdapter : public ConstRamStringAdapter {
 public:
  RamStringAdapter(const char* str) : ConstRamStringAdapter(str) {}

  char* save(MemoryPool* pool) const {
    if (!_str) return NULL;
   d423e:	4603      	mov	r3, r0
   d4240:	e000      	b.n	d4244 <_ZNK19ArduinoJson6101_00016RamStringAdapter4saveEPNS_10MemoryPoolE+0x2c>
   d4242:	2300      	movs	r3, #0
    size_t n = size() + 1;
    char* dup = pool->allocFrozenString(n);
    if (dup) memcpy(dup, _str, n);
    return dup;
  }
   d4244:	4618      	mov	r0, r3
   d4246:	bd38      	pop	{r3, r4, r5, pc}

000d4248 <_ZN19ArduinoJson6101_00019DynamicStringWriterI6StringE5writeEPKhj>:
  size_t write(uint8_t c) {
    _str->operator+=(static_cast<char>(c));
    return 1;
  }

  size_t write(const uint8_t *s, size_t n) {
   d4248:	b570      	push	{r4, r5, r6, lr}
   d424a:	4606      	mov	r6, r0
    // CAUTION: Arduino String doesn't have append()
    // and old version doesn't have size() either
    _str->reserve(_str->length() + n);
   d424c:	6800      	ldr	r0, [r0, #0]
  size_t write(uint8_t c) {
    _str->operator+=(static_cast<char>(c));
    return 1;
  }

  size_t write(const uint8_t *s, size_t n) {
   d424e:	460c      	mov	r4, r1
    // CAUTION: Arduino String doesn't have append()
    // and old version doesn't have size() either
    _str->reserve(_str->length() + n);
   d4250:	6881      	ldr	r1, [r0, #8]
   d4252:	4411      	add	r1, r2
  size_t write(uint8_t c) {
    _str->operator+=(static_cast<char>(c));
    return 1;
  }

  size_t write(const uint8_t *s, size_t n) {
   d4254:	4615      	mov	r5, r2
    // CAUTION: Arduino String doesn't have append()
    // and old version doesn't have size() either
    _str->reserve(_str->length() + n);
   d4256:	f002 fcff 	bl	d6c58 <_ZN6String7reserveEj>
   d425a:	4425      	add	r5, r4
    while (n > 0) {
   d425c:	42ac      	cmp	r4, r5
   d425e:	d005      	beq.n	d426c <_ZN19ArduinoJson6101_00019DynamicStringWriterI6StringE5writeEPKhj+0x24>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
   d4260:	f814 1b01 	ldrb.w	r1, [r4], #1
   d4264:	6830      	ldr	r0, [r6, #0]
   d4266:	f002 fd75 	bl	d6d54 <_ZN6String6concatEc>
   d426a:	e7f7      	b.n	d425c <_ZN19ArduinoJson6101_00019DynamicStringWriterI6StringE5writeEPKhj+0x14>
      _str->operator+=(static_cast<char>(*s++));
      n--;
    }
    return n;
  }
   d426c:	2000      	movs	r0, #0
   d426e:	bd70      	pop	{r4, r5, r6, pc}

000d4270 <_ZN19ArduinoJson6101_00014CollectionData7addSlotEPNS_10MemoryPoolE>:
#include "../Variant/VariantData.hpp"
#include "CollectionData.hpp"

namespace ARDUINOJSON_NAMESPACE {

inline VariantSlot* CollectionData::addSlot(MemoryPool* pool) {
   d4270:	b510      	push	{r4, lr}
  T* allocRight() {
    return reinterpret_cast<T*>(allocRight(sizeof(T)));
  }

  void* allocRight(size_t bytes) {
    if (!canAlloc(bytes)) return 0;
   d4272:	684b      	ldr	r3, [r1, #4]
    _left = _begin;
    _right = _end;
  }

  bool canAlloc(size_t bytes) const {
    return _left + bytes <= _right;
   d4274:	688a      	ldr	r2, [r1, #8]
  T* allocRight() {
    return reinterpret_cast<T*>(allocRight(sizeof(T)));
  }

  void* allocRight(size_t bytes) {
    if (!canAlloc(bytes)) return 0;
   d4276:	3310      	adds	r3, #16
   d4278:	429a      	cmp	r2, r3
   d427a:	d201      	bcs.n	d4280 <_ZN19ArduinoJson6101_00014CollectionData7addSlotEPNS_10MemoryPoolE+0x10>
  VariantSlot* slot = pool->allocVariant();
  if (!slot) return 0;
   d427c:	2000      	movs	r0, #0
   d427e:	bd10      	pop	{r4, pc}
    _right -= bytes;
   d4280:	f1a2 0310 	sub.w	r3, r2, #16
   d4284:	608b      	str	r3, [r1, #8]
   d4286:	2b00      	cmp	r3, #0
   d4288:	d0f8      	beq.n	d427c <_ZN19ArduinoJson6101_00014CollectionData7addSlotEPNS_10MemoryPoolE+0xc>

  if (_tail) {
   d428a:	6841      	ldr	r1, [r0, #4]
   d428c:	b119      	cbz	r1, d4296 <_ZN19ArduinoJson6101_00014CollectionData7addSlotEPNS_10MemoryPoolE+0x26>
    _next = VariantSlotDiff(slot ? slot - this : 0);
  }

  void setNextNotNull(VariantSlot* slot) {
    ARDUINOJSON_ASSERT(slot != 0);
    _next = VariantSlotDiff(slot - this);
   d428e:	1a5c      	subs	r4, r3, r1
   d4290:	1124      	asrs	r4, r4, #4
   d4292:	814c      	strh	r4, [r1, #10]
   d4294:	e000      	b.n	d4298 <_ZN19ArduinoJson6101_00014CollectionData7addSlotEPNS_10MemoryPoolE+0x28>
    _tail->setNextNotNull(slot);
    _tail = slot;
  } else {
    _head = slot;
   d4296:	6003      	str	r3, [r0, #0]
  bool ownsKey() const {
    return (_flags & KEY_IS_OWNED) != 0;
  }

  void clear() {
    _next = 0;
   d4298:	2100      	movs	r1, #0
    _tail = slot;
   d429a:	6043      	str	r3, [r0, #4]
   d429c:	f822 1c06 	strh.w	r1, [r2, #-6]
    _flags = 0;
   d42a0:	f802 1c08 	strb.w	r1, [r2, #-8]
    _key = 0;
   d42a4:	f842 1c04 	str.w	r1, [r2, #-4]
  }

  slot->clear();
  return slot;
   d42a8:	4618      	mov	r0, r3
}
   d42aa:	bd10      	pop	{r4, pc}

000d42ac <_ZN19ArduinoJson6101_00013StringBuilder6appendEc>:
  void append(const char* s, size_t n) {
    while (n-- > 0) append(*s++);
  }

  void append(char c) {
    if (!_slot.value) return;
   d42ac:	6882      	ldr	r2, [r0, #8]

  void append(const char* s, size_t n) {
    while (n-- > 0) append(*s++);
  }

  void append(char c) {
   d42ae:	b510      	push	{r4, lr}
    if (!_slot.value) return;
   d42b0:	b14a      	cbz	r2, d42c6 <_ZN19ArduinoJson6101_00013StringBuilder6appendEc+0x1a>

    if (_size >= _slot.size) {
   d42b2:	6843      	ldr	r3, [r0, #4]
   d42b4:	68c4      	ldr	r4, [r0, #12]
   d42b6:	42a3      	cmp	r3, r4
   d42b8:	d302      	bcc.n	d42c0 <_ZN19ArduinoJson6101_00013StringBuilder6appendEc+0x14>
      _slot.value = 0;
   d42ba:	2300      	movs	r3, #0
   d42bc:	6083      	str	r3, [r0, #8]
      return;
   d42be:	bd10      	pop	{r4, pc}
    }

    _slot.value[_size++] = c;
   d42c0:	1c5c      	adds	r4, r3, #1
   d42c2:	6044      	str	r4, [r0, #4]
   d42c4:	54d1      	strb	r1, [r2, r3]
   d42c6:	bd10      	pop	{r4, pc}

000d42c8 <_ZN19ArduinoJson6101_00013StringBuilder8completeEv>:
  }

  char* complete() {
   d42c8:	b510      	push	{r4, lr}
   d42ca:	4604      	mov	r4, r0
    append('\0');
   d42cc:	2100      	movs	r1, #0
   d42ce:	f7ff ffed 	bl	d42ac <_ZN19ArduinoJson6101_00013StringBuilder6appendEc>
    if (_slot.value) {
   d42d2:	68a3      	ldr	r3, [r4, #8]
   d42d4:	b13b      	cbz	r3, d42e6 <_ZN19ArduinoJson6101_00013StringBuilder8completeEv+0x1e>
      _parent->freezeString(_slot, _size);
   d42d6:	e894 0006 	ldmia.w	r4, {r1, r2}
    checkInvariants();
    return s;
  }

  void freezeString(StringSlot& s, size_t newSize) {
    _left -= (s.size - newSize);
   d42da:	68e3      	ldr	r3, [r4, #12]
   d42dc:	6848      	ldr	r0, [r1, #4]
   d42de:	1ad3      	subs	r3, r2, r3
   d42e0:	4403      	add	r3, r0
   d42e2:	604b      	str	r3, [r1, #4]
    s.size = newSize;
   d42e4:	60e2      	str	r2, [r4, #12]
    }
    return _slot.value;
  }
   d42e6:	68a0      	ldr	r0, [r4, #8]
   d42e8:	bd10      	pop	{r4, pc}
	...

000d42ec <_ZNK19ArduinoJson6101_00020DeserializationErrorcvMS0_KFvvEEv>:
    return lhs != rhs._code;
  }

  // Behaves like a bool
  operator bool_type() const {
    return _code != Ok ? &DeserializationError::safeBoolHelper : 0;
   d42ec:	780b      	ldrb	r3, [r1, #0]
   d42ee:	b90b      	cbnz	r3, d42f4 <_ZNK19ArduinoJson6101_00020DeserializationErrorcvMS0_KFvvEEv+0x8>
   d42f0:	6003      	str	r3, [r0, #0]
   d42f2:	e002      	b.n	d42fa <_ZNK19ArduinoJson6101_00020DeserializationErrorcvMS0_KFvvEEv+0xe>
   d42f4:	4b02      	ldr	r3, [pc, #8]	; (d4300 <_ZNK19ArduinoJson6101_00020DeserializationErrorcvMS0_KFvvEEv+0x14>)
   d42f6:	6003      	str	r3, [r0, #0]
   d42f8:	2300      	movs	r3, #0
   d42fa:	6043      	str	r3, [r0, #4]
  }
   d42fc:	4770      	bx	lr
   d42fe:	bf00      	nop
   d4300:	000d40b7 	.word	0x000d40b7

000d4304 <loop>:
  currentStateTimer.start();
}


void loop ()
{
   d4304:	4770      	bx	lr

000d4306 <_ZN19ArduinoJson6101_00014CollectionData3addINS_21ConstRamStringAdapterEEEPNS_11VariantDataET_PNS_10MemoryPoolE>:
inline VariantData* CollectionData::add(MemoryPool* pool) {
  return slotData(addSlot(pool));
}

template <typename TAdaptedString>
inline VariantData* CollectionData::add(TAdaptedString key, MemoryPool* pool) {
   d4306:	b510      	push	{r4, lr}
   d4308:	460c      	mov	r4, r1
  VariantSlot* slot = addSlot(pool);
   d430a:	4611      	mov	r1, r2
   d430c:	f7ff ffb0 	bl	d4270 <_ZN19ArduinoJson6101_00014CollectionData7addSlotEPNS_10MemoryPoolE>

namespace ARDUINOJSON_NAMESPACE {

template <typename TAdaptedString>
inline bool slotSetKey(VariantSlot* var, TAdaptedString key, MemoryPool* pool) {
  if (!var) return false;
   d4310:	b120      	cbz	r0, d431c <_ZN19ArduinoJson6101_00014CollectionData3addINS_21ConstRamStringAdapterEEEPNS_11VariantDataET_PNS_10MemoryPoolE+0x16>
    _flags |= KEY_IS_OWNED;
    _key = k.get();
  }

  void setLinkedKey(not_null<const char*> k) {
    _flags &= VALUE_MASK;
   d4312:	7a03      	ldrb	r3, [r0, #8]
    _key = k.get();
   d4314:	60c4      	str	r4, [r0, #12]
    _flags |= KEY_IS_OWNED;
    _key = k.get();
  }

  void setLinkedKey(not_null<const char*> k) {
    _flags &= VALUE_MASK;
   d4316:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   d431a:	7203      	strb	r3, [r0, #8]
  if (!slotSetKey(slot, key, pool)) return 0;
  return slot->data();
}
   d431c:	bd10      	pop	{r4, pc}

000d431e <_ZN19ArduinoJson6101_00014CollectionData8copyFromERKS0_PNS_10MemoryPoolE>:
inline bool CollectionData::containsKey(const TAdaptedString& key) const {
  return getSlot(key) != 0;
}

inline bool CollectionData::copyFrom(const CollectionData& src,
                                     MemoryPool* pool) {
   d431e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (!slotSetKey(slot, key, pool)) return 0;
  return slot->data();
}

inline void CollectionData::clear() {
  _head = 0;
   d4320:	2300      	movs	r3, #0
   d4322:	6003      	str	r3, [r0, #0]
  _tail = 0;
   d4324:	6043      	str	r3, [r0, #4]
}

inline bool CollectionData::copyFrom(const CollectionData& src,
                                     MemoryPool* pool) {
  clear();
  for (VariantSlot* s = src._head; s; s = s->next()) {
   d4326:	680d      	ldr	r5, [r1, #0]
inline bool CollectionData::containsKey(const TAdaptedString& key) const {
  return getSlot(key) != 0;
}

inline bool CollectionData::copyFrom(const CollectionData& src,
                                     MemoryPool* pool) {
   d4328:	4606      	mov	r6, r0
   d432a:	4617      	mov	r7, r2
  clear();
  for (VariantSlot* s = src._head; s; s = s->next()) {
   d432c:	b36d      	cbz	r5, d438a <_ZN19ArduinoJson6101_00014CollectionData8copyFromERKS0_PNS_10MemoryPoolE+0x6c>
   d432e:	68ec      	ldr	r4, [r5, #12]
    VariantData* var;
    if (s->key() != 0) {
   d4330:	b1e4      	cbz	r4, d436c <_ZN19ArduinoJson6101_00014CollectionData8copyFromERKS0_PNS_10MemoryPoolE+0x4e>
      if (s->ownsKey())
   d4332:	f995 3008 	ldrsb.w	r3, [r5, #8]
   d4336:	2b00      	cmp	r3, #0
   d4338:	da12      	bge.n	d4360 <_ZN19ArduinoJson6101_00014CollectionData8copyFromERKS0_PNS_10MemoryPoolE+0x42>
  return slotData(addSlot(pool));
}

template <typename TAdaptedString>
inline VariantData* CollectionData::add(TAdaptedString key, MemoryPool* pool) {
  VariantSlot* slot = addSlot(pool);
   d433a:	4639      	mov	r1, r7
   d433c:	4630      	mov	r0, r6
   d433e:	f7ff ff97 	bl	d4270 <_ZN19ArduinoJson6101_00014CollectionData7addSlotEPNS_10MemoryPoolE>
   d4342:	9401      	str	r4, [sp, #4]
   d4344:	4604      	mov	r4, r0
   d4346:	b310      	cbz	r0, d438e <_ZN19ArduinoJson6101_00014CollectionData8copyFromERKS0_PNS_10MemoryPoolE+0x70>
  if (key.isStatic()) {
    var->setLinkedKey(make_not_null(key.data()));
  } else {
    const char* dup = key.save(pool);
   d4348:	4639      	mov	r1, r7
   d434a:	a801      	add	r0, sp, #4
   d434c:	f7ff ff64 	bl	d4218 <_ZNK19ArduinoJson6101_00016RamStringAdapter4saveEPNS_10MemoryPoolE>
    if (!dup) return false;
   d4350:	b1e8      	cbz	r0, d438e <_ZN19ArduinoJson6101_00014CollectionData8copyFromERKS0_PNS_10MemoryPoolE+0x70>
    ARDUINOJSON_ASSERT(slot != 0);
    _next = VariantSlotDiff(slot - this);
  }

  void setOwnedKey(not_null<const char*> k) {
    _flags |= KEY_IS_OWNED;
   d4352:	7a23      	ldrb	r3, [r4, #8]
    _key = k.get();
   d4354:	60e0      	str	r0, [r4, #12]
    ARDUINOJSON_ASSERT(slot != 0);
    _next = VariantSlotDiff(slot - this);
  }

  void setOwnedKey(not_null<const char*> k) {
    _flags |= KEY_IS_OWNED;
   d4356:	f063 037f 	orn	r3, r3, #127	; 0x7f
   d435a:	7223      	strb	r3, [r4, #8]
  // - no destructor
  // - no virtual
  // - no inheritance

  VariantData* data() {
    return reinterpret_cast<VariantData*>(&_content);
   d435c:	4620      	mov	r0, r4
   d435e:	e00a      	b.n	d4376 <_ZN19ArduinoJson6101_00014CollectionData8copyFromERKS0_PNS_10MemoryPoolE+0x58>
    VariantData* var;
    if (s->key() != 0) {
      if (s->ownsKey())
        var = add(RamStringAdapter(s->key()), pool);
      else
        var = add(ConstRamStringAdapter(s->key()), pool);
   d4360:	463a      	mov	r2, r7
   d4362:	4621      	mov	r1, r4
   d4364:	4630      	mov	r0, r6
   d4366:	f7ff ffce 	bl	d4306 <_ZN19ArduinoJson6101_00014CollectionData3addINS_21ConstRamStringAdapterEEEPNS_11VariantDataET_PNS_10MemoryPoolE>
   d436a:	e003      	b.n	d4374 <_ZN19ArduinoJson6101_00014CollectionData8copyFromERKS0_PNS_10MemoryPoolE+0x56>
  slot->clear();
  return slot;
}

inline VariantData* CollectionData::add(MemoryPool* pool) {
  return slotData(addSlot(pool));
   d436c:	4639      	mov	r1, r7
   d436e:	4630      	mov	r0, r6
   d4370:	f7ff ff7e 	bl	d4270 <_ZN19ArduinoJson6101_00014CollectionData7addSlotEPNS_10MemoryPoolE>
      else
        var = add(ConstRamStringAdapter(s->key()), pool);
    } else {
      var = add(pool);
    }
    if (!var) return false;
   d4374:	b158      	cbz	r0, d438e <_ZN19ArduinoJson6101_00014CollectionData8copyFromERKS0_PNS_10MemoryPoolE+0x70>
    if (!var->copyFrom(*s->data(), pool)) return false;
   d4376:	463a      	mov	r2, r7
   d4378:	4629      	mov	r1, r5
   d437a:	f000 f80b 	bl	d4394 <_ZN19ArduinoJson6101_00011VariantData8copyFromERKS0_PNS_10MemoryPoolE>
   d437e:	b130      	cbz	r0, d438e <_ZN19ArduinoJson6101_00014CollectionData8copyFromERKS0_PNS_10MemoryPoolE+0x70>
}

inline bool CollectionData::copyFrom(const CollectionData& src,
                                     MemoryPool* pool) {
  clear();
  for (VariantSlot* s = src._head; s; s = s->next()) {
   d4380:	4628      	mov	r0, r5
   d4382:	f7ff ff1f 	bl	d41c4 <_ZN19ArduinoJson6101_00011VariantSlot4nextEv>
   d4386:	4605      	mov	r5, r0
   d4388:	e7d0      	b.n	d432c <_ZN19ArduinoJson6101_00014CollectionData8copyFromERKS0_PNS_10MemoryPoolE+0xe>
      var = add(pool);
    }
    if (!var) return false;
    if (!var->copyFrom(*s->data(), pool)) return false;
  }
  return true;
   d438a:	2001      	movs	r0, #1
   d438c:	e000      	b.n	d4390 <_ZN19ArduinoJson6101_00014CollectionData8copyFromERKS0_PNS_10MemoryPoolE+0x72>
      else
        var = add(ConstRamStringAdapter(s->key()), pool);
    } else {
      var = add(pool);
    }
    if (!var) return false;
   d438e:	2000      	movs	r0, #0
    if (!var->copyFrom(*s->data(), pool)) return false;
  }
  return true;
}
   d4390:	b003      	add	sp, #12
   d4392:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4394 <_ZN19ArduinoJson6101_00011VariantData8copyFromERKS0_PNS_10MemoryPoolE>:

  const CollectionData *asObject() const {
    return const_cast<VariantData *>(this)->asObject();
  }

  bool copyFrom(const VariantData &src, MemoryPool *pool) {
   d4394:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    return _content.asCollection.add(key, pool);
  }

 private:
  uint8_t type() const {
    return _flags & VALUE_MASK;
   d4398:	7a0d      	ldrb	r5, [r1, #8]
   d439a:	f005 057f 	and.w	r5, r5, #127	; 0x7f
  const CollectionData *asObject() const {
    return const_cast<VariantData *>(this)->asObject();
  }

  bool copyFrom(const VariantData &src, MemoryPool *pool) {
    switch (src.type()) {
   d439e:	2d04      	cmp	r5, #4

  const CollectionData *asObject() const {
    return const_cast<VariantData *>(this)->asObject();
  }

  bool copyFrom(const VariantData &src, MemoryPool *pool) {
   d43a0:	4604      	mov	r4, r0
   d43a2:	460e      	mov	r6, r1
   d43a4:	f100 0708 	add.w	r7, r0, #8
    switch (src.type()) {
   d43a8:	d013      	beq.n	d43d2 <_ZN19ArduinoJson6101_00011VariantData8copyFromERKS0_PNS_10MemoryPoolE+0x3e>
   d43aa:	d802      	bhi.n	d43b2 <_ZN19ArduinoJson6101_00011VariantData8copyFromERKS0_PNS_10MemoryPoolE+0x1e>
   d43ac:	2d02      	cmp	r5, #2
   d43ae:	d025      	beq.n	d43fc <_ZN19ArduinoJson6101_00011VariantData8copyFromERKS0_PNS_10MemoryPoolE+0x68>
   d43b0:	e040      	b.n	d4434 <_ZN19ArduinoJson6101_00011VariantData8copyFromERKS0_PNS_10MemoryPoolE+0xa0>
   d43b2:	2d20      	cmp	r5, #32
   d43b4:	d001      	beq.n	d43ba <_ZN19ArduinoJson6101_00011VariantData8copyFromERKS0_PNS_10MemoryPoolE+0x26>
   d43b6:	2d40      	cmp	r5, #64	; 0x40
   d43b8:	d13c      	bne.n	d4434 <_ZN19ArduinoJson6101_00011VariantData8copyFromERKS0_PNS_10MemoryPoolE+0xa0>
    _content.asCollection.clear();
    return _content.asCollection;
  }

  CollectionData &toObject() {
    setType(VALUE_IS_OBJECT);
   d43ba:	4629      	mov	r1, r5
   d43bc:	4638      	mov	r0, r7
   d43be:	f7ff fead 	bl	d411c <_ZN19ArduinoJson6101_00011VariantData7setTypeEh.isra.16>
  if (!slotSetKey(slot, key, pool)) return 0;
  return slot->data();
}

inline void CollectionData::clear() {
  _head = 0;
   d43c2:	2300      	movs	r3, #0
   d43c4:	6023      	str	r3, [r4, #0]
  _tail = 0;
   d43c6:	6063      	str	r3, [r4, #4]
  bool copyFrom(const VariantData &src, MemoryPool *pool) {
    switch (src.type()) {
      case VALUE_IS_ARRAY:
        return toArray().copyFrom(src._content.asCollection, pool);
      case VALUE_IS_OBJECT:
        return toObject().copyFrom(src._content.asCollection, pool);
   d43c8:	4631      	mov	r1, r6
   d43ca:	4620      	mov	r0, r4
   d43cc:	f7ff ffa7 	bl	d431e <_ZN19ArduinoJson6101_00014CollectionData8copyFromERKS0_PNS_10MemoryPoolE>
   d43d0:	e039      	b.n	d4446 <_ZN19ArduinoJson6101_00011VariantData8copyFromERKS0_PNS_10MemoryPoolE+0xb2>
   d43d2:	a802      	add	r0, sp, #8
   d43d4:	680b      	ldr	r3, [r1, #0]
   d43d6:	f840 3d04 	str.w	r3, [r0, #-4]!
    }
  }

  template <typename T>
  bool setOwnedString(T value, MemoryPool *pool) {
    return setOwnedString(value.save(pool));
   d43da:	4611      	mov	r1, r2
   d43dc:	f7ff ff1c 	bl	d4218 <_ZNK19ArduinoJson6101_00016RamStringAdapter4saveEPNS_10MemoryPoolE>
    setType(VALUE_IS_OWNED_STRING);
    _content.asString = s.get();
  }

  bool setOwnedString(const char *s) {
    if (s) {
   d43e0:	4602      	mov	r2, r0
   d43e2:	b128      	cbz	r0, d43f0 <_ZN19ArduinoJson6101_00011VariantData8copyFromERKS0_PNS_10MemoryPoolE+0x5c>
  void setNull() {
    setType(VALUE_IS_NULL);
  }

  void setOwnedString(not_null<const char *> s) {
    setType(VALUE_IS_OWNED_STRING);
   d43e4:	4629      	mov	r1, r5
   d43e6:	4638      	mov	r0, r7
   d43e8:	f7ff fe98 	bl	d411c <_ZN19ArduinoJson6101_00011VariantData7setTypeEh.isra.16>
    _content.asString = s.get();
   d43ec:	6022      	str	r2, [r4, #0]
   d43ee:	e029      	b.n	d4444 <_ZN19ArduinoJson6101_00011VariantData8copyFromERKS0_PNS_10MemoryPoolE+0xb0>
  bool setOwnedString(const char *s) {
    if (s) {
      setOwnedString(make_not_null(s));
      return true;
    } else {
      setType(VALUE_IS_NULL);
   d43f0:	4601      	mov	r1, r0
   d43f2:	4638      	mov	r0, r7
   d43f4:	f7ff fe92 	bl	d411c <_ZN19ArduinoJson6101_00011VariantData7setTypeEh.isra.16>
      return false;
   d43f8:	4610      	mov	r0, r2
   d43fa:	e024      	b.n	d4446 <_ZN19ArduinoJson6101_00011VariantData8copyFromERKS0_PNS_10MemoryPoolE+0xb2>
        return toObject().copyFrom(src._content.asCollection, pool);
      case VALUE_IS_OWNED_STRING:
        return setOwnedString(RamStringAdapter(src._content.asString), pool);
      case VALUE_IS_OWNED_RAW:
        return setOwnedRaw(
            serialized(src._content.asRaw.data, src._content.asRaw.size), pool);
   d43fc:	e891 0102 	ldmia.w	r1, {r1, r8}
  bool isNull() const {
    return !_str;
  }

  char* save(MemoryPool* pool) const {
    if (!_str) return NULL;
   d4400:	b191      	cbz	r1, d4428 <_ZN19ArduinoJson6101_00011VariantData8copyFromERKS0_PNS_10MemoryPoolE+0x94>
    _left = _begin;
    _right = _end;
  }

  bool canAlloc(size_t bytes) const {
    return _left + bytes <= _right;
   d4402:	6856      	ldr	r6, [r2, #4]
  VariantSlot* allocVariant() {
    return allocRight<VariantSlot>();
  }

  char* allocFrozenString(size_t n) {
    if (!canAlloc(n)) return 0;
   d4404:	6893      	ldr	r3, [r2, #8]
    _left = _begin;
    _right = _end;
  }

  bool canAlloc(size_t bytes) const {
    return _left + bytes <= _right;
   d4406:	eb06 0008 	add.w	r0, r6, r8
  VariantSlot* allocVariant() {
    return allocRight<VariantSlot>();
  }

  char* allocFrozenString(size_t n) {
    if (!canAlloc(n)) return 0;
   d440a:	4298      	cmp	r0, r3
   d440c:	d80c      	bhi.n	d4428 <_ZN19ArduinoJson6101_00011VariantData8copyFromERKS0_PNS_10MemoryPoolE+0x94>
    char* s = _left;
    _left += n;
   d440e:	6050      	str	r0, [r2, #4]
    char* dup = pool->allocFrozenString(_size);
    if (dup) memcpy(dup, _str, _size);
   d4410:	b156      	cbz	r6, d4428 <_ZN19ArduinoJson6101_00011VariantData8copyFromERKS0_PNS_10MemoryPoolE+0x94>
   d4412:	4642      	mov	r2, r8
   d4414:	4630      	mov	r0, r6
   d4416:	f003 fccd 	bl	d7db4 <memcpy>

  template <typename T>
  bool setOwnedRaw(SerializedValue<T> value, MemoryPool *pool) {
    char *dup = adaptString(value.data(), value.size()).save(pool);
    if (dup) {
      setType(VALUE_IS_OWNED_RAW);
   d441a:	4629      	mov	r1, r5
   d441c:	4638      	mov	r0, r7
   d441e:	f7ff fe7d 	bl	d411c <_ZN19ArduinoJson6101_00011VariantData7setTypeEh.isra.16>
      _content.asRaw.data = dup;
      _content.asRaw.size = value.size();
   d4422:	e884 0140 	stmia.w	r4, {r6, r8}
   d4426:	e00d      	b.n	d4444 <_ZN19ArduinoJson6101_00011VariantData8copyFromERKS0_PNS_10MemoryPoolE+0xb0>
      return true;
    } else {
      setType(VALUE_IS_NULL);
   d4428:	4638      	mov	r0, r7
   d442a:	2100      	movs	r1, #0
   d442c:	f7ff fe76 	bl	d411c <_ZN19ArduinoJson6101_00011VariantData7setTypeEh.isra.16>
      return false;
   d4430:	2000      	movs	r0, #0
   d4432:	e008      	b.n	d4446 <_ZN19ArduinoJson6101_00011VariantData8copyFromERKS0_PNS_10MemoryPoolE+0xb2>
        return setOwnedString(RamStringAdapter(src._content.asString), pool);
      case VALUE_IS_OWNED_RAW:
        return setOwnedRaw(
            serialized(src._content.asRaw.data, src._content.asRaw.size), pool);
      default:
        setType(src.type());
   d4434:	4629      	mov	r1, r5
   d4436:	4638      	mov	r0, r7
   d4438:	f7ff fe70 	bl	d411c <_ZN19ArduinoJson6101_00011VariantData7setTypeEh.isra.16>
        _content = src._content;
   d443c:	e896 0003 	ldmia.w	r6, {r0, r1}
   d4440:	e884 0003 	stmia.w	r4, {r0, r1}
        return true;
   d4444:	2001      	movs	r0, #1
    }
  }
   d4446:	b002      	add	sp, #8
   d4448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d444c <_ZN19ArduinoJson6101_00015variantCopyFromEPNS_11VariantDataEPKS0_PNS_10MemoryPoolE>:
inline CollectionData *variantAsObject(VariantData *var) {
  return var != 0 ? var->asObject() : 0;
}

inline bool variantCopyFrom(VariantData *dst, const VariantData *src,
                            MemoryPool *pool) {
   d444c:	b510      	push	{r4, lr}
  if (!dst) return false;
   d444e:	b140      	cbz	r0, d4462 <_ZN19ArduinoJson6101_00015variantCopyFromEPNS_11VariantDataEPKS0_PNS_10MemoryPoolE+0x16>
  if (!src) {
   d4450:	b921      	cbnz	r1, d445c <_ZN19ArduinoJson6101_00015variantCopyFromEPNS_11VariantDataEPKS0_PNS_10MemoryPoolE+0x10>
      setType(VALUE_IS_NULL);
    }
  }

  void setNull() {
    setType(VALUE_IS_NULL);
   d4452:	3008      	adds	r0, #8
   d4454:	f7ff fe62 	bl	d411c <_ZN19ArduinoJson6101_00011VariantData7setTypeEh.isra.16>
    dst->setNull();
    return true;
   d4458:	2001      	movs	r0, #1
   d445a:	bd10      	pop	{r4, pc}
  }
  return dst->copyFrom(*src, pool);
   d445c:	f7ff ff9a 	bl	d4394 <_ZN19ArduinoJson6101_00011VariantData8copyFromERKS0_PNS_10MemoryPoolE>
   d4460:	bd10      	pop	{r4, pc}
}
   d4462:	bd10      	pop	{r4, pc}

000d4464 <_ZN19ArduinoJson6101_00017BasicJsonDocumentINS_16DefaultAllocatorEEC1EjS1_>:
  return (addr & mask) == 0;
}

inline size_t addPadding(size_t bytes) {
  const size_t mask = sizeof(void *) - 1;
  return (bytes + mask) & ~mask;
   d4464:	3103      	adds	r1, #3
};

template <typename TAllocator>
class BasicJsonDocument : AllocatorOwner<TAllocator>, public JsonDocument {
 public:
  explicit BasicJsonDocument(size_t capa, TAllocator allocator = TAllocator())
   d4466:	b538      	push	{r3, r4, r5, lr}
   d4468:	f021 0403 	bic.w	r4, r1, #3
   d446c:	4605      	mov	r5, r0

namespace ARDUINOJSON_NAMESPACE {

struct DefaultAllocator {
  void* allocate(size_t n) {
    return malloc(n);
   d446e:	4620      	mov	r0, r4
   d4470:	f001 fcda 	bl	d5e28 <malloc>
 public:
  MemoryPool(char* buf, size_t capa)
      : _begin(buf),
        _left(buf),
        _right(buf ? buf + capa : 0),
        _end(buf ? buf + capa : 0) {
   d4474:	b110      	cbz	r0, d447c <_ZN19ArduinoJson6101_00017BasicJsonDocumentINS_16DefaultAllocatorEEC1EjS1_+0x18>
   d4476:	1901      	adds	r1, r0, r4
   d4478:	460b      	mov	r3, r1
   d447a:	e001      	b.n	d4480 <_ZN19ArduinoJson6101_00017BasicJsonDocumentINS_16DefaultAllocatorEEC1EjS1_+0x1c>
   d447c:	4601      	mov	r1, r0
   d447e:	4603      	mov	r3, r0
      const TString& key) {
    _data.remove(adaptString(key));
  }

 protected:
  JsonDocument(MemoryPool pool) : _pool(pool) {
   d4480:	6068      	str	r0, [r5, #4]
   d4482:	60a8      	str	r0, [r5, #8]
   d4484:	60e9      	str	r1, [r5, #12]
   d4486:	f105 001c 	add.w	r0, r5, #28
   d448a:	612b      	str	r3, [r5, #16]
   d448c:	2100      	movs	r1, #0
   d448e:	f7ff fe45 	bl	d411c <_ZN19ArduinoJson6101_00011VariantData7setTypeEh.isra.16>
      : AllocatorOwner<TAllocator>(allocator), JsonDocument(allocPool(capa)) {}
   d4492:	4628      	mov	r0, r5
   d4494:	bd38      	pop	{r3, r4, r5, pc}

000d4496 <_ZN19ArduinoJson6101_00023variantSetSignedIntegerIiEEbPNS_11VariantDataET_>:
                               MemoryPool *pool) {
  return var != 0 && var->setOwnedRaw(value, pool);
}

template <typename T>
inline bool variantSetSignedInteger(VariantData *var, T value) {
   d4496:	b510      	push	{r4, lr}
  if (!var) return false;
   d4498:	4602      	mov	r2, r0
                               MemoryPool *pool) {
  return var != 0 && var->setOwnedRaw(value, pool);
}

template <typename T>
inline bool variantSetSignedInteger(VariantData *var, T value) {
   d449a:	460c      	mov	r4, r1
  if (!var) return false;
   d449c:	b170      	cbz	r0, d44bc <_ZN19ArduinoJson6101_00023variantSetSignedIntegerIiEEbPNS_11VariantDataET_+0x26>
    setSignedInteger(value);
  }

  template <typename T>
  void setSignedInteger(T value) {
    if (value >= 0) {
   d449e:	2900      	cmp	r1, #0
   d44a0:	f100 0008 	add.w	r0, r0, #8
   d44a4:	db03      	blt.n	d44ae <_ZN19ArduinoJson6101_00023variantSetSignedIntegerIiEEbPNS_11VariantDataET_+0x18>
      setNegativeInteger(~static_cast<UInt>(value) + 1);
    }
  }

  void setPositiveInteger(UInt value) {
    setType(VALUE_IS_POSITIVE_INTEGER);
   d44a6:	2106      	movs	r1, #6
   d44a8:	f7ff fe38 	bl	d411c <_ZN19ArduinoJson6101_00011VariantData7setTypeEh.isra.16>
   d44ac:	e003      	b.n	d44b6 <_ZN19ArduinoJson6101_00023variantSetSignedIntegerIiEEbPNS_11VariantDataET_+0x20>
    _content.asInteger = value;
  }

  void setNegativeInteger(UInt value) {
    setType(VALUE_IS_NEGATIVE_INTEGER);
   d44ae:	2107      	movs	r1, #7
   d44b0:	f7ff fe34 	bl	d411c <_ZN19ArduinoJson6101_00011VariantData7setTypeEh.isra.16>
    _content.asInteger = value;
   d44b4:	4264      	negs	r4, r4
   d44b6:	6014      	str	r4, [r2, #0]
  var->setSignedInteger(value);
  return true;
   d44b8:	2001      	movs	r0, #1
   d44ba:	bd10      	pop	{r4, pc}
}
   d44bc:	bd10      	pop	{r4, pc}

000d44be <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE7currentEv>:

 private:
  JsonDeserializer &operator=(const JsonDeserializer &);  // non-copiable

  char current() {
    if (!_loaded) {
   d44be:	7c82      	ldrb	r2, [r0, #18]
   d44c0:	b962      	cbnz	r2, d44dc <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE7currentEv+0x1e>
  char read() {
    return static_cast<char>(*_ptr++);
  }

  bool ended() const {
    return _ptr == _end;
   d44c2:	6843      	ldr	r3, [r0, #4]
      if (_reader.ended())
   d44c4:	6881      	ldr	r1, [r0, #8]
   d44c6:	428b      	cmp	r3, r1
 public:
  explicit SafeCharPointerReader(const char* ptr, size_t len)
      : _ptr(ptr ? ptr : reinterpret_cast<const char*>("")), _end(_ptr + len) {}

  char read() {
    return static_cast<char>(*_ptr++);
   d44c8:	bf1f      	itttt	ne
   d44ca:	1c5a      	addne	r2, r3, #1
   d44cc:	6042      	strne	r2, [r0, #4]
   d44ce:	781b      	ldrbne	r3, [r3, #0]
        _current = 0;
      else
        _current = _reader.read();
   d44d0:	7443      	strbne	r3, [r0, #17]
      _loaded = true;
   d44d2:	f04f 0301 	mov.w	r3, #1
  JsonDeserializer &operator=(const JsonDeserializer &);  // non-copiable

  char current() {
    if (!_loaded) {
      if (_reader.ended())
        _current = 0;
   d44d6:	bf08      	it	eq
   d44d8:	7442      	strbeq	r2, [r0, #17]
      else
        _current = _reader.read();
      _loaded = true;
   d44da:	7483      	strb	r3, [r0, #18]
    }
    return _current;
  }
   d44dc:	7c40      	ldrb	r0, [r0, #17]
   d44de:	4770      	bx	lr

000d44e0 <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>:
    if (c < 'A') return uint8_t(c - '0');
    c = char(c & ~0x20);  // uppercase
    return uint8_t(c - 'A' + 10);
  }

  DeserializationError skipSpacesAndComments() {
   d44e0:	b570      	push	{r4, r5, r6, lr}
   d44e2:	4604      	mov	r4, r0
    }
    return _current;
  }

  void move() {
    _loaded = false;
   d44e4:	2500      	movs	r5, #0
    return uint8_t(c - 'A' + 10);
  }

  DeserializationError skipSpacesAndComments() {
    for (;;) {
      switch (current()) {
   d44e6:	4620      	mov	r0, r4
   d44e8:	f7ff ffe9 	bl	d44be <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE7currentEv>
   d44ec:	280a      	cmp	r0, #10
   d44ee:	d803      	bhi.n	d44f8 <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x18>
   d44f0:	2809      	cmp	r0, #9
   d44f2:	d21d      	bcs.n	d4530 <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x50>
   d44f4:	b1b0      	cbz	r0, d4524 <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x44>
   d44f6:	e02f      	b.n	d4558 <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x78>
   d44f8:	2820      	cmp	r0, #32
   d44fa:	d019      	beq.n	d4530 <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x50>
   d44fc:	282f      	cmp	r0, #47	; 0x2f
   d44fe:	d002      	beq.n	d4506 <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x26>
   d4500:	280d      	cmp	r0, #13
   d4502:	d129      	bne.n	d4558 <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x78>
   d4504:	e014      	b.n	d4530 <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x50>
    }
    return _current;
  }

  void move() {
    _loaded = false;
   d4506:	74a5      	strb	r5, [r4, #18]
          continue;

        // comments
        case '/':
          move();  // skip '/'
          switch (current()) {
   d4508:	4620      	mov	r0, r4
   d450a:	f7ff ffd8 	bl	d44be <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE7currentEv>
   d450e:	282a      	cmp	r0, #42	; 0x2a
   d4510:	d002      	beq.n	d4518 <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x38>
   d4512:	282f      	cmp	r0, #47	; 0x2f
   d4514:	d016      	beq.n	d4544 <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x64>
   d4516:	e01c      	b.n	d4552 <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x72>
    }
    return _current;
  }

  void move() {
    _loaded = false;
   d4518:	74a5      	strb	r5, [r4, #18]
          move();  // skip '/'
          switch (current()) {
            // block comment
            case '*': {
              move();  // skip '*'
              bool wasStar = false;
   d451a:	2600      	movs	r6, #0
              for (;;) {
                char c = current();
   d451c:	4620      	mov	r0, r4
   d451e:	f7ff ffce 	bl	d44be <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE7currentEv>
                if (c == '\0') return DeserializationError::IncompleteInput;
   d4522:	b910      	cbnz	r0, d452a <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x4a>
   d4524:	f04f 0001 	mov.w	r0, #1
   d4528:	bd70      	pop	{r4, r5, r6, pc}
                if (c == '/' && wasStar) {
   d452a:	282f      	cmp	r0, #47	; 0x2f
   d452c:	d102      	bne.n	d4534 <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x54>
   d452e:	b10e      	cbz	r6, d4534 <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x54>
    }
    return _current;
  }

  void move() {
    _loaded = false;
   d4530:	74a5      	strb	r5, [r4, #18]
   d4532:	e7d8      	b.n	d44e6 <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x6>
                if (c == '\0') return DeserializationError::IncompleteInput;
                if (c == '/' && wasStar) {
                  move();
                  break;
                }
                wasStar = c == '*';
   d4534:	f1a0 032a 	sub.w	r3, r0, #42	; 0x2a
   d4538:	425e      	negs	r6, r3
   d453a:	415e      	adcs	r6, r3
    }
    return _current;
  }

  void move() {
    _loaded = false;
   d453c:	74a5      	strb	r5, [r4, #18]
   d453e:	e7ed      	b.n	d451c <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x3c>
              // no need to skip "//"
              for (;;) {
                move();
                char c = current();
                if (c == '\0') return DeserializationError::IncompleteInput;
                if (c == '\n') break;
   d4540:	280a      	cmp	r0, #10
   d4542:	d0d0      	beq.n	d44e6 <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x6>
    }
    return _current;
  }

  void move() {
    _loaded = false;
   d4544:	74a5      	strb	r5, [r4, #18]
            // trailing comment
            case '/':
              // no need to skip "//"
              for (;;) {
                move();
                char c = current();
   d4546:	4620      	mov	r0, r4
   d4548:	f7ff ffb9 	bl	d44be <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE7currentEv>
                if (c == '\0') return DeserializationError::IncompleteInput;
   d454c:	2800      	cmp	r0, #0
   d454e:	d1f7      	bne.n	d4540 <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x60>
   d4550:	e7e8      	b.n	d4524 <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x44>
              }
              break;

            // not a comment, just a '/'
            default:
              return DeserializationError::InvalidInput;
   d4552:	f04f 0002 	mov.w	r0, #2
   d4556:	bd70      	pop	{r4, r5, r6, pc}
          }
          break;

        default:
          return DeserializationError::Ok;
   d4558:	f04f 0000 	mov.w	r0, #0
      }
    }
  }
   d455c:	bd70      	pop	{r4, r5, r6, pc}

000d455e <_ZN19ArduinoJson6101_00011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE>:
  VariantData *getMember(TAdaptedString key) const {
    return isObject() ? _content.asCollection.get(key) : 0;
  }

  template <typename TAdaptedString>
  VariantData *getOrAddMember(TAdaptedString key, MemoryPool *pool) {
   d455e:	b570      	push	{r4, r5, r6, lr}
   d4560:	4616      	mov	r6, r2
    if (isNull()) toObject();
   d4562:	7a02      	ldrb	r2, [r0, #8]
   d4564:	f012 027f 	ands.w	r2, r2, #127	; 0x7f
  VariantData *getMember(TAdaptedString key) const {
    return isObject() ? _content.asCollection.get(key) : 0;
  }

  template <typename TAdaptedString>
  VariantData *getOrAddMember(TAdaptedString key, MemoryPool *pool) {
   d4568:	4604      	mov	r4, r0
   d456a:	460d      	mov	r5, r1
    if (isNull()) toObject();
   d456c:	d105      	bne.n	d457a <_ZN19ArduinoJson6101_00011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE+0x1c>
    _content.asCollection.clear();
    return _content.asCollection;
  }

  CollectionData &toObject() {
    setType(VALUE_IS_OBJECT);
   d456e:	2120      	movs	r1, #32
   d4570:	3008      	adds	r0, #8
   d4572:	f7ff fdd3 	bl	d411c <_ZN19ArduinoJson6101_00011VariantData7setTypeEh.isra.16>
  if (!slotSetKey(slot, key, pool)) return 0;
  return slot->data();
}

inline void CollectionData::clear() {
  _head = 0;
   d4576:	6022      	str	r2, [r4, #0]
  _tail = 0;
   d4578:	6062      	str	r2, [r4, #4]
  }

  template <typename TAdaptedString>
  VariantData *getOrAddMember(TAdaptedString key, MemoryPool *pool) {
    if (isNull()) toObject();
    if (!isObject()) return 0;
   d457a:	7a23      	ldrb	r3, [r4, #8]
   d457c:	f003 0320 	and.w	r3, r3, #32
   d4580:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   d4584:	b14b      	cbz	r3, d459a <_ZN19ArduinoJson6101_00011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE+0x3c>
  return 0;
}

template <typename TAdaptedString>
inline VariantData* CollectionData::get(TAdaptedString key) const {
  VariantSlot* slot = getSlot(key);
   d4586:	4629      	mov	r1, r5
   d4588:	6820      	ldr	r0, [r4, #0]
   d458a:	f7ff fe32 	bl	d41f2 <_ZNK19ArduinoJson6101_00014CollectionData7getSlotINS_21ConstRamStringAdapterEEEPNS_11VariantSlotET_.isra.26>
  return slot ? slot->data() : 0;
   d458e:	b920      	cbnz	r0, d459a <_ZN19ArduinoJson6101_00011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE+0x3c>
    VariantData *var = _content.asCollection.get(key);
    if (var) return var;
    return _content.asCollection.add(key, pool);
   d4590:	4632      	mov	r2, r6
   d4592:	4629      	mov	r1, r5
   d4594:	4620      	mov	r0, r4
   d4596:	f7ff feb6 	bl	d4306 <_ZN19ArduinoJson6101_00014CollectionData3addINS_21ConstRamStringAdapterEEEPNS_11VariantDataET_PNS_10MemoryPoolE>
  }
   d459a:	bd70      	pop	{r4, r5, r6, pc}

000d459c <_ZNK19ArduinoJson6101_00011VariantData9getMemberINS_21ConstRamStringAdapterEEEPS0_T_>:
  VariantData *getElement(size_t index) const {
    return isArray() ? _content.asCollection.get(index) : 0;
  }

  template <typename TAdaptedString>
  VariantData *getMember(TAdaptedString key) const {
   d459c:	b508      	push	{r3, lr}
    return isObject() ? _content.asCollection.get(key) : 0;
   d459e:	7a02      	ldrb	r2, [r0, #8]
   d45a0:	f002 0220 	and.w	r2, r2, #32
   d45a4:	f002 03ff 	and.w	r3, r2, #255	; 0xff
   d45a8:	b11a      	cbz	r2, d45b2 <_ZNK19ArduinoJson6101_00011VariantData9getMemberINS_21ConstRamStringAdapterEEEPS0_T_+0x16>
  return 0;
}

template <typename TAdaptedString>
inline VariantData* CollectionData::get(TAdaptedString key) const {
  VariantSlot* slot = getSlot(key);
   d45aa:	6800      	ldr	r0, [r0, #0]
   d45ac:	f7ff fe21 	bl	d41f2 <_ZNK19ArduinoJson6101_00014CollectionData7getSlotINS_21ConstRamStringAdapterEEEPNS_11VariantSlotET_.isra.26>
   d45b0:	bd08      	pop	{r3, pc}
   d45b2:	4618      	mov	r0, r3
  }
   d45b4:	bd08      	pop	{r3, pc}

000d45b6 <_ZNK19ArduinoJson6101_00010VariantRef3setINS_11MemberProxyIRNS_12JsonDocumentEPKcEEEENS_9enable_ifIXsrNS_11IsVisitableIT_EE5valueEbE4typeERKSA_>:
      return 0;
  }
}

template <typename TVariant>
typename enable_if<IsVisitable<TVariant>::value, bool>::type VariantRef::set(
   d45b6:	b510      	push	{r4, lr}
   d45b8:	4604      	mov	r4, r0
  // JsonVariant getMember(char*)
  // JsonVariant getMember(const char*)
  // JsonVariant getMember(const __FlashStringHelper*)
  template <typename TChar>
  FORCE_INLINE VariantRef getMember(TChar* key) {
    return VariantRef(&_pool, _data.getMember(adaptString(key)));
   d45ba:	c903      	ldmia	r1, {r0, r1}
   d45bc:	3010      	adds	r0, #16
   d45be:	f7ff ffed 	bl	d459c <_ZNK19ArduinoJson6101_00011VariantData9getMemberINS_21ConstRamStringAdapterEEEPS0_T_>
    const TVariant &value) const {
  VariantConstRef v = value;
  return variantCopyFrom(_data, v._data, _pool);
   d45c2:	6862      	ldr	r2, [r4, #4]
   d45c4:	4601      	mov	r1, r0
   d45c6:	6820      	ldr	r0, [r4, #0]
   d45c8:	f7ff ff40 	bl	d444c <_ZN19ArduinoJson6101_00015variantCopyFromEPNS_11VariantDataEPKS0_PNS_10MemoryPoolE>
}
   d45cc:	bd10      	pop	{r4, pc}

000d45ce <_ZN19ArduinoJson6101_000eqIKcEENS_9enable_ifIXsrNS_8IsStringIPT_EE5valueEbE4typeENS_11MemberProxyIRNS_12JsonDocumentEPS1_EES5_>:
    return adaptString(lhs).equals(rhs.template as<const char *>());
  }

  // TVariant == const char*
  template <typename T>
  friend typename enable_if<IsString<T *>::value, bool>::type operator==(
   d45ce:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d45d0:	e88d 0003 	stmia.w	sp, {r0, r1}
   d45d4:	3010      	adds	r0, #16
      TVariant lhs, T *rhs) {
    return adaptString(rhs).equals(lhs.template as<const char *>());
   d45d6:	9203      	str	r2, [sp, #12]
   d45d8:	f7ff ffe0 	bl	d459c <_ZNK19ArduinoJson6101_00011VariantData9getMemberINS_21ConstRamStringAdapterEEEPS0_T_>
template <typename T>
inline typename enable_if<is_same<T, const char*>::value ||
                              is_same<T, char*>::value,
                          const char*>::type
variantAs(const VariantData* _data) {
  return _data != 0 ? _data->asString() : 0;
   d45dc:	b138      	cbz	r0, d45ee <_ZN19ArduinoJson6101_000eqIKcEENS_9enable_ifIXsrNS_8IsStringIPT_EE5valueEbE4typeENS_11MemberProxyIRNS_12JsonDocumentEPS1_EES5_+0x20>
      return 0;
  }
}

inline const char *VariantData::asString() const {
  switch (type()) {
   d45de:	7a03      	ldrb	r3, [r0, #8]
   d45e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   d45e4:	3b03      	subs	r3, #3
   d45e6:	2b01      	cmp	r3, #1
   d45e8:	d803      	bhi.n	d45f2 <_ZN19ArduinoJson6101_000eqIKcEENS_9enable_ifIXsrNS_8IsStringIPT_EE5valueEbE4typeENS_11MemberProxyIRNS_12JsonDocumentEPS1_EES5_+0x24>
    case VALUE_IS_LINKED_STRING:
    case VALUE_IS_OWNED_STRING:
      return _content.asString;
   d45ea:	6801      	ldr	r1, [r0, #0]
   d45ec:	e002      	b.n	d45f4 <_ZN19ArduinoJson6101_000eqIKcEENS_9enable_ifIXsrNS_8IsStringIPT_EE5valueEbE4typeENS_11MemberProxyIRNS_12JsonDocumentEPS1_EES5_+0x26>
   d45ee:	4601      	mov	r1, r0
   d45f0:	e000      	b.n	d45f4 <_ZN19ArduinoJson6101_000eqIKcEENS_9enable_ifIXsrNS_8IsStringIPT_EE5valueEbE4typeENS_11MemberProxyIRNS_12JsonDocumentEPS1_EES5_+0x26>
    default:
      return 0;
   d45f2:	2100      	movs	r1, #0
   d45f4:	a803      	add	r0, sp, #12
   d45f6:	f7ff fded 	bl	d41d4 <_ZNK19ArduinoJson6101_00021ConstRamStringAdapter6equalsEPKc>
  }
   d45fa:	b005      	add	sp, #20
   d45fc:	f85d fb04 	ldr.w	pc, [sp], #4

000d4600 <_ZNK19ArduinoJson6101_00010VariantRef3setINS_11MemberProxyIRKNS2_IRNS_12JsonDocumentEPKcEES6_EEEENS_9enable_ifIXsrNS_11IsVisitableIT_EE5valueEbE4typeERKSD_>:
  }
}

template <typename TVariant>
typename enable_if<IsVisitable<TVariant>::value, bool>::type VariantRef::set(
   d4600:	b538      	push	{r3, r4, r5, lr}
    return getOrAddUpstreamMember().getOrAddMember(key);
  }

 private:
  FORCE_INLINE VariantRef getUpstreamMember() const {
    return _object.getMember(_key);
   d4602:	e891 0028 	ldmia.w	r1, {r3, r5}
   d4606:	4604      	mov	r4, r0
   d4608:	e893 0003 	ldmia.w	r3, {r0, r1}
   d460c:	3010      	adds	r0, #16
   d460e:	f7ff ffc5 	bl	d459c <_ZNK19ArduinoJson6101_00011VariantData9getMemberINS_21ConstRamStringAdapterEEEPS0_T_>
  return VariantRef(_pool, _data != 0 ? _data->getElement(index) : 0);
}

template <typename TChar>
inline VariantRef VariantRef::getMember(TChar *key) const {
  return VariantRef(_pool, _data != 0 ? _data->getMember(adaptString(key)) : 0);
   d4612:	4601      	mov	r1, r0
   d4614:	b118      	cbz	r0, d461e <_ZNK19ArduinoJson6101_00010VariantRef3setINS_11MemberProxyIRKNS2_IRNS_12JsonDocumentEPKcEES6_EEEENS_9enable_ifIXsrNS_11IsVisitableIT_EE5valueEbE4typeERKSD_+0x1e>
   d4616:	4629      	mov	r1, r5
   d4618:	f7ff ffc0 	bl	d459c <_ZNK19ArduinoJson6101_00011VariantData9getMemberINS_21ConstRamStringAdapterEEEPS0_T_>
   d461c:	4601      	mov	r1, r0

template <typename TVariant>
typename enable_if<IsVisitable<TVariant>::value, bool>::type VariantRef::set(
    const TVariant &value) const {
  VariantConstRef v = value;
  return variantCopyFrom(_data, v._data, _pool);
   d461e:	e894 0005 	ldmia.w	r4, {r0, r2}
   d4622:	f7ff ff13 	bl	d444c <_ZN19ArduinoJson6101_00015variantCopyFromEPNS_11VariantDataEPKS0_PNS_10MemoryPoolE>
}
   d4626:	bd38      	pop	{r3, r4, r5, pc}

000d4628 <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc>:
    if (err) return err;
    variant.setOwnedString(make_not_null(value));
    return DeserializationError::Ok;
  }

  DeserializationError parseQuotedString(const char *&result) {
   d4628:	b5f0      	push	{r4, r5, r6, r7, lr}
   d462a:	b085      	sub	sp, #20
  typedef ARDUINOJSON_NAMESPACE::StringBuilder StringBuilder;

  StringCopier(MemoryPool* pool) : _pool(pool) {}

  StringBuilder startString() {
    return StringBuilder(_pool);
   d462c:	68c2      	ldr	r2, [r0, #12]

namespace ARDUINOJSON_NAMESPACE {

class StringBuilder {
 public:
  explicit StringBuilder(MemoryPool* parent) : _parent(parent), _size(0) {
   d462e:	9200      	str	r2, [sp, #0]
   d4630:	2500      	movs	r5, #0
   d4632:	9501      	str	r5, [sp, #4]
  }

  StringSlot allocExpandableString() {
    StringSlot s;
    s.value = _left;
    s.size = size_t(_right - _left);
   d4634:	6893      	ldr	r3, [r2, #8]
   d4636:	460e      	mov	r6, r1
    return s;
  }

  StringSlot allocExpandableString() {
    StringSlot s;
    s.value = _left;
   d4638:	6851      	ldr	r1, [r2, #4]
    s.size = size_t(_right - _left);
    _left = _right;
   d463a:	6053      	str	r3, [r2, #4]
    _slot = _parent->allocExpandableString();
   d463c:	1a5b      	subs	r3, r3, r1
   d463e:	4604      	mov	r4, r0
   d4640:	9102      	str	r1, [sp, #8]
   d4642:	9303      	str	r3, [sp, #12]
    StringBuilder builder = _stringStorage.startString();
    const char stopChar = current();
   d4644:	f7ff ff3b 	bl	d44be <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE7currentEv>
    }
    return _current;
  }

  void move() {
    _loaded = false;
   d4648:	74a5      	strb	r5, [r4, #18]
    return DeserializationError::Ok;
  }

  DeserializationError parseQuotedString(const char *&result) {
    StringBuilder builder = _stringStorage.startString();
    const char stopChar = current();
   d464a:	4607      	mov	r7, r0

    move();
    for (;;) {
      char c = current();
   d464c:	4620      	mov	r0, r4
   d464e:	f7ff ff36 	bl	d44be <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE7currentEv>
      move();
      if (c == stopChar) break;
   d4652:	4287      	cmp	r7, r0
    }
    return _current;
  }

  void move() {
    _loaded = false;
   d4654:	74a5      	strb	r5, [r4, #18]

    move();
    for (;;) {
      char c = current();
      move();
      if (c == stopChar) break;
   d4656:	d023      	beq.n	d46a0 <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x78>

      if (c == '\0') return DeserializationError::IncompleteInput;
   d4658:	b910      	cbnz	r0, d4660 <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x38>
   d465a:	f04f 0001 	mov.w	r0, #1
   d465e:	e029      	b.n	d46b4 <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x8c>

      if (c == '\\') {
   d4660:	285c      	cmp	r0, #92	; 0x5c
   d4662:	d118      	bne.n	d4696 <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x6e>
        c = current();
   d4664:	4620      	mov	r0, r4
   d4666:	f7ff ff2a 	bl	d44be <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE7currentEv>
        if (c == '\0') return DeserializationError::IncompleteInput;
   d466a:	2800      	cmp	r0, #0
   d466c:	d0f5      	beq.n	d465a <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x32>
        if (c == 'u') {
   d466e:	2875      	cmp	r0, #117	; 0x75
   d4670:	d001      	beq.n	d4676 <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x4e>
   d4672:	4b11      	ldr	r3, [pc, #68]	; (d46b8 <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x90>)
   d4674:	e005      	b.n	d4682 <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x5a>
          DeserializationError err = parseCodepoint(codepoint);
          if (err) return err;
          Utf8::encodeCodepoint(codepoint, builder);
          continue;
#else
          return DeserializationError::NotSupported;
   d4676:	f04f 0004 	mov.w	r0, #4
   d467a:	e01b      	b.n	d46b4 <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x8c>
  // Optimized for code size on a 8-bit AVR
  static char unescapeChar(char c) {
    const char *p = escapeTable(true);
    for (;;) {
      if (p[0] == '\0') return c;
      if (p[0] == c) return p[1];
   d467c:	4290      	cmp	r0, r2
   d467e:	d004      	beq.n	d468a <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x62>
      p += 2;
   d4680:	3302      	adds	r3, #2

  // Optimized for code size on a 8-bit AVR
  static char unescapeChar(char c) {
    const char *p = escapeTable(true);
    for (;;) {
      if (p[0] == '\0') return c;
   d4682:	781a      	ldrb	r2, [r3, #0]
   d4684:	2a00      	cmp	r2, #0
   d4686:	d1f9      	bne.n	d467c <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x54>
   d4688:	e004      	b.n	d4694 <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x6c>
      if (p[0] == c) return p[1];
   d468a:	7858      	ldrb	r0, [r3, #1]
#endif
        }
        // replace char
        c = EscapeSequence::unescapeChar(c);
        if (c == '\0') return DeserializationError::InvalidInput;
   d468c:	b910      	cbnz	r0, d4694 <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x6c>
   d468e:	f04f 0002 	mov.w	r0, #2
   d4692:	e00f      	b.n	d46b4 <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x8c>
    }
    return _current;
  }

  void move() {
    _loaded = false;
   d4694:	74a5      	strb	r5, [r4, #18]
        c = EscapeSequence::unescapeChar(c);
        if (c == '\0') return DeserializationError::InvalidInput;
        move();
      }

      builder.append(c);
   d4696:	4601      	mov	r1, r0
   d4698:	4668      	mov	r0, sp
   d469a:	f7ff fe07 	bl	d42ac <_ZN19ArduinoJson6101_00013StringBuilder6appendEc>
  DeserializationError parseQuotedString(const char *&result) {
    StringBuilder builder = _stringStorage.startString();
    const char stopChar = current();

    move();
    for (;;) {
   d469e:	e7d5      	b.n	d464c <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x24>
      }

      builder.append(c);
    }

    result = builder.complete();
   d46a0:	4668      	mov	r0, sp
   d46a2:	f7ff fe11 	bl	d42c8 <_ZN19ArduinoJson6101_00013StringBuilder8completeEv>
   d46a6:	6030      	str	r0, [r6, #0]
    if (!result) return DeserializationError::NoMemory;
   d46a8:	b910      	cbnz	r0, d46b0 <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x88>
   d46aa:	f04f 0003 	mov.w	r0, #3
   d46ae:	e001      	b.n	d46b4 <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x8c>
    return DeserializationError::Ok;
   d46b0:	f04f 0000 	mov.w	r0, #0
  }
   d46b4:	b005      	add	sp, #20
   d46b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d46b8:	000d7ec4 	.word	0x000d7ec4

000d46bc <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc>:
    }
    return DeserializationError::Ok;
  }

  static inline bool isBetween(char c, char min, char max) {
    return min <= c && c <= max;
   d46bc:	f1a0 035f 	sub.w	r3, r0, #95	; 0x5f
   d46c0:	2b1b      	cmp	r3, #27
   d46c2:	d913      	bls.n	d46ec <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x30>
   d46c4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d46c8:	2b19      	cmp	r3, #25
   d46ca:	d90f      	bls.n	d46ec <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x30>
  }

  static inline bool canBeInNonQuotedString(char c) {
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
   d46cc:	f1a0 032b 	sub.w	r3, r0, #43	; 0x2b
   d46d0:	b2db      	uxtb	r3, r3
   d46d2:	2b0e      	cmp	r3, #14
   d46d4:	d904      	bls.n	d46e0 <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x24>
   d46d6:	f1a0 022e 	sub.w	r2, r0, #46	; 0x2e
   d46da:	4250      	negs	r0, r2
   d46dc:	4150      	adcs	r0, r2
   d46de:	4770      	bx	lr
   d46e0:	f647 72e5 	movw	r2, #32741	; 0x7fe5
   d46e4:	fa22 f303 	lsr.w	r3, r2, r3
   d46e8:	07db      	lsls	r3, r3, #31
   d46ea:	d5f4      	bpl.n	d46d6 <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x1a>
   d46ec:	2001      	movs	r0, #1
  }
   d46ee:	4770      	bx	lr

000d46f0 <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE8parseKeyERPKc>:
    } else {
      return parseNumericValue(variant);
    }
  }

  DeserializationError parseKey(const char *&key) {
   d46f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d46f2:	b085      	sub	sp, #20
   d46f4:	4604      	mov	r4, r0
   d46f6:	460e      	mov	r6, r1
    if (isQuote(current())) {
   d46f8:	f7ff fee1 	bl	d44be <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE7currentEv>
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
  }

  static inline bool isQuote(char c) {
    return c == '\'' || c == '\"';
   d46fc:	2827      	cmp	r0, #39	; 0x27
   d46fe:	d02d      	beq.n	d475c <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE8parseKeyERPKc+0x6c>
   d4700:	2822      	cmp	r0, #34	; 0x22
   d4702:	d02b      	beq.n	d475c <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE8parseKeyERPKc+0x6c>
   d4704:	68e2      	ldr	r2, [r4, #12]

namespace ARDUINOJSON_NAMESPACE {

class StringBuilder {
 public:
  explicit StringBuilder(MemoryPool* parent) : _parent(parent), _size(0) {
   d4706:	9200      	str	r2, [sp, #0]
   d4708:	2500      	movs	r5, #0
   d470a:	9501      	str	r5, [sp, #4]
    return s;
  }

  StringSlot allocExpandableString() {
    StringSlot s;
    s.value = _left;
   d470c:	6851      	ldr	r1, [r2, #4]
    s.size = size_t(_right - _left);
   d470e:	6893      	ldr	r3, [r2, #8]
    _left = _right;
   d4710:	6053      	str	r3, [r2, #4]
  }

  DeserializationError parseNonQuotedString(const char *&result) {
    StringBuilder builder = _stringStorage.startString();

    char c = current();
   d4712:	4620      	mov	r0, r4
    _slot = _parent->allocExpandableString();
   d4714:	1a5b      	subs	r3, r3, r1
   d4716:	9102      	str	r1, [sp, #8]
   d4718:	9303      	str	r3, [sp, #12]
   d471a:	f7ff fed0 	bl	d44be <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE7currentEv>
    if (c == '\0') return DeserializationError::IncompleteInput;
   d471e:	4607      	mov	r7, r0
   d4720:	b1d0      	cbz	r0, d4758 <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE8parseKeyERPKc+0x68>

    if (canBeInNonQuotedString(c)) {  // no quotes
   d4722:	f7ff ffcb 	bl	d46bc <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc>
   d4726:	b1a8      	cbz	r0, d4754 <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE8parseKeyERPKc+0x64>
      do {
        move();
        builder.append(c);
   d4728:	4639      	mov	r1, r7
   d472a:	4668      	mov	r0, sp
    }
    return _current;
  }

  void move() {
    _loaded = false;
   d472c:	74a5      	strb	r5, [r4, #18]
    if (c == '\0') return DeserializationError::IncompleteInput;

    if (canBeInNonQuotedString(c)) {  // no quotes
      do {
        move();
        builder.append(c);
   d472e:	f7ff fdbd 	bl	d42ac <_ZN19ArduinoJson6101_00013StringBuilder6appendEc>
        c = current();
   d4732:	4620      	mov	r0, r4
   d4734:	f7ff fec3 	bl	d44be <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE7currentEv>
   d4738:	4607      	mov	r7, r0

    char c = current();
    if (c == '\0') return DeserializationError::IncompleteInput;

    if (canBeInNonQuotedString(c)) {  // no quotes
      do {
   d473a:	f7ff ffbf 	bl	d46bc <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc>
   d473e:	2800      	cmp	r0, #0
   d4740:	d1f2      	bne.n	d4728 <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE8parseKeyERPKc+0x38>
      } while (canBeInNonQuotedString(c));
    } else {
      return DeserializationError::InvalidInput;
    }

    result = builder.complete();
   d4742:	4668      	mov	r0, sp
   d4744:	f7ff fdc0 	bl	d42c8 <_ZN19ArduinoJson6101_00013StringBuilder8completeEv>
    if (!result) return DeserializationError::NoMemory;
    return DeserializationError::Ok;
   d4748:	2800      	cmp	r0, #0
      } while (canBeInNonQuotedString(c));
    } else {
      return DeserializationError::InvalidInput;
    }

    result = builder.complete();
   d474a:	6030      	str	r0, [r6, #0]
    if (!result) return DeserializationError::NoMemory;
    return DeserializationError::Ok;
   d474c:	bf0c      	ite	eq
   d474e:	2003      	moveq	r0, #3
   d4750:	2000      	movne	r0, #0
   d4752:	e007      	b.n	d4764 <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE8parseKeyERPKc+0x74>
        move();
        builder.append(c);
        c = current();
      } while (canBeInNonQuotedString(c));
    } else {
      return DeserializationError::InvalidInput;
   d4754:	2002      	movs	r0, #2
   d4756:	e005      	b.n	d4764 <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE8parseKeyERPKc+0x74>

  DeserializationError parseNonQuotedString(const char *&result) {
    StringBuilder builder = _stringStorage.startString();

    char c = current();
    if (c == '\0') return DeserializationError::IncompleteInput;
   d4758:	2001      	movs	r0, #1
   d475a:	e003      	b.n	d4764 <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE8parseKeyERPKc+0x74>
    }
  }

  DeserializationError parseKey(const char *&key) {
    if (isQuote(current())) {
      return parseQuotedString(key);
   d475c:	4631      	mov	r1, r6
   d475e:	4620      	mov	r0, r4
   d4760:	f7ff ff62 	bl	d4628 <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc>
    } else {
      return parseNonQuotedString(key);
    }
  }
   d4764:	b005      	add	sp, #20
   d4766:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4768 <_ZN19ArduinoJson6101_00011FloatTraitsIfLj4EE10make_floatIiEEffT_>:
  typedef int8_t exponent_type;
  static const exponent_type exponent_max = 38;

  template <typename TExponent>
  static T make_float(T m, TExponent e) {
    if (e > 0) {
   d4768:	2800      	cmp	r0, #0
   d476a:	dd0f      	ble.n	d478c <_ZN19ArduinoJson6101_00011FloatTraitsIfLj4EE10make_floatIiEEffT_+0x24>
    return m;
  }

  static T positiveBinaryPowerOfTen(int index) {
    static T factors[] = {1e1f, 1e2f, 1e4f, 1e8f, 1e16f, 1e32f};
    return factors[index];
   d476c:	4911      	ldr	r1, [pc, #68]	; (d47b4 <_ZN19ArduinoJson6101_00011FloatTraitsIfLj4EE10make_floatIiEEffT_+0x4c>)
   d476e:	2300      	movs	r3, #0

  template <typename TExponent>
  static T make_float(T m, TExponent e) {
    if (e > 0) {
      for (uint8_t index = 0; e != 0; index++) {
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
   d4770:	07c2      	lsls	r2, r0, #31
    return m;
  }

  static T positiveBinaryPowerOfTen(int index) {
    static T factors[] = {1e1f, 1e2f, 1e4f, 1e8f, 1e16f, 1e32f};
    return factors[index];
   d4772:	bf41      	itttt	mi
   d4774:	b2da      	uxtbmi	r2, r3
   d4776:	eb01 0282 	addmi.w	r2, r1, r2, lsl #2

  template <typename TExponent>
  static T make_float(T m, TExponent e) {
    if (e > 0) {
      for (uint8_t index = 0; e != 0; index++) {
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
   d477a:	edd2 7a00 	vldrmi	s15, [r2]
   d477e:	ee20 0a27 	vmulmi.f32	s0, s0, s15
  static const exponent_type exponent_max = 38;

  template <typename TExponent>
  static T make_float(T m, TExponent e) {
    if (e > 0) {
      for (uint8_t index = 0; e != 0; index++) {
   d4782:	1040      	asrs	r0, r0, #1
   d4784:	f103 0301 	add.w	r3, r3, #1
   d4788:	d1f2      	bne.n	d4770 <_ZN19ArduinoJson6101_00011FloatTraitsIfLj4EE10make_floatIiEEffT_+0x8>
   d478a:	4770      	bx	lr
    return factors[index];
  }

  static T negativeBinaryPowerOfTen(int index) {
    static T factors[] = {1e-1f, 1e-2f, 1e-4f, 1e-8f, 1e-16f, 1e-32f};
    return factors[index];
   d478c:	490a      	ldr	r1, [pc, #40]	; (d47b8 <_ZN19ArduinoJson6101_00011FloatTraitsIfLj4EE10make_floatIiEEffT_+0x50>)
      for (uint8_t index = 0; e != 0; index++) {
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
        e >>= 1;
      }
    } else {
      e = -e;
   d478e:	4240      	negs	r0, r0
   d4790:	2300      	movs	r3, #0
      for (uint8_t index = 0; e != 0; index++) {
   d4792:	b168      	cbz	r0, d47b0 <_ZN19ArduinoJson6101_00011FloatTraitsIfLj4EE10make_floatIiEEffT_+0x48>
        if (e & 1) m *= negativeBinaryPowerOfTen(index);
   d4794:	07c2      	lsls	r2, r0, #31
    return factors[index];
  }

  static T negativeBinaryPowerOfTen(int index) {
    static T factors[] = {1e-1f, 1e-2f, 1e-4f, 1e-8f, 1e-16f, 1e-32f};
    return factors[index];
   d4796:	bf42      	ittt	mi
   d4798:	b2da      	uxtbmi	r2, r3
   d479a:	eb01 0282 	addmi.w	r2, r1, r2, lsl #2
        e >>= 1;
      }
    } else {
      e = -e;
      for (uint8_t index = 0; e != 0; index++) {
        if (e & 1) m *= negativeBinaryPowerOfTen(index);
   d479e:	edd2 7a00 	vldrmi	s15, [r2]
        e >>= 1;
   d47a2:	ea4f 0060 	mov.w	r0, r0, asr #1
        e >>= 1;
      }
    } else {
      e = -e;
      for (uint8_t index = 0; e != 0; index++) {
        if (e & 1) m *= negativeBinaryPowerOfTen(index);
   d47a6:	bf48      	it	mi
   d47a8:	ee20 0a27 	vmulmi.f32	s0, s0, s15
   d47ac:	3301      	adds	r3, #1
   d47ae:	e7f0      	b.n	d4792 <_ZN19ArduinoJson6101_00011FloatTraitsIfLj4EE10make_floatIiEEffT_+0x2a>
        e >>= 1;
      }
    }
    return m;
  }
   d47b0:	4770      	bx	lr
   d47b2:	bf00      	nop
   d47b4:	2003e388 	.word	0x2003e388
   d47b8:	2003e370 	.word	0x2003e370

000d47bc <_ZN19ArduinoJson6101_00011parseNumberIfmEENS_12ParsedNumberIT_T0_EEPKc>:

template <typename A, typename B>
struct choose_largest : conditional<(sizeof(A) > sizeof(B)), A, B> {};

template <typename TFloat, typename TUInt>
inline ParsedNumber<TFloat, TUInt> parseNumber(const char *s) {
   d47bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  typedef ParsedNumber<TFloat, TUInt> return_type;

  ARDUINOJSON_ASSERT(s != 0);

  bool is_negative = false;
  switch (*s) {
   d47c0:	780b      	ldrb	r3, [r1, #0]
   d47c2:	2b2b      	cmp	r3, #43	; 0x2b

template <typename A, typename B>
struct choose_largest : conditional<(sizeof(A) > sizeof(B)), A, B> {};

template <typename TFloat, typename TUInt>
inline ParsedNumber<TFloat, TUInt> parseNumber(const char *s) {
   d47c4:	4604      	mov	r4, r0
  typedef ParsedNumber<TFloat, TUInt> return_type;

  ARDUINOJSON_ASSERT(s != 0);

  bool is_negative = false;
  switch (*s) {
   d47c6:	d004      	beq.n	d47d2 <_ZN19ArduinoJson6101_00011parseNumberIfmEENS_12ParsedNumberIT_T0_EEPKc+0x16>
   d47c8:	2b2d      	cmp	r3, #45	; 0x2d
   d47ca:	d103      	bne.n	d47d4 <_ZN19ArduinoJson6101_00011parseNumberIfmEENS_12ParsedNumberIT_T0_EEPKc+0x18>
    case '-':
      is_negative = true;
      s++;
   d47cc:	3101      	adds	r1, #1
  ARDUINOJSON_ASSERT(s != 0);

  bool is_negative = false;
  switch (*s) {
    case '-':
      is_negative = true;
   d47ce:	2601      	movs	r6, #1
      s++;
      break;
   d47d0:	e001      	b.n	d47d6 <_ZN19ArduinoJson6101_00011parseNumberIfmEENS_12ParsedNumberIT_T0_EEPKc+0x1a>
    case '+':
      s++;
   d47d2:	3101      	adds	r1, #1
  typedef typename traits::exponent_type exponent_t;
  typedef ParsedNumber<TFloat, TUInt> return_type;

  ARDUINOJSON_ASSERT(s != 0);

  bool is_negative = false;
   d47d4:	2600      	movs	r6, #0
    case '+':
      s++;
      break;
  }

  if (*s == 'n' || *s == 'N') return traits::nan();
   d47d6:	780b      	ldrb	r3, [r1, #0]
   d47d8:	f003 02df 	and.w	r2, r3, #223	; 0xdf
   d47dc:	2a4e      	cmp	r2, #78	; 0x4e
   d47de:	d102      	bne.n	d47e6 <_ZN19ArduinoJson6101_00011parseNumberIfmEENS_12ParsedNumberIT_T0_EEPKc+0x2a>
  ParsedNumber(TUInt value, bool is_negative)
      : uintValue(value),
        floatValue(TFloat(value)),
        _type(uint8_t(is_negative ? VALUE_IS_NEGATIVE_INTEGER
                                  : VALUE_IS_POSITIVE_INTEGER)) {}
  ParsedNumber(TFloat value) : floatValue(value), _type(VALUE_IS_FLOAT) {}
   d47e0:	4b55      	ldr	r3, [pc, #340]	; (d4938 <_ZN19ArduinoJson6101_00011parseNumberIfmEENS_12ParsedNumberIT_T0_EEPKc+0x17c>)
   d47e2:	6063      	str	r3, [r4, #4]
   d47e4:	e0a2      	b.n	d492c <_ZN19ArduinoJson6101_00011parseNumberIfmEENS_12ParsedNumberIT_T0_EEPKc+0x170>
      s++;
      break;
  }

  if (*s == 'n' || *s == 'N') return traits::nan();
  if (*s == 'i' || *s == 'I')
   d47e6:	2a49      	cmp	r2, #73	; 0x49
   d47e8:	d07e      	beq.n	d48e8 <_ZN19ArduinoJson6101_00011parseNumberIfmEENS_12ParsedNumberIT_T0_EEPKc+0x12c>
    return is_negative ? -traits::inf() : traits::inf();
  if (!isdigit(*s) && *s != '.') return return_type();
   d47ea:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   d47ee:	2a09      	cmp	r2, #9
   d47f0:	d902      	bls.n	d47f8 <_ZN19ArduinoJson6101_00011parseNumberIfmEENS_12ParsedNumberIT_T0_EEPKc+0x3c>
   d47f2:	2b2e      	cmp	r3, #46	; 0x2e
   d47f4:	f040 8089 	bne.w	d490a <_ZN19ArduinoJson6101_00011parseNumberIfmEENS_12ParsedNumberIT_T0_EEPKc+0x14e>
  exponent_t exponent_offset = 0;
  const mantissa_t maxUint = TUInt(-1);

  while (isdigit(*s)) {
    uint8_t digit = uint8_t(*s - '0');
    if (mantissa > maxUint / 10) break;
   d47f8:	4f50      	ldr	r7, [pc, #320]	; (d493c <_ZN19ArduinoJson6101_00011parseNumberIfmEENS_12ParsedNumberIT_T0_EEPKc+0x180>)
      break;
  }

  if (*s == 'n' || *s == 'N') return traits::nan();
  if (*s == 'i' || *s == 'I')
    return is_negative ? -traits::inf() : traits::inf();
   d47fa:	2300      	movs	r3, #0
  const mantissa_t maxUint = TUInt(-1);

  while (isdigit(*s)) {
    uint8_t digit = uint8_t(*s - '0');
    if (mantissa > maxUint / 10) break;
    mantissa *= 10;
   d47fc:	f04f 0e0a 	mov.w	lr, #10

  mantissa_t mantissa = 0;
  exponent_t exponent_offset = 0;
  const mantissa_t maxUint = TUInt(-1);

  while (isdigit(*s)) {
   d4800:	4608      	mov	r0, r1
   d4802:	f810 5b01 	ldrb.w	r5, [r0], #1
#pragma once

namespace ARDUINOJSON_NAMESPACE {

inline bool isdigit(char c) {
  return '0' <= c && c <= '9';
   d4806:	f1a5 0230 	sub.w	r2, r5, #48	; 0x30
   d480a:	b2d2      	uxtb	r2, r2
   d480c:	2a09      	cmp	r2, #9
   d480e:	d809      	bhi.n	d4824 <_ZN19ArduinoJson6101_00011parseNumberIfmEENS_12ParsedNumberIT_T0_EEPKc+0x68>
    uint8_t digit = uint8_t(*s - '0');
    if (mantissa > maxUint / 10) break;
   d4810:	42bb      	cmp	r3, r7
   d4812:	d808      	bhi.n	d4826 <_ZN19ArduinoJson6101_00011parseNumberIfmEENS_12ParsedNumberIT_T0_EEPKc+0x6a>
    mantissa *= 10;
   d4814:	fb0e f303 	mul.w	r3, lr, r3
    if (mantissa > maxUint - digit) break;
   d4818:	43d5      	mvns	r5, r2
   d481a:	42ab      	cmp	r3, r5
   d481c:	d803      	bhi.n	d4826 <_ZN19ArduinoJson6101_00011parseNumberIfmEENS_12ParsedNumberIT_T0_EEPKc+0x6a>
    mantissa += digit;
   d481e:	4413      	add	r3, r2

  mantissa_t mantissa = 0;
  exponent_t exponent_offset = 0;
  const mantissa_t maxUint = TUInt(-1);

  while (isdigit(*s)) {
   d4820:	4601      	mov	r1, r0
   d4822:	e7ed      	b.n	d4800 <_ZN19ArduinoJson6101_00011parseNumberIfmEENS_12ParsedNumberIT_T0_EEPKc+0x44>
    if (mantissa > maxUint - digit) break;
    mantissa += digit;
    s++;
  }

  if (*s == '\0') return return_type(TUInt(mantissa), is_negative);
   d4824:	b11d      	cbz	r5, d482e <_ZN19ArduinoJson6101_00011parseNumberIfmEENS_12ParsedNumberIT_T0_EEPKc+0x72>

  ParsedNumber(TUInt value, bool is_negative)
      : uintValue(value),
        floatValue(TFloat(value)),
        _type(uint8_t(is_negative ? VALUE_IS_NEGATIVE_INTEGER
                                  : VALUE_IS_POSITIVE_INTEGER)) {}
   d4826:	2200      	movs	r2, #0
  }

  if (*s == '\0') return return_type(TUInt(mantissa), is_negative);

  // avoid mantissa overflow
  while (mantissa > traits::mantissa_max) {
   d4828:	4f45      	ldr	r7, [pc, #276]	; (d4940 <_ZN19ArduinoJson6101_00011parseNumberIfmEENS_12ParsedNumberIT_T0_EEPKc+0x184>)
    mantissa /= 10;
   d482a:	250a      	movs	r5, #10
   d482c:	e00e      	b.n	d484c <_ZN19ArduinoJson6101_00011parseNumberIfmEENS_12ParsedNumberIT_T0_EEPKc+0x90>

  ParsedNumber(TUInt value, bool is_negative)
      : uintValue(value),
        floatValue(TFloat(value)),
        _type(uint8_t(is_negative ? VALUE_IS_NEGATIVE_INTEGER
                                  : VALUE_IS_POSITIVE_INTEGER)) {}
   d482e:	ee07 3a90 	vmov	s15, r3
   d4832:	eef8 7a67 	vcvt.f32.u32	s15, s15
   d4836:	2e00      	cmp	r6, #0
   d4838:	6023      	str	r3, [r4, #0]
   d483a:	edc4 7a01 	vstr	s15, [r4, #4]
   d483e:	bf0c      	ite	eq
   d4840:	2306      	moveq	r3, #6
   d4842:	2307      	movne	r3, #7
   d4844:	e073      	b.n	d492e <_ZN19ArduinoJson6101_00011parseNumberIfmEENS_12ParsedNumberIT_T0_EEPKc+0x172>
  }

  if (*s == '\0') return return_type(TUInt(mantissa), is_negative);

  // avoid mantissa overflow
  while (mantissa > traits::mantissa_max) {
   d4846:	4602      	mov	r2, r0
    mantissa /= 10;
   d4848:	fbb3 f3f5 	udiv	r3, r3, r5
  }

  if (*s == '\0') return return_type(TUInt(mantissa), is_negative);

  // avoid mantissa overflow
  while (mantissa > traits::mantissa_max) {
   d484c:	42bb      	cmp	r3, r7
   d484e:	f102 0001 	add.w	r0, r2, #1
   d4852:	d8f8      	bhi.n	d4846 <_ZN19ArduinoJson6101_00011parseNumberIfmEENS_12ParsedNumberIT_T0_EEPKc+0x8a>
   d4854:	1a52      	subs	r2, r2, r1
   d4856:	1850      	adds	r0, r2, r1
   d4858:	460d      	mov	r5, r1
    mantissa /= 10;
    exponent_offset++;
  }

  // remaing digits can't fit in the mantissa
  while (isdigit(*s)) {
   d485a:	f811 7b01 	ldrb.w	r7, [r1], #1
   d485e:	f1a7 0e30 	sub.w	lr, r7, #48	; 0x30
   d4862:	f1be 0f09 	cmp.w	lr, #9
   d4866:	b240      	sxtb	r0, r0
   d4868:	d9f5      	bls.n	d4856 <_ZN19ArduinoJson6101_00011parseNumberIfmEENS_12ParsedNumberIT_T0_EEPKc+0x9a>
    exponent_offset++;
    s++;
  }

  if (*s == '.') {
   d486a:	2f2e      	cmp	r7, #46	; 0x2e
   d486c:	d110      	bne.n	d4890 <_ZN19ArduinoJson6101_00011parseNumberIfmEENS_12ParsedNumberIT_T0_EEPKc+0xd4>
    s++;
    while (isdigit(*s)) {
      if (mantissa < traits::mantissa_max / 10) {
   d486e:	f8df e0e4 	ldr.w	lr, [pc, #228]	; d4954 <_ZN19ArduinoJson6101_00011parseNumberIfmEENS_12ParsedNumberIT_T0_EEPKc+0x198>
        mantissa = mantissa * 10 + uint8_t(*s - '0');
   d4872:	270a      	movs	r7, #10
   d4874:	460d      	mov	r5, r1
   d4876:	3101      	adds	r1, #1
   d4878:	782a      	ldrb	r2, [r5, #0]
   d487a:	3a30      	subs	r2, #48	; 0x30
   d487c:	b2d2      	uxtb	r2, r2
    s++;
  }

  if (*s == '.') {
    s++;
    while (isdigit(*s)) {
   d487e:	2a09      	cmp	r2, #9
   d4880:	d806      	bhi.n	d4890 <_ZN19ArduinoJson6101_00011parseNumberIfmEENS_12ParsedNumberIT_T0_EEPKc+0xd4>
      if (mantissa < traits::mantissa_max / 10) {
   d4882:	4573      	cmp	r3, lr
   d4884:	d8f6      	bhi.n	d4874 <_ZN19ArduinoJson6101_00011parseNumberIfmEENS_12ParsedNumberIT_T0_EEPKc+0xb8>
        mantissa = mantissa * 10 + uint8_t(*s - '0');
        exponent_offset--;
   d4886:	3801      	subs	r0, #1

  if (*s == '.') {
    s++;
    while (isdigit(*s)) {
      if (mantissa < traits::mantissa_max / 10) {
        mantissa = mantissa * 10 + uint8_t(*s - '0');
   d4888:	fb07 2303 	mla	r3, r7, r3, r2
        exponent_offset--;
   d488c:	b240      	sxtb	r0, r0
    s++;
  }

  if (*s == '.') {
    s++;
    while (isdigit(*s)) {
   d488e:	e7f1      	b.n	d4874 <_ZN19ArduinoJson6101_00011parseNumberIfmEENS_12ParsedNumberIT_T0_EEPKc+0xb8>
      s++;
    }
  }

  int exponent = 0;
  if (*s == 'e' || *s == 'E') {
   d4890:	782a      	ldrb	r2, [r5, #0]
   d4892:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   d4896:	2a45      	cmp	r2, #69	; 0x45
   d4898:	d134      	bne.n	d4904 <_ZN19ArduinoJson6101_00011parseNumberIfmEENS_12ParsedNumberIT_T0_EEPKc+0x148>
    s++;
    bool negative_exponent = false;
    if (*s == '-') {
   d489a:	786a      	ldrb	r2, [r5, #1]
   d489c:	2a2d      	cmp	r2, #45	; 0x2d
   d489e:	d102      	bne.n	d48a6 <_ZN19ArduinoJson6101_00011parseNumberIfmEENS_12ParsedNumberIT_T0_EEPKc+0xea>
      negative_exponent = true;
      s++;
   d48a0:	1ca9      	adds	r1, r5, #2
  int exponent = 0;
  if (*s == 'e' || *s == 'E') {
    s++;
    bool negative_exponent = false;
    if (*s == '-') {
      negative_exponent = true;
   d48a2:	2701      	movs	r7, #1
   d48a4:	e004      	b.n	d48b0 <_ZN19ArduinoJson6101_00011parseNumberIfmEENS_12ParsedNumberIT_T0_EEPKc+0xf4>
      s++;
    } else if (*s == '+') {
   d48a6:	2a2b      	cmp	r2, #43	; 0x2b
    }
  }

  int exponent = 0;
  if (*s == 'e' || *s == 'E') {
    s++;
   d48a8:	bf14      	ite	ne
   d48aa:	1c69      	addne	r1, r5, #1
    bool negative_exponent = false;
    if (*s == '-') {
      negative_exponent = true;
      s++;
    } else if (*s == '+') {
      s++;
   d48ac:	1ca9      	addeq	r1, r5, #2
  }

  int exponent = 0;
  if (*s == 'e' || *s == 'E') {
    s++;
    bool negative_exponent = false;
   d48ae:	2700      	movs	r7, #0
   d48b0:	2200      	movs	r2, #0
    } else if (*s == '+') {
      s++;
    }

    while (isdigit(*s)) {
      exponent = exponent * 10 + (*s - '0');
   d48b2:	f04f 0c0a 	mov.w	ip, #10
   d48b6:	460d      	mov	r5, r1
      s++;
    } else if (*s == '+') {
      s++;
    }

    while (isdigit(*s)) {
   d48b8:	f811 eb01 	ldrb.w	lr, [r1], #1
   d48bc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   d48c0:	fa5f f88e 	uxtb.w	r8, lr
   d48c4:	f1b8 0f09 	cmp.w	r8, #9
   d48c8:	d819      	bhi.n	d48fe <_ZN19ArduinoJson6101_00011parseNumberIfmEENS_12ParsedNumberIT_T0_EEPKc+0x142>
      exponent = exponent * 10 + (*s - '0');
   d48ca:	fb0c e202 	mla	r2, ip, r2, lr
      if (exponent + exponent_offset > traits::exponent_max) {
   d48ce:	1885      	adds	r5, r0, r2
   d48d0:	2d26      	cmp	r5, #38	; 0x26
   d48d2:	ddf0      	ble.n	d48b6 <_ZN19ArduinoJson6101_00011parseNumberIfmEENS_12ParsedNumberIT_T0_EEPKc+0xfa>
        if (negative_exponent)
   d48d4:	b147      	cbz	r7, d48e8 <_ZN19ArduinoJson6101_00011parseNumberIfmEENS_12ParsedNumberIT_T0_EEPKc+0x12c>
          return is_negative ? -0.0f : 0.0f;
   d48d6:	ed9f 7a1b 	vldr	s14, [pc, #108]	; d4944 <_ZN19ArduinoJson6101_00011parseNumberIfmEENS_12ParsedNumberIT_T0_EEPKc+0x188>
   d48da:	eddf 7a1b 	vldr	s15, [pc, #108]	; d4948 <_ZN19ArduinoJson6101_00011parseNumberIfmEENS_12ParsedNumberIT_T0_EEPKc+0x18c>
   d48de:	2e00      	cmp	r6, #0
   d48e0:	bf18      	it	ne
   d48e2:	eef0 7a47 	vmovne.f32	s15, s14
   d48e6:	e007      	b.n	d48f8 <_ZN19ArduinoJson6101_00011parseNumberIfmEENS_12ParsedNumberIT_T0_EEPKc+0x13c>
        else
          return is_negative ? -traits::inf() : traits::inf();
   d48e8:	ed9f 7a18 	vldr	s14, [pc, #96]	; d494c <_ZN19ArduinoJson6101_00011parseNumberIfmEENS_12ParsedNumberIT_T0_EEPKc+0x190>
   d48ec:	eddf 7a18 	vldr	s15, [pc, #96]	; d4950 <_ZN19ArduinoJson6101_00011parseNumberIfmEENS_12ParsedNumberIT_T0_EEPKc+0x194>
   d48f0:	2e00      	cmp	r6, #0
   d48f2:	bf08      	it	eq
   d48f4:	eef0 7a47 	vmoveq.f32	s15, s14
  ParsedNumber(TUInt value, bool is_negative)
      : uintValue(value),
        floatValue(TFloat(value)),
        _type(uint8_t(is_negative ? VALUE_IS_NEGATIVE_INTEGER
                                  : VALUE_IS_POSITIVE_INTEGER)) {}
  ParsedNumber(TFloat value) : floatValue(value), _type(VALUE_IS_FLOAT) {}
   d48f8:	edc4 7a01 	vstr	s15, [r4, #4]
   d48fc:	e016      	b.n	d492c <_ZN19ArduinoJson6101_00011parseNumberIfmEENS_12ParsedNumberIT_T0_EEPKc+0x170>
        else
          return is_negative ? -traits::inf() : traits::inf();
      }
      s++;
    }
    if (negative_exponent) exponent = -exponent;
   d48fe:	b117      	cbz	r7, d4906 <_ZN19ArduinoJson6101_00011parseNumberIfmEENS_12ParsedNumberIT_T0_EEPKc+0x14a>
   d4900:	4252      	negs	r2, r2
   d4902:	e000      	b.n	d4906 <_ZN19ArduinoJson6101_00011parseNumberIfmEENS_12ParsedNumberIT_T0_EEPKc+0x14a>
      }
      s++;
    }
  }

  int exponent = 0;
   d4904:	2200      	movs	r2, #0
    if (negative_exponent) exponent = -exponent;
  }
  exponent += exponent_offset;

  // we should be at the end of the string, otherwise it's an error
  if (*s != '\0') return return_type();
   d4906:	7829      	ldrb	r1, [r5, #0]
   d4908:	b121      	cbz	r1, d4914 <_ZN19ArduinoJson6101_00011parseNumberIfmEENS_12ParsedNumberIT_T0_EEPKc+0x158>

namespace ARDUINOJSON_NAMESPACE {

template <typename TFloat, typename TUInt>
struct ParsedNumber {
  ParsedNumber() : uintValue(0), floatValue(0), _type(VALUE_IS_NULL) {}
   d490a:	2300      	movs	r3, #0
   d490c:	2200      	movs	r2, #0
   d490e:	6023      	str	r3, [r4, #0]
   d4910:	6062      	str	r2, [r4, #4]
   d4912:	e00c      	b.n	d492e <_ZN19ArduinoJson6101_00011parseNumberIfmEENS_12ParsedNumberIT_T0_EEPKc+0x172>
  exponent += exponent_offset;

  // we should be at the end of the string, otherwise it's an error
  if (*s != '\0') return return_type();

  TFloat result = traits::make_float(static_cast<TFloat>(mantissa), exponent);
   d4914:	ee07 3a90 	vmov	s15, r3
   d4918:	4410      	add	r0, r2
   d491a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
   d491e:	f7ff ff23 	bl	d4768 <_ZN19ArduinoJson6101_00011FloatTraitsIfLj4EE10make_floatIiEEffT_>

  return is_negative ? -result : result;
   d4922:	b10e      	cbz	r6, d4928 <_ZN19ArduinoJson6101_00011parseNumberIfmEENS_12ParsedNumberIT_T0_EEPKc+0x16c>
   d4924:	eeb1 0a40 	vneg.f32	s0, s0
  ParsedNumber(TUInt value, bool is_negative)
      : uintValue(value),
        floatValue(TFloat(value)),
        _type(uint8_t(is_negative ? VALUE_IS_NEGATIVE_INTEGER
                                  : VALUE_IS_POSITIVE_INTEGER)) {}
  ParsedNumber(TFloat value) : floatValue(value), _type(VALUE_IS_FLOAT) {}
   d4928:	ed84 0a01 	vstr	s0, [r4, #4]
   d492c:	2308      	movs	r3, #8
   d492e:	7223      	strb	r3, [r4, #8]
  if (*s != '\0') return return_type();

  TFloat result = traits::make_float(static_cast<TFloat>(mantissa), exponent);

  return is_negative ? -result : result;
}
   d4930:	4620      	mov	r0, r4
   d4932:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4936:	bf00      	nop
   d4938:	7fc00000 	.word	0x7fc00000
   d493c:	19999999 	.word	0x19999999
   d4940:	007fffff 	.word	0x007fffff
   d4944:	80000000 	.word	0x80000000
   d4948:	00000000 	.word	0x00000000
   d494c:	7f800000 	.word	0x7f800000
   d4950:	ff800000 	.word	0xff800000
   d4954:	000ccccb 	.word	0x000ccccb

000d4958 <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE>:
    result = builder.complete();
    if (!result) return DeserializationError::NoMemory;
    return DeserializationError::Ok;
  }

  DeserializationError parseNumericValue(VariantData &result) {
   d4958:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d495c:	b095      	sub	sp, #84	; 0x54
   d495e:	4680      	mov	r8, r0
   d4960:	460d      	mov	r5, r1
    char buffer[64];
    uint8_t n = 0;

    char c = current();
   d4962:	f7ff fdac 	bl	d44be <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE7currentEv>
   d4966:	2400      	movs	r4, #0
   d4968:	4607      	mov	r7, r0
    }
    return _current;
  }

  void move() {
    _loaded = false;
   d496a:	46a1      	mov	r9, r4
  DeserializationError parseNumericValue(VariantData &result) {
    char buffer[64];
    uint8_t n = 0;

    char c = current();
    while (canBeInNonQuotedString(c) && n < 63) {
   d496c:	4638      	mov	r0, r7
   d496e:	b2e6      	uxtb	r6, r4
   d4970:	f7ff fea4 	bl	d46bc <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc>
   d4974:	b158      	cbz	r0, d498e <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x36>
   d4976:	2c3f      	cmp	r4, #63	; 0x3f
   d4978:	d009      	beq.n	d498e <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x36>
      move();
      buffer[n++] = c;
   d497a:	ab04      	add	r3, sp, #16
    }
    return _current;
  }

  void move() {
    _loaded = false;
   d497c:	f888 9012 	strb.w	r9, [r8, #18]
    uint8_t n = 0;

    char c = current();
    while (canBeInNonQuotedString(c) && n < 63) {
      move();
      buffer[n++] = c;
   d4980:	54e7      	strb	r7, [r4, r3]
      c = current();
   d4982:	4640      	mov	r0, r8
   d4984:	f7ff fd9b 	bl	d44be <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE7currentEv>
   d4988:	3401      	adds	r4, #1
   d498a:	4607      	mov	r7, r0
  DeserializationError parseNumericValue(VariantData &result) {
    char buffer[64];
    uint8_t n = 0;

    char c = current();
    while (canBeInNonQuotedString(c) && n < 63) {
   d498c:	e7ee      	b.n	d496c <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x14>
      move();
      buffer[n++] = c;
      c = current();
    }
    buffer[n] = 0;
   d498e:	ab14      	add	r3, sp, #80	; 0x50
   d4990:	4433      	add	r3, r6
   d4992:	2400      	movs	r4, #0
   d4994:	f803 4c40 	strb.w	r4, [r3, #-64]

    c = buffer[0];
   d4998:	f89d 3010 	ldrb.w	r3, [sp, #16]
    if (c == 't') {  // true
   d499c:	2b74      	cmp	r3, #116	; 0x74
   d499e:	d107      	bne.n	d49b0 <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x58>
  void remove(TAdaptedString key) {
    if (isObject()) _content.asCollection.remove(key);
  }

  void setBoolean(bool value) {
    setType(VALUE_IS_BOOLEAN);
   d49a0:	2105      	movs	r1, #5
   d49a2:	f105 0008 	add.w	r0, r5, #8
   d49a6:	f7ff fbb9 	bl	d411c <_ZN19ArduinoJson6101_00011VariantData7setTypeEh.isra.16>
    _content.asInteger = static_cast<UInt>(value);
   d49aa:	2301      	movs	r3, #1
   d49ac:	602b      	str	r3, [r5, #0]
   d49ae:	e00d      	b.n	d49cc <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x74>
      result.setBoolean(true);
      return n == 4 ? DeserializationError::Ok
                    : DeserializationError::IncompleteInput;
    }
    if (c == 'f') {  // false
   d49b0:	2b66      	cmp	r3, #102	; 0x66
   d49b2:	d109      	bne.n	d49c8 <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x70>
  void remove(TAdaptedString key) {
    if (isObject()) _content.asCollection.remove(key);
  }

  void setBoolean(bool value) {
    setType(VALUE_IS_BOOLEAN);
   d49b4:	f105 0008 	add.w	r0, r5, #8
   d49b8:	2105      	movs	r1, #5
   d49ba:	f7ff fbaf 	bl	d411c <_ZN19ArduinoJson6101_00011VariantData7setTypeEh.isra.16>
    _content.asInteger = static_cast<UInt>(value);
   d49be:	602c      	str	r4, [r5, #0]
      result.setBoolean(false);
      return n == 5 ? DeserializationError::Ok
                    : DeserializationError::IncompleteInput;
   d49c0:	1f70      	subs	r0, r6, #5
   d49c2:	bf18      	it	ne
   d49c4:	2001      	movne	r0, #1
   d49c6:	e020      	b.n	d4a0a <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0xb2>
    }
    if (c == 'n') {  // null
   d49c8:	2b6e      	cmp	r3, #110	; 0x6e
   d49ca:	d101      	bne.n	d49d0 <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x78>
      // the variant is already null
      return n == 4 ? DeserializationError::Ok
                    : DeserializationError::IncompleteInput;
   d49cc:	1f30      	subs	r0, r6, #4
   d49ce:	e7f8      	b.n	d49c2 <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x6a>
    }

    ParsedNumber<Float, UInt> num = parseNumber<Float, UInt>(buffer);
   d49d0:	a904      	add	r1, sp, #16
   d49d2:	a801      	add	r0, sp, #4
   d49d4:	f7ff fef2 	bl	d47bc <_ZN19ArduinoJson6101_00011parseNumberIfmEENS_12ParsedNumberIT_T0_EEPKc>

    switch (num.type()) {
   d49d8:	f89d 100c 	ldrb.w	r1, [sp, #12]
      // the variant is already null
      return n == 4 ? DeserializationError::Ok
                    : DeserializationError::IncompleteInput;
    }

    ParsedNumber<Float, UInt> num = parseNumber<Float, UInt>(buffer);
   d49dc:	9a01      	ldr	r2, [sp, #4]

    switch (num.type()) {
   d49de:	2907      	cmp	r1, #7
   d49e0:	d003      	beq.n	d49ea <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x92>
   d49e2:	2908      	cmp	r1, #8
   d49e4:	d007      	beq.n	d49f6 <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x9e>
   d49e6:	2906      	cmp	r1, #6
   d49e8:	d10d      	bne.n	d4a06 <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0xae>
      setNegativeInteger(~static_cast<UInt>(value) + 1);
    }
  }

  void setPositiveInteger(UInt value) {
    setType(VALUE_IS_POSITIVE_INTEGER);
   d49ea:	f105 0008 	add.w	r0, r5, #8
   d49ee:	f7ff fb95 	bl	d411c <_ZN19ArduinoJson6101_00011VariantData7setTypeEh.isra.16>
    _content.asInteger = value;
   d49f2:	602a      	str	r2, [r5, #0]
   d49f4:	e005      	b.n	d4a02 <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0xaa>
    setType(VALUE_IS_BOOLEAN);
    _content.asInteger = static_cast<UInt>(value);
  }

  void setFloat(Float value) {
    setType(VALUE_IS_FLOAT);
   d49f6:	f105 0008 	add.w	r0, r5, #8
      case VALUE_IS_POSITIVE_INTEGER:
        result.setPositiveInteger(num.uintValue);
        return DeserializationError::Ok;

      case VALUE_IS_FLOAT:
        result.setFloat(num.floatValue);
   d49fa:	9a02      	ldr	r2, [sp, #8]
   d49fc:	f7ff fb8e 	bl	d411c <_ZN19ArduinoJson6101_00011VariantData7setTypeEh.isra.16>
    _content.asFloat = value;
   d4a00:	602a      	str	r2, [r5, #0]
        return DeserializationError::Ok;
   d4a02:	4620      	mov	r0, r4
   d4a04:	e001      	b.n	d4a0a <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0xb2>
    }

    return DeserializationError::InvalidInput;
   d4a06:	f04f 0002 	mov.w	r0, #2
  }
   d4a0a:	b015      	add	sp, #84	; 0x54
   d4a0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d4a10 <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE>:
      : _pool(&pool),
        _reader(reader),
        _stringStorage(stringStorage),
        _nestingLimit(nestingLimit),
        _loaded(false) {}
  DeserializationError parse(VariantData &variant) {
   d4a10:	b570      	push	{r4, r5, r6, lr}
   d4a12:	b088      	sub	sp, #32
   d4a14:	460c      	mov	r4, r1
   d4a16:	4606      	mov	r6, r0
    DeserializationError err = skipSpacesAndComments();
   d4a18:	f7ff fd62 	bl	d44e0 <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
    if (err) return err;
   d4a1c:	a901      	add	r1, sp, #4
        _reader(reader),
        _stringStorage(stringStorage),
        _nestingLimit(nestingLimit),
        _loaded(false) {}
  DeserializationError parse(VariantData &variant) {
    DeserializationError err = skipSpacesAndComments();
   d4a1e:	f88d 0004 	strb.w	r0, [sp, #4]
    if (err) return err;
   d4a22:	a804      	add	r0, sp, #16
   d4a24:	f7ff fc62 	bl	d42ec <_ZNK19ArduinoJson6101_00020DeserializationErrorcvMS0_KFvvEEv>
   d4a28:	9b04      	ldr	r3, [sp, #16]
   d4a2a:	bb5b      	cbnz	r3, d4a84 <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x74>
   d4a2c:	9d05      	ldr	r5, [sp, #20]
   d4a2e:	f015 0501 	ands.w	r5, r5, #1
   d4a32:	d127      	bne.n	d4a84 <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x74>

    switch (current()) {
   d4a34:	4630      	mov	r0, r6
   d4a36:	f7ff fd42 	bl	d44be <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE7currentEv>
   d4a3a:	285b      	cmp	r0, #91	; 0x5b
   d4a3c:	d10b      	bne.n	d4a56 <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x46>
    setType(VALUE_IS_POSITIVE_INTEGER);
    _content.asInteger = static_cast<UInt>(value);
  }

  CollectionData &toArray() {
    setType(VALUE_IS_ARRAY);
   d4a3e:	f104 0008 	add.w	r0, r4, #8
   d4a42:	2140      	movs	r1, #64	; 0x40
   d4a44:	f7ff fb6a 	bl	d411c <_ZN19ArduinoJson6101_00011VariantData7setTypeEh.isra.16>
  if (!slotSetKey(slot, key, pool)) return 0;
  return slot->data();
}

inline void CollectionData::clear() {
  _head = 0;
   d4a48:	6025      	str	r5, [r4, #0]
  _tail = 0;
   d4a4a:	6065      	str	r5, [r4, #4]
      case '[':
        return parseArray(variant.toArray());
   d4a4c:	4621      	mov	r1, r4
   d4a4e:	4630      	mov	r0, r6
   d4a50:	f000 f83e 	bl	d4ad0 <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE>
   d4a54:	e00c      	b.n	d4a70 <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x60>
        _loaded(false) {}
  DeserializationError parse(VariantData &variant) {
    DeserializationError err = skipSpacesAndComments();
    if (err) return err;

    switch (current()) {
   d4a56:	287b      	cmp	r0, #123	; 0x7b
   d4a58:	d10c      	bne.n	d4a74 <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x64>
    _content.asCollection.clear();
    return _content.asCollection;
  }

  CollectionData &toObject() {
    setType(VALUE_IS_OBJECT);
   d4a5a:	2120      	movs	r1, #32
   d4a5c:	f104 0008 	add.w	r0, r4, #8
   d4a60:	f7ff fb5c 	bl	d411c <_ZN19ArduinoJson6101_00011VariantData7setTypeEh.isra.16>
  if (!slotSetKey(slot, key, pool)) return 0;
  return slot->data();
}

inline void CollectionData::clear() {
  _head = 0;
   d4a64:	6025      	str	r5, [r4, #0]
  _tail = 0;
   d4a66:	6065      	str	r5, [r4, #4]
      case '[':
        return parseArray(variant.toArray());

      case '{':
        return parseObject(variant.toObject());
   d4a68:	4621      	mov	r1, r4
   d4a6a:	4630      	mov	r0, r6
   d4a6c:	f000 f896 	bl	d4b9c <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE>
   d4a70:	b2c0      	uxtb	r0, r0
   d4a72:	e02b      	b.n	d4acc <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0xbc>
      if (err) return err;
    }
  }

  DeserializationError parseValue(VariantData &variant) {
    if (isQuote(current())) {
   d4a74:	4630      	mov	r0, r6
   d4a76:	f7ff fd22 	bl	d44be <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE7currentEv>
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
  }

  static inline bool isQuote(char c) {
    return c == '\'' || c == '\"';
   d4a7a:	2827      	cmp	r0, #39	; 0x27
   d4a7c:	d005      	beq.n	d4a8a <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x7a>
   d4a7e:	2822      	cmp	r0, #34	; 0x22
   d4a80:	d114      	bne.n	d4aac <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x9c>
   d4a82:	e002      	b.n	d4a8a <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x7a>
        _stringStorage(stringStorage),
        _nestingLimit(nestingLimit),
        _loaded(false) {}
  DeserializationError parse(VariantData &variant) {
    DeserializationError err = skipSpacesAndComments();
    if (err) return err;
   d4a84:	f89d 0004 	ldrb.w	r0, [sp, #4]
   d4a88:	e020      	b.n	d4acc <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0xbc>
    }
  }

  DeserializationError parseStringValue(VariantData &variant) {
    const char *value;
    DeserializationError err = parseQuotedString(value);
   d4a8a:	a903      	add	r1, sp, #12
   d4a8c:	4630      	mov	r0, r6
   d4a8e:	f7ff fdcb 	bl	d4628 <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc>
    if (err) return err;
   d4a92:	a902      	add	r1, sp, #8
    }
  }

  DeserializationError parseStringValue(VariantData &variant) {
    const char *value;
    DeserializationError err = parseQuotedString(value);
   d4a94:	f88d 0008 	strb.w	r0, [sp, #8]
    if (err) return err;
   d4a98:	a806      	add	r0, sp, #24
   d4a9a:	f7ff fc27 	bl	d42ec <_ZNK19ArduinoJson6101_00020DeserializationErrorcvMS0_KFvvEEv>
   d4a9e:	9b06      	ldr	r3, [sp, #24]
   d4aa0:	b94b      	cbnz	r3, d4ab6 <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0xa6>
   d4aa2:	9807      	ldr	r0, [sp, #28]
   d4aa4:	f010 0201 	ands.w	r2, r0, #1
   d4aa8:	d105      	bne.n	d4ab6 <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0xa6>
   d4aaa:	e007      	b.n	d4abc <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0xac>

  DeserializationError parseValue(VariantData &variant) {
    if (isQuote(current())) {
      return parseStringValue(variant);
    } else {
      return parseNumericValue(variant);
   d4aac:	4621      	mov	r1, r4
   d4aae:	4630      	mov	r0, r6
   d4ab0:	f7ff ff52 	bl	d4958 <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE>
   d4ab4:	e7dc      	b.n	d4a70 <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x60>
  }

  DeserializationError parseStringValue(VariantData &variant) {
    const char *value;
    DeserializationError err = parseQuotedString(value);
    if (err) return err;
   d4ab6:	f89d 0008 	ldrb.w	r0, [sp, #8]
   d4aba:	e007      	b.n	d4acc <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0xbc>
  void setNull() {
    setType(VALUE_IS_NULL);
  }

  void setOwnedString(not_null<const char *> s) {
    setType(VALUE_IS_OWNED_STRING);
   d4abc:	f104 0008 	add.w	r0, r4, #8
   d4ac0:	2104      	movs	r1, #4
    variant.setOwnedString(make_not_null(value));
   d4ac2:	9d03      	ldr	r5, [sp, #12]
   d4ac4:	f7ff fb2a 	bl	d411c <_ZN19ArduinoJson6101_00011VariantData7setTypeEh.isra.16>
    _content.asString = s.get();
   d4ac8:	6025      	str	r5, [r4, #0]
    return DeserializationError::Ok;
   d4aca:	4610      	mov	r0, r2
        return parseObject(variant.toObject());

      default:
        return parseValue(variant);
    }
  }
   d4acc:	b008      	add	sp, #32
   d4ace:	bd70      	pop	{r4, r5, r6, pc}

000d4ad0 <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE>:
    if (current() != charToSkip) return false;
    move();
    return true;
  }

  DeserializationError parseArray(CollectionData &array) {
   d4ad0:	b570      	push	{r4, r5, r6, lr}
    if (_nestingLimit == 0) return DeserializationError::TooDeep;
   d4ad2:	7c03      	ldrb	r3, [r0, #16]
    if (current() != charToSkip) return false;
    move();
    return true;
  }

  DeserializationError parseArray(CollectionData &array) {
   d4ad4:	b088      	sub	sp, #32
   d4ad6:	4604      	mov	r4, r0
   d4ad8:	460e      	mov	r6, r1
    if (_nestingLimit == 0) return DeserializationError::TooDeep;
   d4ada:	b913      	cbnz	r3, d4ae2 <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x12>
   d4adc:	f04f 0005 	mov.w	r0, #5
   d4ae0:	e05a      	b.n	d4b98 <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0xc8>
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
   d4ae2:	f7ff fcec 	bl	d44be <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE7currentEv>
   d4ae6:	285b      	cmp	r0, #91	; 0x5b
   d4ae8:	d110      	bne.n	d4b0c <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x3c>
    }
    return _current;
  }

  void move() {
    _loaded = false;
   d4aea:	2300      	movs	r3, #0
   d4aec:	74a3      	strb	r3, [r4, #18]

    // Check opening braket
    if (!eat('[')) return DeserializationError::InvalidInput;

    // Skip spaces
    DeserializationError err = skipSpacesAndComments();
   d4aee:	4620      	mov	r0, r4
   d4af0:	f7ff fcf6 	bl	d44e0 <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
    if (err) return err;
   d4af4:	a901      	add	r1, sp, #4

    // Check opening braket
    if (!eat('[')) return DeserializationError::InvalidInput;

    // Skip spaces
    DeserializationError err = skipSpacesAndComments();
   d4af6:	f88d 0004 	strb.w	r0, [sp, #4]
    if (err) return err;
   d4afa:	a802      	add	r0, sp, #8
   d4afc:	f7ff fbf6 	bl	d42ec <_ZNK19ArduinoJson6101_00020DeserializationErrorcvMS0_KFvvEEv>
   d4b00:	9b02      	ldr	r3, [sp, #8]
   d4b02:	b9bb      	cbnz	r3, d4b34 <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x64>
   d4b04:	9b03      	ldr	r3, [sp, #12]
   d4b06:	07da      	lsls	r2, r3, #31
   d4b08:	d414      	bmi.n	d4b34 <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x64>
   d4b0a:	e016      	b.n	d4b3a <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x6a>

  DeserializationError parseArray(CollectionData &array) {
    if (_nestingLimit == 0) return DeserializationError::TooDeep;

    // Check opening braket
    if (!eat('[')) return DeserializationError::InvalidInput;
   d4b0c:	f04f 0002 	mov.w	r0, #2
   d4b10:	e042      	b.n	d4b98 <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0xc8>
      // Allocate slot in array
      VariantData *value = array.add(_pool);
      if (!value) return DeserializationError::NoMemory;

      // 1 - Parse value
      _nestingLimit--;
   d4b12:	7c23      	ldrb	r3, [r4, #16]
   d4b14:	3b01      	subs	r3, #1
   d4b16:	7423      	strb	r3, [r4, #16]
      err = parse(*value);
   d4b18:	4620      	mov	r0, r4
   d4b1a:	f7ff ff79 	bl	d4a10 <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE>
      _nestingLimit++;
   d4b1e:	7c23      	ldrb	r3, [r4, #16]
      VariantData *value = array.add(_pool);
      if (!value) return DeserializationError::NoMemory;

      // 1 - Parse value
      _nestingLimit--;
      err = parse(*value);
   d4b20:	f88d 0004 	strb.w	r0, [sp, #4]
      _nestingLimit++;
   d4b24:	3301      	adds	r3, #1
   d4b26:	7423      	strb	r3, [r4, #16]
      if (err) return err;
   d4b28:	a901      	add	r1, sp, #4
   d4b2a:	a804      	add	r0, sp, #16
   d4b2c:	f7ff fbde 	bl	d42ec <_ZNK19ArduinoJson6101_00020DeserializationErrorcvMS0_KFvvEEv>
   d4b30:	9b04      	ldr	r3, [sp, #16]
   d4b32:	b153      	cbz	r3, d4b4a <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x7a>
    // Check opening braket
    if (!eat('[')) return DeserializationError::InvalidInput;

    // Skip spaces
    DeserializationError err = skipSpacesAndComments();
    if (err) return err;
   d4b34:	f89d 0004 	ldrb.w	r0, [sp, #4]
   d4b38:	e02e      	b.n	d4b98 <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0xc8>
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
   d4b3a:	4620      	mov	r0, r4
   d4b3c:	f7ff fcbf 	bl	d44be <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE7currentEv>
   d4b40:	285d      	cmp	r0, #93	; 0x5d
   d4b42:	d120      	bne.n	d4b86 <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0xb6>
    }
    return _current;
  }

  void move() {
    _loaded = false;
   d4b44:	2000      	movs	r0, #0
   d4b46:	74a0      	strb	r0, [r4, #18]
   d4b48:	e026      	b.n	d4b98 <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0xc8>

      // 1 - Parse value
      _nestingLimit--;
      err = parse(*value);
      _nestingLimit++;
      if (err) return err;
   d4b4a:	9b05      	ldr	r3, [sp, #20]
   d4b4c:	07db      	lsls	r3, r3, #31
   d4b4e:	d4f1      	bmi.n	d4b34 <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x64>

      // 2 - Skip spaces
      err = skipSpacesAndComments();
   d4b50:	4620      	mov	r0, r4
   d4b52:	f7ff fcc5 	bl	d44e0 <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
      if (err) return err;
   d4b56:	a901      	add	r1, sp, #4
      err = parse(*value);
      _nestingLimit++;
      if (err) return err;

      // 2 - Skip spaces
      err = skipSpacesAndComments();
   d4b58:	f88d 0004 	strb.w	r0, [sp, #4]
      if (err) return err;
   d4b5c:	a806      	add	r0, sp, #24
   d4b5e:	f7ff fbc5 	bl	d42ec <_ZNK19ArduinoJson6101_00020DeserializationErrorcvMS0_KFvvEEv>
   d4b62:	9b06      	ldr	r3, [sp, #24]
   d4b64:	2b00      	cmp	r3, #0
   d4b66:	d1e5      	bne.n	d4b34 <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x64>
   d4b68:	9b07      	ldr	r3, [sp, #28]
   d4b6a:	f013 0501 	ands.w	r5, r3, #1
   d4b6e:	d1e1      	bne.n	d4b34 <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x64>
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
   d4b70:	4620      	mov	r0, r4
   d4b72:	f7ff fca4 	bl	d44be <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE7currentEv>
   d4b76:	285d      	cmp	r0, #93	; 0x5d
   d4b78:	d0e4      	beq.n	d4b44 <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x74>
   d4b7a:	4620      	mov	r0, r4
   d4b7c:	f7ff fc9f 	bl	d44be <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE7currentEv>
   d4b80:	282c      	cmp	r0, #44	; 0x2c
   d4b82:	d1c3      	bne.n	d4b0c <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x3c>
    }
    return _current;
  }

  void move() {
    _loaded = false;
   d4b84:	74a5      	strb	r5, [r4, #18]
  slot->clear();
  return slot;
}

inline VariantData* CollectionData::add(MemoryPool* pool) {
  return slotData(addSlot(pool));
   d4b86:	6821      	ldr	r1, [r4, #0]
   d4b88:	4630      	mov	r0, r6
   d4b8a:	f7ff fb71 	bl	d4270 <_ZN19ArduinoJson6101_00014CollectionData7addSlotEPNS_10MemoryPoolE>

    // Read each value
    for (;;) {
      // Allocate slot in array
      VariantData *value = array.add(_pool);
      if (!value) return DeserializationError::NoMemory;
   d4b8e:	4601      	mov	r1, r0
   d4b90:	2800      	cmp	r0, #0
   d4b92:	d1be      	bne.n	d4b12 <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x42>
   d4b94:	f04f 0003 	mov.w	r0, #3

      // 3 - More values?
      if (eat(']')) return DeserializationError::Ok;
      if (!eat(',')) return DeserializationError::InvalidInput;
    }
  }
   d4b98:	b008      	add	sp, #32
   d4b9a:	bd70      	pop	{r4, r5, r6, pc}

000d4b9c <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE>:

  DeserializationError parseObject(CollectionData &object) {
   d4b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (_nestingLimit == 0) return DeserializationError::TooDeep;
   d4b9e:	7c03      	ldrb	r3, [r0, #16]
      if (eat(']')) return DeserializationError::Ok;
      if (!eat(',')) return DeserializationError::InvalidInput;
    }
  }

  DeserializationError parseObject(CollectionData &object) {
   d4ba0:	b08f      	sub	sp, #60	; 0x3c
   d4ba2:	4604      	mov	r4, r0
   d4ba4:	460f      	mov	r7, r1
    if (_nestingLimit == 0) return DeserializationError::TooDeep;
   d4ba6:	b913      	cbnz	r3, d4bae <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x12>
   d4ba8:	f04f 0005 	mov.w	r0, #5
   d4bac:	e098      	b.n	d4ce0 <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x144>
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
   d4bae:	f7ff fc86 	bl	d44be <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE7currentEv>
   d4bb2:	287b      	cmp	r0, #123	; 0x7b
   d4bb4:	d17b      	bne.n	d4cae <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x112>
    }
    return _current;
  }

  void move() {
    _loaded = false;
   d4bb6:	2300      	movs	r3, #0
   d4bb8:	74a3      	strb	r3, [r4, #18]

    // Check opening brace
    if (!eat('{')) return DeserializationError::InvalidInput;

    // Skip spaces
    DeserializationError err = skipSpacesAndComments();
   d4bba:	4620      	mov	r0, r4
   d4bbc:	f7ff fc90 	bl	d44e0 <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
    if (err) return err;
   d4bc0:	4669      	mov	r1, sp

    // Check opening brace
    if (!eat('{')) return DeserializationError::InvalidInput;

    // Skip spaces
    DeserializationError err = skipSpacesAndComments();
   d4bc2:	f88d 0000 	strb.w	r0, [sp]
    if (err) return err;
   d4bc6:	a802      	add	r0, sp, #8
   d4bc8:	f7ff fb90 	bl	d42ec <_ZNK19ArduinoJson6101_00020DeserializationErrorcvMS0_KFvvEEv>
   d4bcc:	9b02      	ldr	r3, [sp, #8]
   d4bce:	2b00      	cmp	r3, #0
   d4bd0:	d14d      	bne.n	d4c6e <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xd2>
   d4bd2:	9803      	ldr	r0, [sp, #12]
   d4bd4:	f010 0501 	ands.w	r5, r0, #1
   d4bd8:	d149      	bne.n	d4c6e <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xd2>
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
   d4bda:	4620      	mov	r0, r4
   d4bdc:	f7ff fc6f 	bl	d44be <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE7currentEv>
   d4be0:	287d      	cmp	r0, #125	; 0x7d
   d4be2:	d117      	bne.n	d4c14 <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x78>
    }
    return _current;
  }

  void move() {
    _loaded = false;
   d4be4:	74a5      	strb	r5, [r4, #18]
    // Skip spaces
    DeserializationError err = skipSpacesAndComments();
    if (err) return err;

    // Empty object?
    if (eat('}')) return DeserializationError::Ok;
   d4be6:	4628      	mov	r0, r5
   d4be8:	e07a      	b.n	d4ce0 <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x144>
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
   d4bea:	4620      	mov	r0, r4
   d4bec:	f7ff fc67 	bl	d44be <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE7currentEv>
   d4bf0:	282c      	cmp	r0, #44	; 0x2c
   d4bf2:	d15c      	bne.n	d4cae <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x112>
    }
    return _current;
  }

  void move() {
    _loaded = false;
   d4bf4:	2300      	movs	r3, #0
   d4bf6:	74a3      	strb	r3, [r4, #18]
      // More keys/values?
      if (eat('}')) return DeserializationError::Ok;
      if (!eat(',')) return DeserializationError::InvalidInput;

      // Skip spaces
      err = skipSpacesAndComments();
   d4bf8:	4620      	mov	r0, r4
   d4bfa:	f7ff fc71 	bl	d44e0 <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
      if (err) return err;
   d4bfe:	4669      	mov	r1, sp
      // More keys/values?
      if (eat('}')) return DeserializationError::Ok;
      if (!eat(',')) return DeserializationError::InvalidInput;

      // Skip spaces
      err = skipSpacesAndComments();
   d4c00:	f88d 0000 	strb.w	r0, [sp]
      if (err) return err;
   d4c04:	a80c      	add	r0, sp, #48	; 0x30
   d4c06:	f7ff fb71 	bl	d42ec <_ZNK19ArduinoJson6101_00020DeserializationErrorcvMS0_KFvvEEv>
   d4c0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d4c0c:	bb7b      	cbnz	r3, d4c6e <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xd2>
   d4c0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d4c10:	07db      	lsls	r3, r3, #31
   d4c12:	d42c      	bmi.n	d4c6e <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xd2>
    if (eat('}')) return DeserializationError::Ok;

    // Read each key value pair
    for (;;) {
      // Allocate slot in object
      VariantSlot *slot = object.addSlot(_pool);
   d4c14:	6821      	ldr	r1, [r4, #0]
   d4c16:	4638      	mov	r0, r7
   d4c18:	f7ff fb2a 	bl	d4270 <_ZN19ArduinoJson6101_00014CollectionData7addSlotEPNS_10MemoryPoolE>
      if (!slot) return DeserializationError::NoMemory;
   d4c1c:	4605      	mov	r5, r0
   d4c1e:	b910      	cbnz	r0, d4c26 <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x8a>
   d4c20:	f04f 0003 	mov.w	r0, #3
   d4c24:	e05c      	b.n	d4ce0 <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x144>

      // Parse key
      const char *key;
      err = parseKey(key);
   d4c26:	a901      	add	r1, sp, #4
   d4c28:	4620      	mov	r0, r4
   d4c2a:	f7ff fd61 	bl	d46f0 <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE8parseKeyERPKc>
      if (err) return err;
   d4c2e:	4669      	mov	r1, sp
      VariantSlot *slot = object.addSlot(_pool);
      if (!slot) return DeserializationError::NoMemory;

      // Parse key
      const char *key;
      err = parseKey(key);
   d4c30:	f88d 0000 	strb.w	r0, [sp]
      if (err) return err;
   d4c34:	a804      	add	r0, sp, #16
   d4c36:	f7ff fb59 	bl	d42ec <_ZNK19ArduinoJson6101_00020DeserializationErrorcvMS0_KFvvEEv>
   d4c3a:	9b04      	ldr	r3, [sp, #16]
   d4c3c:	b9bb      	cbnz	r3, d4c6e <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xd2>
   d4c3e:	9b05      	ldr	r3, [sp, #20]
   d4c40:	07d8      	lsls	r0, r3, #31
   d4c42:	d414      	bmi.n	d4c6e <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xd2>
    ARDUINOJSON_ASSERT(slot != 0);
    _next = VariantSlotDiff(slot - this);
  }

  void setOwnedKey(not_null<const char*> k) {
    _flags |= KEY_IS_OWNED;
   d4c44:	7a2b      	ldrb	r3, [r5, #8]
   d4c46:	f063 037f 	orn	r3, r3, #127	; 0x7f
   d4c4a:	722b      	strb	r3, [r5, #8]
    _key = k.get();
   d4c4c:	9b01      	ldr	r3, [sp, #4]
   d4c4e:	60eb      	str	r3, [r5, #12]
      slot->setOwnedKey(make_not_null(key));

      // Skip spaces
      err = skipSpacesAndComments();
   d4c50:	4620      	mov	r0, r4
   d4c52:	f7ff fc45 	bl	d44e0 <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
      if (err) return err;  // Colon
   d4c56:	4669      	mov	r1, sp
      err = parseKey(key);
      if (err) return err;
      slot->setOwnedKey(make_not_null(key));

      // Skip spaces
      err = skipSpacesAndComments();
   d4c58:	f88d 0000 	strb.w	r0, [sp]
      if (err) return err;  // Colon
   d4c5c:	a806      	add	r0, sp, #24
   d4c5e:	f7ff fb45 	bl	d42ec <_ZNK19ArduinoJson6101_00020DeserializationErrorcvMS0_KFvvEEv>
   d4c62:	9b06      	ldr	r3, [sp, #24]
   d4c64:	b91b      	cbnz	r3, d4c6e <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xd2>
   d4c66:	9b07      	ldr	r3, [sp, #28]
   d4c68:	f013 0601 	ands.w	r6, r3, #1
   d4c6c:	d002      	beq.n	d4c74 <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xd8>
      if (!slot) return DeserializationError::NoMemory;

      // Parse key
      const char *key;
      err = parseKey(key);
      if (err) return err;
   d4c6e:	f89d 0000 	ldrb.w	r0, [sp]
   d4c72:	e035      	b.n	d4ce0 <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x144>
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
   d4c74:	4620      	mov	r0, r4
   d4c76:	f7ff fc22 	bl	d44be <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE7currentEv>
   d4c7a:	283a      	cmp	r0, #58	; 0x3a
   d4c7c:	d117      	bne.n	d4cae <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x112>
      err = skipSpacesAndComments();
      if (err) return err;  // Colon
      if (!eat(':')) return DeserializationError::InvalidInput;

      // Parse value
      _nestingLimit--;
   d4c7e:	7c23      	ldrb	r3, [r4, #16]
    }
    return _current;
  }

  void move() {
    _loaded = false;
   d4c80:	74a6      	strb	r6, [r4, #18]
      err = skipSpacesAndComments();
      if (err) return err;  // Colon
      if (!eat(':')) return DeserializationError::InvalidInput;

      // Parse value
      _nestingLimit--;
   d4c82:	3b01      	subs	r3, #1
   d4c84:	7423      	strb	r3, [r4, #16]
      err = parse(*slot->data());
   d4c86:	4629      	mov	r1, r5
   d4c88:	4620      	mov	r0, r4
   d4c8a:	f7ff fec1 	bl	d4a10 <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE>
      _nestingLimit++;
   d4c8e:	7c23      	ldrb	r3, [r4, #16]
      if (err) return err;  // Colon
      if (!eat(':')) return DeserializationError::InvalidInput;

      // Parse value
      _nestingLimit--;
      err = parse(*slot->data());
   d4c90:	f88d 0000 	strb.w	r0, [sp]
      _nestingLimit++;
   d4c94:	3301      	adds	r3, #1
   d4c96:	7423      	strb	r3, [r4, #16]
      if (err) return err;
   d4c98:	4669      	mov	r1, sp
   d4c9a:	a808      	add	r0, sp, #32
   d4c9c:	f7ff fb26 	bl	d42ec <_ZNK19ArduinoJson6101_00020DeserializationErrorcvMS0_KFvvEEv>
   d4ca0:	9b08      	ldr	r3, [sp, #32]
   d4ca2:	2b00      	cmp	r3, #0
   d4ca4:	d1e3      	bne.n	d4c6e <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xd2>
   d4ca6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d4ca8:	07d9      	lsls	r1, r3, #31
   d4caa:	d503      	bpl.n	d4cb4 <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x118>
   d4cac:	e7df      	b.n	d4c6e <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xd2>
      slot->setOwnedKey(make_not_null(key));

      // Skip spaces
      err = skipSpacesAndComments();
      if (err) return err;  // Colon
      if (!eat(':')) return DeserializationError::InvalidInput;
   d4cae:	f04f 0002 	mov.w	r0, #2
   d4cb2:	e015      	b.n	d4ce0 <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x144>
      err = parse(*slot->data());
      _nestingLimit++;
      if (err) return err;

      // Skip spaces
      err = skipSpacesAndComments();
   d4cb4:	4620      	mov	r0, r4
   d4cb6:	f7ff fc13 	bl	d44e0 <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
      if (err) return err;
   d4cba:	4669      	mov	r1, sp
      err = parse(*slot->data());
      _nestingLimit++;
      if (err) return err;

      // Skip spaces
      err = skipSpacesAndComments();
   d4cbc:	f88d 0000 	strb.w	r0, [sp]
      if (err) return err;
   d4cc0:	a80a      	add	r0, sp, #40	; 0x28
   d4cc2:	f7ff fb13 	bl	d42ec <_ZNK19ArduinoJson6101_00020DeserializationErrorcvMS0_KFvvEEv>
   d4cc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d4cc8:	2b00      	cmp	r3, #0
   d4cca:	d1d0      	bne.n	d4c6e <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xd2>
   d4ccc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d4cce:	07da      	lsls	r2, r3, #31
   d4cd0:	d4cd      	bmi.n	d4c6e <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xd2>
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
   d4cd2:	4620      	mov	r0, r4
   d4cd4:	f7ff fbf3 	bl	d44be <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE7currentEv>
   d4cd8:	287d      	cmp	r0, #125	; 0x7d
   d4cda:	d186      	bne.n	d4bea <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x4e>
    }
    return _current;
  }

  void move() {
    _loaded = false;
   d4cdc:	2000      	movs	r0, #0
   d4cde:	74a0      	strb	r0, [r4, #18]

      // Skip spaces
      err = skipSpacesAndComments();
      if (err) return err;
    }
  }
   d4ce0:	b00f      	add	sp, #60	; 0x3c
   d4ce2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4ce4 <_ZN19ArduinoJson6101_00011deserializeINS_16JsonDeserializerE6StringEENS_9enable_ifIXntsrNS_8is_arrayIT0_EE5valueENS_20DeserializationErrorEE4typeERNS_12JsonDocumentERKS5_NS_12NestingLimitE>:

// deserialize(JsonDocument&, const std::string&);
// deserialize(JsonDocument&, const String&);
template <template <typename, typename> class TDeserializer, typename TString>
typename enable_if<!is_array<TString>::value, DeserializationError>::type
deserialize(JsonDocument &doc, const TString &input,
   d4ce4:	b530      	push	{r4, r5, lr}
    s.size = newSize;
    checkInvariants();
  }

  void clear() {
    _left = _begin;
   d4ce6:	6803      	ldr	r3, [r0, #0]
   d4ce8:	6043      	str	r3, [r0, #4]
   d4cea:	460d      	mov	r5, r1
    _right = _end;
   d4cec:	68c3      	ldr	r3, [r0, #12]
   d4cee:	6083      	str	r3, [r0, #8]
   d4cf0:	b087      	sub	sp, #28
   d4cf2:	4604      	mov	r4, r0
      setType(VALUE_IS_NULL);
    }
  }

  void setNull() {
    setType(VALUE_IS_NULL);
   d4cf4:	2100      	movs	r1, #0
   d4cf6:	3018      	adds	r0, #24
   d4cf8:	f7ff fa10 	bl	d411c <_ZN19ArduinoJson6101_00011VariantData7setTypeEh.isra.16>
   d4cfc:	682b      	ldr	r3, [r5, #0]
  const char* _ptr;
  const char* _end;

 public:
  explicit SafeCharPointerReader(const char* ptr, size_t len)
      : _ptr(ptr ? ptr : reinterpret_cast<const char*>("")), _end(_ptr + len) {}
   d4cfe:	480b      	ldr	r0, [pc, #44]	; (d4d2c <_ZN19ArduinoJson6101_00011deserializeINS_16JsonDeserializerE6StringEENS_9enable_ifIXntsrNS_8is_arrayIT0_EE5valueENS_20DeserializationErrorEE4typeERNS_12JsonDocumentERKS5_NS_12NestingLimitE+0x48>)
   d4d00:	68a9      	ldr	r1, [r5, #8]
                   TStringStorage stringStorage, uint8_t nestingLimit)
      : _pool(&pool),
        _reader(reader),
        _stringStorage(stringStorage),
        _nestingLimit(nestingLimit),
        _loaded(false) {}
   d4d02:	9401      	str	r4, [sp, #4]
   d4d04:	2b00      	cmp	r3, #0
   d4d06:	bf08      	it	eq
   d4d08:	4603      	moveq	r3, r0
   d4d0a:	9302      	str	r3, [sp, #8]
   d4d0c:	440b      	add	r3, r1
   d4d0e:	9303      	str	r3, [sp, #12]
            NestingLimit nestingLimit) {
  doc.clear();
  return makeDeserializer<TDeserializer>(
             doc.memoryPool(), makeReader(input),
             makeStringStorage(doc.memoryPool(), input), nestingLimit.value)
      .parse(doc.data());
   d4d10:	f104 0110 	add.w	r1, r4, #16
   d4d14:	2300      	movs	r3, #0
   d4d16:	a801      	add	r0, sp, #4
   d4d18:	9404      	str	r4, [sp, #16]
   d4d1a:	f88d 2014 	strb.w	r2, [sp, #20]
   d4d1e:	f88d 3016 	strb.w	r3, [sp, #22]
   d4d22:	f7ff fe75 	bl	d4a10 <_ZN19ArduinoJson6101_00016JsonDeserializerINS_21SafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE>
}
   d4d26:	b007      	add	sp, #28
   d4d28:	bd30      	pop	{r4, r5, pc}
   d4d2a:	bf00      	nop
   d4d2c:	000d7ece 	.word	0x000d7ece

000d4d30 <_ZN19ArduinoJson6101_0009variantAsIhEENS_9enable_ifIXsrNS_11is_integralIT_EE5valueES3_E4typeEPKNS_11VariantDataE>:
};

// ---

template <typename T>
inline typename enable_if<is_integral<T>::value, T>::type variantAs(
   d4d30:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    const VariantData* _data) {
  return _data != 0 ? _data->asIntegral<T>() : T(0);
   d4d32:	2800      	cmp	r0, #0
   d4d34:	d034      	beq.n	d4da0 <_ZN19ArduinoJson6101_0009variantAsIhEENS_9enable_ifIXsrNS_11is_integralIT_EE5valueES3_E4typeEPKNS_11VariantDataE+0x70>

namespace ARDUINOJSON_NAMESPACE {

template <typename T>
inline T VariantData::asIntegral() const {
  switch (type()) {
   d4d36:	7a03      	ldrb	r3, [r0, #8]
   d4d38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   d4d3c:	3b03      	subs	r3, #3
   d4d3e:	2b05      	cmp	r3, #5
   d4d40:	d82d      	bhi.n	d4d9e <_ZN19ArduinoJson6101_0009variantAsIhEENS_9enable_ifIXsrNS_11is_integralIT_EE5valueES3_E4typeEPKNS_11VariantDataE+0x6e>
   d4d42:	e8df f003 	tbb	[pc, r3]
   d4d46:	0505      	.short	0x0505
   d4d48:	172c0303 	.word	0x172c0303
    case VALUE_IS_POSITIVE_INTEGER:
    case VALUE_IS_BOOLEAN:
      return convertPositiveInteger<T>(_content.asInteger);
   d4d4c:	6800      	ldr	r0, [r0, #0]
   d4d4e:	e00d      	b.n	d4d6c <_ZN19ArduinoJson6101_0009variantAsIhEENS_9enable_ifIXsrNS_11is_integralIT_EE5valueES3_E4typeEPKNS_11VariantDataE+0x3c>
template <typename T>
T parseInteger(const char *s) {
  // try to reuse the same parameters as JsonDeserializer
  typedef typename choose_largest<UInt, typename make_unsigned<T>::type>::type
      TUInt;
  return parseNumber<Float, TUInt>(s).template as<T>();
   d4d50:	6801      	ldr	r1, [r0, #0]
   d4d52:	a803      	add	r0, sp, #12
   d4d54:	f7ff fd32 	bl	d47bc <_ZN19ArduinoJson6101_00011parseNumberIfmEENS_12ParsedNumberIT_T0_EEPKc>
                                  : VALUE_IS_POSITIVE_INTEGER)) {}
  ParsedNumber(TFloat value) : floatValue(value), _type(VALUE_IS_FLOAT) {}

  template <typename T>
  T as() const {
    switch (_type) {
   d4d58:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d4d5c:	2b06      	cmp	r3, #6
   d4d5e:	d004      	beq.n	d4d6a <_ZN19ArduinoJson6101_0009variantAsIhEENS_9enable_ifIXsrNS_11is_integralIT_EE5valueES3_E4typeEPKNS_11VariantDataE+0x3a>
   d4d60:	2b08      	cmp	r3, #8
   d4d62:	d11c      	bne.n	d4d9e <_ZN19ArduinoJson6101_0009variantAsIhEENS_9enable_ifIXsrNS_11is_integralIT_EE5valueES3_E4typeEPKNS_11VariantDataE+0x6e>
      case VALUE_IS_NEGATIVE_INTEGER:
        return convertNegativeInteger<T>(uintValue);
      case VALUE_IS_POSITIVE_INTEGER:
        return convertPositiveInteger<T>(uintValue);
      case VALUE_IS_FLOAT:
        return convertFloat<T>(floatValue);
   d4d64:	eddd 7a04 	vldr	s15, [sp, #16]
   d4d68:	e006      	b.n	d4d78 <_ZN19ArduinoJson6101_0009variantAsIhEENS_9enable_ifIXsrNS_11is_integralIT_EE5valueES3_E4typeEPKNS_11VariantDataE+0x48>
  T as() const {
    switch (_type) {
      case VALUE_IS_NEGATIVE_INTEGER:
        return convertNegativeInteger<T>(uintValue);
      case VALUE_IS_POSITIVE_INTEGER:
        return convertPositiveInteger<T>(uintValue);
   d4d6a:	9803      	ldr	r0, [sp, #12]
  return false;
}

template <typename TOut, typename TIn>
TOut convertPositiveInteger(TIn value) {
  return canStorePositiveInteger<TOut>(value) ? TOut(value) : 0;
   d4d6c:	28ff      	cmp	r0, #255	; 0xff
   d4d6e:	d816      	bhi.n	d4d9e <_ZN19ArduinoJson6101_0009variantAsIhEENS_9enable_ifIXsrNS_11is_integralIT_EE5valueES3_E4typeEPKNS_11VariantDataE+0x6e>
   d4d70:	b2c0      	uxtb	r0, r0
   d4d72:	e015      	b.n	d4da0 <_ZN19ArduinoJson6101_0009variantAsIhEENS_9enable_ifIXsrNS_11is_integralIT_EE5valueES3_E4typeEPKNS_11VariantDataE+0x70>
      return convertNegativeInteger<T>(_content.asInteger);
    case VALUE_IS_LINKED_STRING:
    case VALUE_IS_OWNED_STRING:
      return parseInteger<T>(_content.asString);
    case VALUE_IS_FLOAT:
      return convertFloat<T>(_content.asFloat);
   d4d74:	edd0 7a00 	vldr	s15, [r0]
typename enable_if<!is_floating_point<TOut>::value, TOut>::type convertFloat(
    TIn value) {
  return value >= numeric_limits<TOut>::lowest() &&
                 value <= numeric_limits<TOut>::highest()
             ? TOut(value)
             : 0;
   d4d78:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d4d7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4d80:	db0d      	blt.n	d4d9e <_ZN19ArduinoJson6101_0009variantAsIhEENS_9enable_ifIXsrNS_11is_integralIT_EE5valueES3_E4typeEPKNS_11VariantDataE+0x6e>
   d4d82:	ed9f 7a09 	vldr	s14, [pc, #36]	; d4da8 <_ZN19ArduinoJson6101_0009variantAsIhEENS_9enable_ifIXsrNS_11is_integralIT_EE5valueES3_E4typeEPKNS_11VariantDataE+0x78>
   d4d86:	eef4 7ac7 	vcmpe.f32	s15, s14
   d4d8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4d8e:	d806      	bhi.n	d4d9e <_ZN19ArduinoJson6101_0009variantAsIhEENS_9enable_ifIXsrNS_11is_integralIT_EE5valueES3_E4typeEPKNS_11VariantDataE+0x6e>
   d4d90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   d4d94:	edcd 7a01 	vstr	s15, [sp, #4]
   d4d98:	f89d 0004 	ldrb.w	r0, [sp, #4]
   d4d9c:	e000      	b.n	d4da0 <_ZN19ArduinoJson6101_0009variantAsIhEENS_9enable_ifIXsrNS_11is_integralIT_EE5valueES3_E4typeEPKNS_11VariantDataE+0x70>
   d4d9e:	2000      	movs	r0, #0
}
   d4da0:	b007      	add	sp, #28
   d4da2:	f85d fb04 	ldr.w	pc, [sp], #4
   d4da6:	bf00      	nop
   d4da8:	437f0000 	.word	0x437f0000

000d4dac <_ZN19ArduinoJson6101_00011parseNumberIfjEENS_12ParsedNumberIT_T0_EEPKc>:

template <typename A, typename B>
struct choose_largest : conditional<(sizeof(A) > sizeof(B)), A, B> {};

template <typename TFloat, typename TUInt>
inline ParsedNumber<TFloat, TUInt> parseNumber(const char *s) {
   d4dac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  typedef ParsedNumber<TFloat, TUInt> return_type;

  ARDUINOJSON_ASSERT(s != 0);

  bool is_negative = false;
  switch (*s) {
   d4db0:	780b      	ldrb	r3, [r1, #0]
   d4db2:	2b2b      	cmp	r3, #43	; 0x2b

template <typename A, typename B>
struct choose_largest : conditional<(sizeof(A) > sizeof(B)), A, B> {};

template <typename TFloat, typename TUInt>
inline ParsedNumber<TFloat, TUInt> parseNumber(const char *s) {
   d4db4:	4604      	mov	r4, r0
  typedef ParsedNumber<TFloat, TUInt> return_type;

  ARDUINOJSON_ASSERT(s != 0);

  bool is_negative = false;
  switch (*s) {
   d4db6:	d004      	beq.n	d4dc2 <_ZN19ArduinoJson6101_00011parseNumberIfjEENS_12ParsedNumberIT_T0_EEPKc+0x16>
   d4db8:	2b2d      	cmp	r3, #45	; 0x2d
   d4dba:	d103      	bne.n	d4dc4 <_ZN19ArduinoJson6101_00011parseNumberIfjEENS_12ParsedNumberIT_T0_EEPKc+0x18>
    case '-':
      is_negative = true;
      s++;
   d4dbc:	3101      	adds	r1, #1
  ARDUINOJSON_ASSERT(s != 0);

  bool is_negative = false;
  switch (*s) {
    case '-':
      is_negative = true;
   d4dbe:	2601      	movs	r6, #1
      s++;
      break;
   d4dc0:	e001      	b.n	d4dc6 <_ZN19ArduinoJson6101_00011parseNumberIfjEENS_12ParsedNumberIT_T0_EEPKc+0x1a>
    case '+':
      s++;
   d4dc2:	3101      	adds	r1, #1
  typedef typename traits::exponent_type exponent_t;
  typedef ParsedNumber<TFloat, TUInt> return_type;

  ARDUINOJSON_ASSERT(s != 0);

  bool is_negative = false;
   d4dc4:	2600      	movs	r6, #0
    case '+':
      s++;
      break;
  }

  if (*s == 'n' || *s == 'N') return traits::nan();
   d4dc6:	780b      	ldrb	r3, [r1, #0]
   d4dc8:	f003 02df 	and.w	r2, r3, #223	; 0xdf
   d4dcc:	2a4e      	cmp	r2, #78	; 0x4e
   d4dce:	d102      	bne.n	d4dd6 <_ZN19ArduinoJson6101_00011parseNumberIfjEENS_12ParsedNumberIT_T0_EEPKc+0x2a>
  ParsedNumber(TUInt value, bool is_negative)
      : uintValue(value),
        floatValue(TFloat(value)),
        _type(uint8_t(is_negative ? VALUE_IS_NEGATIVE_INTEGER
                                  : VALUE_IS_POSITIVE_INTEGER)) {}
  ParsedNumber(TFloat value) : floatValue(value), _type(VALUE_IS_FLOAT) {}
   d4dd0:	4b55      	ldr	r3, [pc, #340]	; (d4f28 <_ZN19ArduinoJson6101_00011parseNumberIfjEENS_12ParsedNumberIT_T0_EEPKc+0x17c>)
   d4dd2:	6063      	str	r3, [r4, #4]
   d4dd4:	e0a2      	b.n	d4f1c <_ZN19ArduinoJson6101_00011parseNumberIfjEENS_12ParsedNumberIT_T0_EEPKc+0x170>
      s++;
      break;
  }

  if (*s == 'n' || *s == 'N') return traits::nan();
  if (*s == 'i' || *s == 'I')
   d4dd6:	2a49      	cmp	r2, #73	; 0x49
   d4dd8:	d07e      	beq.n	d4ed8 <_ZN19ArduinoJson6101_00011parseNumberIfjEENS_12ParsedNumberIT_T0_EEPKc+0x12c>
    return is_negative ? -traits::inf() : traits::inf();
  if (!isdigit(*s) && *s != '.') return return_type();
   d4dda:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   d4dde:	2a09      	cmp	r2, #9
   d4de0:	d902      	bls.n	d4de8 <_ZN19ArduinoJson6101_00011parseNumberIfjEENS_12ParsedNumberIT_T0_EEPKc+0x3c>
   d4de2:	2b2e      	cmp	r3, #46	; 0x2e
   d4de4:	f040 8089 	bne.w	d4efa <_ZN19ArduinoJson6101_00011parseNumberIfjEENS_12ParsedNumberIT_T0_EEPKc+0x14e>
  exponent_t exponent_offset = 0;
  const mantissa_t maxUint = TUInt(-1);

  while (isdigit(*s)) {
    uint8_t digit = uint8_t(*s - '0');
    if (mantissa > maxUint / 10) break;
   d4de8:	4f50      	ldr	r7, [pc, #320]	; (d4f2c <_ZN19ArduinoJson6101_00011parseNumberIfjEENS_12ParsedNumberIT_T0_EEPKc+0x180>)
      break;
  }

  if (*s == 'n' || *s == 'N') return traits::nan();
  if (*s == 'i' || *s == 'I')
    return is_negative ? -traits::inf() : traits::inf();
   d4dea:	2300      	movs	r3, #0
  const mantissa_t maxUint = TUInt(-1);

  while (isdigit(*s)) {
    uint8_t digit = uint8_t(*s - '0');
    if (mantissa > maxUint / 10) break;
    mantissa *= 10;
   d4dec:	f04f 0e0a 	mov.w	lr, #10

  mantissa_t mantissa = 0;
  exponent_t exponent_offset = 0;
  const mantissa_t maxUint = TUInt(-1);

  while (isdigit(*s)) {
   d4df0:	4608      	mov	r0, r1
   d4df2:	f810 5b01 	ldrb.w	r5, [r0], #1
   d4df6:	f1a5 0230 	sub.w	r2, r5, #48	; 0x30
   d4dfa:	b2d2      	uxtb	r2, r2
   d4dfc:	2a09      	cmp	r2, #9
   d4dfe:	d809      	bhi.n	d4e14 <_ZN19ArduinoJson6101_00011parseNumberIfjEENS_12ParsedNumberIT_T0_EEPKc+0x68>
    uint8_t digit = uint8_t(*s - '0');
    if (mantissa > maxUint / 10) break;
   d4e00:	42bb      	cmp	r3, r7
   d4e02:	d808      	bhi.n	d4e16 <_ZN19ArduinoJson6101_00011parseNumberIfjEENS_12ParsedNumberIT_T0_EEPKc+0x6a>
    mantissa *= 10;
   d4e04:	fb0e f303 	mul.w	r3, lr, r3
    if (mantissa > maxUint - digit) break;
   d4e08:	43d5      	mvns	r5, r2
   d4e0a:	42ab      	cmp	r3, r5
   d4e0c:	d803      	bhi.n	d4e16 <_ZN19ArduinoJson6101_00011parseNumberIfjEENS_12ParsedNumberIT_T0_EEPKc+0x6a>
    mantissa += digit;
   d4e0e:	4413      	add	r3, r2

  mantissa_t mantissa = 0;
  exponent_t exponent_offset = 0;
  const mantissa_t maxUint = TUInt(-1);

  while (isdigit(*s)) {
   d4e10:	4601      	mov	r1, r0
   d4e12:	e7ed      	b.n	d4df0 <_ZN19ArduinoJson6101_00011parseNumberIfjEENS_12ParsedNumberIT_T0_EEPKc+0x44>
    if (mantissa > maxUint - digit) break;
    mantissa += digit;
    s++;
  }

  if (*s == '\0') return return_type(TUInt(mantissa), is_negative);
   d4e14:	b11d      	cbz	r5, d4e1e <_ZN19ArduinoJson6101_00011parseNumberIfjEENS_12ParsedNumberIT_T0_EEPKc+0x72>

  ParsedNumber(TUInt value, bool is_negative)
      : uintValue(value),
        floatValue(TFloat(value)),
        _type(uint8_t(is_negative ? VALUE_IS_NEGATIVE_INTEGER
                                  : VALUE_IS_POSITIVE_INTEGER)) {}
   d4e16:	2200      	movs	r2, #0
  }

  if (*s == '\0') return return_type(TUInt(mantissa), is_negative);

  // avoid mantissa overflow
  while (mantissa > traits::mantissa_max) {
   d4e18:	4f45      	ldr	r7, [pc, #276]	; (d4f30 <_ZN19ArduinoJson6101_00011parseNumberIfjEENS_12ParsedNumberIT_T0_EEPKc+0x184>)
    mantissa /= 10;
   d4e1a:	250a      	movs	r5, #10
   d4e1c:	e00e      	b.n	d4e3c <_ZN19ArduinoJson6101_00011parseNumberIfjEENS_12ParsedNumberIT_T0_EEPKc+0x90>

  ParsedNumber(TUInt value, bool is_negative)
      : uintValue(value),
        floatValue(TFloat(value)),
        _type(uint8_t(is_negative ? VALUE_IS_NEGATIVE_INTEGER
                                  : VALUE_IS_POSITIVE_INTEGER)) {}
   d4e1e:	ee07 3a90 	vmov	s15, r3
   d4e22:	eef8 7a67 	vcvt.f32.u32	s15, s15
   d4e26:	2e00      	cmp	r6, #0
   d4e28:	6023      	str	r3, [r4, #0]
   d4e2a:	edc4 7a01 	vstr	s15, [r4, #4]
   d4e2e:	bf0c      	ite	eq
   d4e30:	2306      	moveq	r3, #6
   d4e32:	2307      	movne	r3, #7
   d4e34:	e073      	b.n	d4f1e <_ZN19ArduinoJson6101_00011parseNumberIfjEENS_12ParsedNumberIT_T0_EEPKc+0x172>
  }

  if (*s == '\0') return return_type(TUInt(mantissa), is_negative);

  // avoid mantissa overflow
  while (mantissa > traits::mantissa_max) {
   d4e36:	4602      	mov	r2, r0
    mantissa /= 10;
   d4e38:	fbb3 f3f5 	udiv	r3, r3, r5
  }

  if (*s == '\0') return return_type(TUInt(mantissa), is_negative);

  // avoid mantissa overflow
  while (mantissa > traits::mantissa_max) {
   d4e3c:	42bb      	cmp	r3, r7
   d4e3e:	f102 0001 	add.w	r0, r2, #1
   d4e42:	d8f8      	bhi.n	d4e36 <_ZN19ArduinoJson6101_00011parseNumberIfjEENS_12ParsedNumberIT_T0_EEPKc+0x8a>
   d4e44:	1a52      	subs	r2, r2, r1
   d4e46:	1850      	adds	r0, r2, r1
   d4e48:	460d      	mov	r5, r1
    mantissa /= 10;
    exponent_offset++;
  }

  // remaing digits can't fit in the mantissa
  while (isdigit(*s)) {
   d4e4a:	f811 7b01 	ldrb.w	r7, [r1], #1
   d4e4e:	f1a7 0e30 	sub.w	lr, r7, #48	; 0x30
   d4e52:	f1be 0f09 	cmp.w	lr, #9
   d4e56:	b240      	sxtb	r0, r0
   d4e58:	d9f5      	bls.n	d4e46 <_ZN19ArduinoJson6101_00011parseNumberIfjEENS_12ParsedNumberIT_T0_EEPKc+0x9a>
    exponent_offset++;
    s++;
  }

  if (*s == '.') {
   d4e5a:	2f2e      	cmp	r7, #46	; 0x2e
   d4e5c:	d110      	bne.n	d4e80 <_ZN19ArduinoJson6101_00011parseNumberIfjEENS_12ParsedNumberIT_T0_EEPKc+0xd4>
    s++;
    while (isdigit(*s)) {
      if (mantissa < traits::mantissa_max / 10) {
   d4e5e:	f8df e0e4 	ldr.w	lr, [pc, #228]	; d4f44 <_ZN19ArduinoJson6101_00011parseNumberIfjEENS_12ParsedNumberIT_T0_EEPKc+0x198>
        mantissa = mantissa * 10 + uint8_t(*s - '0');
   d4e62:	270a      	movs	r7, #10
   d4e64:	460d      	mov	r5, r1
   d4e66:	3101      	adds	r1, #1
   d4e68:	782a      	ldrb	r2, [r5, #0]
   d4e6a:	3a30      	subs	r2, #48	; 0x30
   d4e6c:	b2d2      	uxtb	r2, r2
    s++;
  }

  if (*s == '.') {
    s++;
    while (isdigit(*s)) {
   d4e6e:	2a09      	cmp	r2, #9
   d4e70:	d806      	bhi.n	d4e80 <_ZN19ArduinoJson6101_00011parseNumberIfjEENS_12ParsedNumberIT_T0_EEPKc+0xd4>
      if (mantissa < traits::mantissa_max / 10) {
   d4e72:	4573      	cmp	r3, lr
   d4e74:	d8f6      	bhi.n	d4e64 <_ZN19ArduinoJson6101_00011parseNumberIfjEENS_12ParsedNumberIT_T0_EEPKc+0xb8>
        mantissa = mantissa * 10 + uint8_t(*s - '0');
        exponent_offset--;
   d4e76:	3801      	subs	r0, #1

  if (*s == '.') {
    s++;
    while (isdigit(*s)) {
      if (mantissa < traits::mantissa_max / 10) {
        mantissa = mantissa * 10 + uint8_t(*s - '0');
   d4e78:	fb07 2303 	mla	r3, r7, r3, r2
        exponent_offset--;
   d4e7c:	b240      	sxtb	r0, r0
    s++;
  }

  if (*s == '.') {
    s++;
    while (isdigit(*s)) {
   d4e7e:	e7f1      	b.n	d4e64 <_ZN19ArduinoJson6101_00011parseNumberIfjEENS_12ParsedNumberIT_T0_EEPKc+0xb8>
      s++;
    }
  }

  int exponent = 0;
  if (*s == 'e' || *s == 'E') {
   d4e80:	782a      	ldrb	r2, [r5, #0]
   d4e82:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   d4e86:	2a45      	cmp	r2, #69	; 0x45
   d4e88:	d134      	bne.n	d4ef4 <_ZN19ArduinoJson6101_00011parseNumberIfjEENS_12ParsedNumberIT_T0_EEPKc+0x148>
    s++;
    bool negative_exponent = false;
    if (*s == '-') {
   d4e8a:	786a      	ldrb	r2, [r5, #1]
   d4e8c:	2a2d      	cmp	r2, #45	; 0x2d
   d4e8e:	d102      	bne.n	d4e96 <_ZN19ArduinoJson6101_00011parseNumberIfjEENS_12ParsedNumberIT_T0_EEPKc+0xea>
      negative_exponent = true;
      s++;
   d4e90:	1ca9      	adds	r1, r5, #2
  int exponent = 0;
  if (*s == 'e' || *s == 'E') {
    s++;
    bool negative_exponent = false;
    if (*s == '-') {
      negative_exponent = true;
   d4e92:	2701      	movs	r7, #1
   d4e94:	e004      	b.n	d4ea0 <_ZN19ArduinoJson6101_00011parseNumberIfjEENS_12ParsedNumberIT_T0_EEPKc+0xf4>
      s++;
    } else if (*s == '+') {
   d4e96:	2a2b      	cmp	r2, #43	; 0x2b
    }
  }

  int exponent = 0;
  if (*s == 'e' || *s == 'E') {
    s++;
   d4e98:	bf14      	ite	ne
   d4e9a:	1c69      	addne	r1, r5, #1
    bool negative_exponent = false;
    if (*s == '-') {
      negative_exponent = true;
      s++;
    } else if (*s == '+') {
      s++;
   d4e9c:	1ca9      	addeq	r1, r5, #2
  }

  int exponent = 0;
  if (*s == 'e' || *s == 'E') {
    s++;
    bool negative_exponent = false;
   d4e9e:	2700      	movs	r7, #0
   d4ea0:	2200      	movs	r2, #0
    } else if (*s == '+') {
      s++;
    }

    while (isdigit(*s)) {
      exponent = exponent * 10 + (*s - '0');
   d4ea2:	f04f 0c0a 	mov.w	ip, #10
   d4ea6:	460d      	mov	r5, r1
      s++;
    } else if (*s == '+') {
      s++;
    }

    while (isdigit(*s)) {
   d4ea8:	f811 eb01 	ldrb.w	lr, [r1], #1
   d4eac:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   d4eb0:	fa5f f88e 	uxtb.w	r8, lr
   d4eb4:	f1b8 0f09 	cmp.w	r8, #9
   d4eb8:	d819      	bhi.n	d4eee <_ZN19ArduinoJson6101_00011parseNumberIfjEENS_12ParsedNumberIT_T0_EEPKc+0x142>
      exponent = exponent * 10 + (*s - '0');
   d4eba:	fb0c e202 	mla	r2, ip, r2, lr
      if (exponent + exponent_offset > traits::exponent_max) {
   d4ebe:	1885      	adds	r5, r0, r2
   d4ec0:	2d26      	cmp	r5, #38	; 0x26
   d4ec2:	ddf0      	ble.n	d4ea6 <_ZN19ArduinoJson6101_00011parseNumberIfjEENS_12ParsedNumberIT_T0_EEPKc+0xfa>
        if (negative_exponent)
   d4ec4:	b147      	cbz	r7, d4ed8 <_ZN19ArduinoJson6101_00011parseNumberIfjEENS_12ParsedNumberIT_T0_EEPKc+0x12c>
          return is_negative ? -0.0f : 0.0f;
   d4ec6:	ed9f 7a1b 	vldr	s14, [pc, #108]	; d4f34 <_ZN19ArduinoJson6101_00011parseNumberIfjEENS_12ParsedNumberIT_T0_EEPKc+0x188>
   d4eca:	eddf 7a1b 	vldr	s15, [pc, #108]	; d4f38 <_ZN19ArduinoJson6101_00011parseNumberIfjEENS_12ParsedNumberIT_T0_EEPKc+0x18c>
   d4ece:	2e00      	cmp	r6, #0
   d4ed0:	bf18      	it	ne
   d4ed2:	eef0 7a47 	vmovne.f32	s15, s14
   d4ed6:	e007      	b.n	d4ee8 <_ZN19ArduinoJson6101_00011parseNumberIfjEENS_12ParsedNumberIT_T0_EEPKc+0x13c>
        else
          return is_negative ? -traits::inf() : traits::inf();
   d4ed8:	ed9f 7a18 	vldr	s14, [pc, #96]	; d4f3c <_ZN19ArduinoJson6101_00011parseNumberIfjEENS_12ParsedNumberIT_T0_EEPKc+0x190>
   d4edc:	eddf 7a18 	vldr	s15, [pc, #96]	; d4f40 <_ZN19ArduinoJson6101_00011parseNumberIfjEENS_12ParsedNumberIT_T0_EEPKc+0x194>
   d4ee0:	2e00      	cmp	r6, #0
   d4ee2:	bf08      	it	eq
   d4ee4:	eef0 7a47 	vmoveq.f32	s15, s14
  ParsedNumber(TUInt value, bool is_negative)
      : uintValue(value),
        floatValue(TFloat(value)),
        _type(uint8_t(is_negative ? VALUE_IS_NEGATIVE_INTEGER
                                  : VALUE_IS_POSITIVE_INTEGER)) {}
  ParsedNumber(TFloat value) : floatValue(value), _type(VALUE_IS_FLOAT) {}
   d4ee8:	edc4 7a01 	vstr	s15, [r4, #4]
   d4eec:	e016      	b.n	d4f1c <_ZN19ArduinoJson6101_00011parseNumberIfjEENS_12ParsedNumberIT_T0_EEPKc+0x170>
        else
          return is_negative ? -traits::inf() : traits::inf();
      }
      s++;
    }
    if (negative_exponent) exponent = -exponent;
   d4eee:	b117      	cbz	r7, d4ef6 <_ZN19ArduinoJson6101_00011parseNumberIfjEENS_12ParsedNumberIT_T0_EEPKc+0x14a>
   d4ef0:	4252      	negs	r2, r2
   d4ef2:	e000      	b.n	d4ef6 <_ZN19ArduinoJson6101_00011parseNumberIfjEENS_12ParsedNumberIT_T0_EEPKc+0x14a>
      }
      s++;
    }
  }

  int exponent = 0;
   d4ef4:	2200      	movs	r2, #0
    if (negative_exponent) exponent = -exponent;
  }
  exponent += exponent_offset;

  // we should be at the end of the string, otherwise it's an error
  if (*s != '\0') return return_type();
   d4ef6:	7829      	ldrb	r1, [r5, #0]
   d4ef8:	b121      	cbz	r1, d4f04 <_ZN19ArduinoJson6101_00011parseNumberIfjEENS_12ParsedNumberIT_T0_EEPKc+0x158>

namespace ARDUINOJSON_NAMESPACE {

template <typename TFloat, typename TUInt>
struct ParsedNumber {
  ParsedNumber() : uintValue(0), floatValue(0), _type(VALUE_IS_NULL) {}
   d4efa:	2300      	movs	r3, #0
   d4efc:	2200      	movs	r2, #0
   d4efe:	6023      	str	r3, [r4, #0]
   d4f00:	6062      	str	r2, [r4, #4]
   d4f02:	e00c      	b.n	d4f1e <_ZN19ArduinoJson6101_00011parseNumberIfjEENS_12ParsedNumberIT_T0_EEPKc+0x172>
  exponent += exponent_offset;

  // we should be at the end of the string, otherwise it's an error
  if (*s != '\0') return return_type();

  TFloat result = traits::make_float(static_cast<TFloat>(mantissa), exponent);
   d4f04:	ee07 3a90 	vmov	s15, r3
   d4f08:	4410      	add	r0, r2
   d4f0a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
   d4f0e:	f7ff fc2b 	bl	d4768 <_ZN19ArduinoJson6101_00011FloatTraitsIfLj4EE10make_floatIiEEffT_>

  return is_negative ? -result : result;
   d4f12:	b10e      	cbz	r6, d4f18 <_ZN19ArduinoJson6101_00011parseNumberIfjEENS_12ParsedNumberIT_T0_EEPKc+0x16c>
   d4f14:	eeb1 0a40 	vneg.f32	s0, s0
  ParsedNumber(TUInt value, bool is_negative)
      : uintValue(value),
        floatValue(TFloat(value)),
        _type(uint8_t(is_negative ? VALUE_IS_NEGATIVE_INTEGER
                                  : VALUE_IS_POSITIVE_INTEGER)) {}
  ParsedNumber(TFloat value) : floatValue(value), _type(VALUE_IS_FLOAT) {}
   d4f18:	ed84 0a01 	vstr	s0, [r4, #4]
   d4f1c:	2308      	movs	r3, #8
   d4f1e:	7223      	strb	r3, [r4, #8]
  if (*s != '\0') return return_type();

  TFloat result = traits::make_float(static_cast<TFloat>(mantissa), exponent);

  return is_negative ? -result : result;
}
   d4f20:	4620      	mov	r0, r4
   d4f22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4f26:	bf00      	nop
   d4f28:	7fc00000 	.word	0x7fc00000
   d4f2c:	19999999 	.word	0x19999999
   d4f30:	007fffff 	.word	0x007fffff
   d4f34:	80000000 	.word	0x80000000
   d4f38:	00000000 	.word	0x00000000
   d4f3c:	7f800000 	.word	0x7f800000
   d4f40:	ff800000 	.word	0xff800000
   d4f44:	000ccccb 	.word	0x000ccccb

000d4f48 <_ZNK19ArduinoJson6101_00011VariantData10asIntegralIiEET_v>:
#include <string.h>  // for strcmp

namespace ARDUINOJSON_NAMESPACE {

template <typename T>
inline T VariantData::asIntegral() const {
   d4f48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  switch (type()) {
   d4f4a:	7a03      	ldrb	r3, [r0, #8]
   d4f4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   d4f50:	3b03      	subs	r3, #3
   d4f52:	2b05      	cmp	r3, #5
   d4f54:	d838      	bhi.n	d4fc8 <_ZNK19ArduinoJson6101_00011VariantData10asIntegralIiEET_v+0x80>
   d4f56:	e8df f003 	tbb	[pc, r3]
   d4f5a:	0707      	.short	0x0707
   d4f5c:	22050303 	.word	0x22050303
    case VALUE_IS_POSITIVE_INTEGER:
    case VALUE_IS_BOOLEAN:
      return convertPositiveInteger<T>(_content.asInteger);
   d4f60:	6800      	ldr	r0, [r0, #0]
   d4f62:	e014      	b.n	d4f8e <_ZNK19ArduinoJson6101_00011VariantData10asIntegralIiEET_v+0x46>
    case VALUE_IS_NEGATIVE_INTEGER:
      return convertNegativeInteger<T>(_content.asInteger);
   d4f64:	6800      	ldr	r0, [r0, #0]
   d4f66:	e00d      	b.n	d4f84 <_ZNK19ArduinoJson6101_00011VariantData10asIntegralIiEET_v+0x3c>
   d4f68:	6801      	ldr	r1, [r0, #0]
   d4f6a:	a801      	add	r0, sp, #4
   d4f6c:	f7ff ff1e 	bl	d4dac <_ZN19ArduinoJson6101_00011parseNumberIfjEENS_12ParsedNumberIT_T0_EEPKc>
                                  : VALUE_IS_POSITIVE_INTEGER)) {}
  ParsedNumber(TFloat value) : floatValue(value), _type(VALUE_IS_FLOAT) {}

  template <typename T>
  T as() const {
    switch (_type) {
   d4f70:	f89d 300c 	ldrb.w	r3, [sp, #12]
   d4f74:	9801      	ldr	r0, [sp, #4]
   d4f76:	2b07      	cmp	r3, #7
   d4f78:	d004      	beq.n	d4f84 <_ZNK19ArduinoJson6101_00011VariantData10asIntegralIiEET_v+0x3c>
   d4f7a:	2b08      	cmp	r3, #8
   d4f7c:	d00c      	beq.n	d4f98 <_ZNK19ArduinoJson6101_00011VariantData10asIntegralIiEET_v+0x50>
   d4f7e:	2b06      	cmp	r3, #6
   d4f80:	d122      	bne.n	d4fc8 <_ZNK19ArduinoJson6101_00011VariantData10asIntegralIiEET_v+0x80>
   d4f82:	e004      	b.n	d4f8e <_ZNK19ArduinoJson6101_00011VariantData10asIntegralIiEET_v+0x46>
  return canStorePositiveInteger<TOut>(value) ? TOut(value) : 0;
}

template <typename TOut, typename TIn>
TOut convertNegativeInteger(TIn value) {
  return canStoreNegativeInteger<TOut>(value) ? TOut(~value + 1) : 0;
   d4f84:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
   d4f88:	d81e      	bhi.n	d4fc8 <_ZNK19ArduinoJson6101_00011VariantData10asIntegralIiEET_v+0x80>
   d4f8a:	4240      	negs	r0, r0
   d4f8c:	e01d      	b.n	d4fca <_ZNK19ArduinoJson6101_00011VariantData10asIntegralIiEET_v+0x82>
  return false;
}

template <typename TOut, typename TIn>
TOut convertPositiveInteger(TIn value) {
  return canStorePositiveInteger<TOut>(value) ? TOut(value) : 0;
   d4f8e:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
   d4f92:	bf28      	it	cs
   d4f94:	2000      	movcs	r0, #0
   d4f96:	e018      	b.n	d4fca <_ZNK19ArduinoJson6101_00011VariantData10asIntegralIiEET_v+0x82>
      case VALUE_IS_NEGATIVE_INTEGER:
        return convertNegativeInteger<T>(uintValue);
      case VALUE_IS_POSITIVE_INTEGER:
        return convertPositiveInteger<T>(uintValue);
      case VALUE_IS_FLOAT:
        return convertFloat<T>(floatValue);
   d4f98:	eddd 7a02 	vldr	s15, [sp, #8]
   d4f9c:	e001      	b.n	d4fa2 <_ZNK19ArduinoJson6101_00011VariantData10asIntegralIiEET_v+0x5a>
    case VALUE_IS_LINKED_STRING:
    case VALUE_IS_OWNED_STRING:
      return parseInteger<T>(_content.asString);
    case VALUE_IS_FLOAT:
      return convertFloat<T>(_content.asFloat);
   d4f9e:	edd0 7a00 	vldr	s15, [r0]
typename enable_if<!is_floating_point<TOut>::value, TOut>::type convertFloat(
    TIn value) {
  return value >= numeric_limits<TOut>::lowest() &&
                 value <= numeric_limits<TOut>::highest()
             ? TOut(value)
             : 0;
   d4fa2:	ed9f 7a0b 	vldr	s14, [pc, #44]	; d4fd0 <_ZNK19ArduinoJson6101_00011VariantData10asIntegralIiEET_v+0x88>
   d4fa6:	eef4 7ac7 	vcmpe.f32	s15, s14
   d4faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4fae:	db0b      	blt.n	d4fc8 <_ZNK19ArduinoJson6101_00011VariantData10asIntegralIiEET_v+0x80>
   d4fb0:	ed9f 7a08 	vldr	s14, [pc, #32]	; d4fd4 <_ZNK19ArduinoJson6101_00011VariantData10asIntegralIiEET_v+0x8c>
   d4fb4:	eef4 7ac7 	vcmpe.f32	s15, s14
   d4fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4fbc:	d804      	bhi.n	d4fc8 <_ZNK19ArduinoJson6101_00011VariantData10asIntegralIiEET_v+0x80>
   d4fbe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   d4fc2:	ee17 0a90 	vmov	r0, s15
   d4fc6:	e000      	b.n	d4fca <_ZNK19ArduinoJson6101_00011VariantData10asIntegralIiEET_v+0x82>
  return false;
}

template <typename TOut, typename TIn>
TOut convertPositiveInteger(TIn value) {
  return canStorePositiveInteger<TOut>(value) ? TOut(value) : 0;
   d4fc8:	2000      	movs	r0, #0
    default:
      return 0;
  }
}
   d4fca:	b005      	add	sp, #20
   d4fcc:	f85d fb04 	ldr.w	pc, [sp], #4
   d4fd0:	cf000000 	.word	0xcf000000
   d4fd4:	4f000000 	.word	0x4f000000

000d4fd8 <_ZN19ArduinoJson6101_00013TextFormatterINS_19DynamicStringWriterI6StringEEE8writeRawEPKc>:

    // and dump it in the right order
    writeRaw(begin, end);
  }

  void writeRaw(const char *s) {
   d4fd8:	b538      	push	{r3, r4, r5, lr}
   d4fda:	4604      	mov	r4, r0
    _length += _writer.write(reinterpret_cast<const uint8_t *>(s), strlen(s));
   d4fdc:	4608      	mov	r0, r1

    // and dump it in the right order
    writeRaw(begin, end);
  }

  void writeRaw(const char *s) {
   d4fde:	460d      	mov	r5, r1
    _length += _writer.write(reinterpret_cast<const uint8_t *>(s), strlen(s));
   d4fe0:	f002 ff51 	bl	d7e86 <strlen>
   d4fe4:	4629      	mov	r1, r5
   d4fe6:	4602      	mov	r2, r0
   d4fe8:	6820      	ldr	r0, [r4, #0]
   d4fea:	f7ff f92d 	bl	d4248 <_ZN19ArduinoJson6101_00019DynamicStringWriterI6StringE5writeEPKhj>
   d4fee:	6863      	ldr	r3, [r4, #4]
   d4ff0:	4418      	add	r0, r3
   d4ff2:	6060      	str	r0, [r4, #4]
   d4ff4:	bd38      	pop	{r3, r4, r5, pc}

000d4ff6 <_ZN19ArduinoJson6101_00013TextFormatterINS_19DynamicStringWriterI6StringEEE8writeRawEc>:

  template <size_t N>
  void writeRaw(const char (&s)[N]) {
    _length += _writer.write(reinterpret_cast<const uint8_t *>(s), N - 1);
  }
  void writeRaw(char c) {
   d4ff6:	b510      	push	{r4, lr}
class DynamicStringWriter<String> {
 public:
  DynamicStringWriter(String &str) : _str(&str) {}

  size_t write(uint8_t c) {
    _str->operator+=(static_cast<char>(c));
   d4ff8:	6803      	ldr	r3, [r0, #0]
   d4ffa:	4604      	mov	r4, r0
   d4ffc:	6818      	ldr	r0, [r3, #0]
   d4ffe:	f001 fea9 	bl	d6d54 <_ZN6String6concatEc>
    _length += _writer.write(static_cast<uint8_t>(c));
   d5002:	6863      	ldr	r3, [r4, #4]
   d5004:	3301      	adds	r3, #1
   d5006:	6063      	str	r3, [r4, #4]
   d5008:	bd10      	pop	{r4, pc}
	...

000d500c <_ZN19ArduinoJson6101_00013TextFormatterINS_19DynamicStringWriterI6StringEEE11writeStringEPKc>:
      writeRaw("true");
    else
      writeRaw("false");
  }

  void writeString(const char *value) {
   d500c:	b570      	push	{r4, r5, r6, lr}
   d500e:	4605      	mov	r5, r0
    if (!value) {
   d5010:	460c      	mov	r4, r1
   d5012:	b919      	cbnz	r1, d501c <_ZN19ArduinoJson6101_00013TextFormatterINS_19DynamicStringWriterI6StringEEE11writeStringEPKc+0x10>
      writeRaw("null");
   d5014:	4911      	ldr	r1, [pc, #68]	; (d505c <_ZN19ArduinoJson6101_00013TextFormatterINS_19DynamicStringWriterI6StringEEE11writeStringEPKc+0x50>)
   d5016:	f7ff ffdf 	bl	d4fd8 <_ZN19ArduinoJson6101_00013TextFormatterINS_19DynamicStringWriterI6StringEEE8writeRawEPKc>
   d501a:	bd70      	pop	{r4, r5, r6, pc}
    } else {
      writeRaw('\"');
   d501c:	2122      	movs	r1, #34	; 0x22
   d501e:	f7ff ffea 	bl	d4ff6 <_ZN19ArduinoJson6101_00013TextFormatterINS_19DynamicStringWriterI6StringEEE8writeRawEc>
   d5022:	3c01      	subs	r4, #1
      while (*value) writeChar(*value++);
   d5024:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   d5028:	b171      	cbz	r1, d5048 <_ZN19ArduinoJson6101_00013TextFormatterINS_19DynamicStringWriterI6StringEEE11writeStringEPKc+0x3c>
   d502a:	4b0d      	ldr	r3, [pc, #52]	; (d5060 <_ZN19ArduinoJson6101_00013TextFormatterINS_19DynamicStringWriterI6StringEEE11writeStringEPKc+0x54>)
class EscapeSequence {
 public:
  // Optimized for code size on a 8-bit AVR
  static char escapeChar(char c) {
    const char *p = escapeTable(false);
    while (p[0] && p[1] != c) {
   d502c:	f813 6c02 	ldrb.w	r6, [r3, #-2]
   d5030:	b17e      	cbz	r6, d5052 <_ZN19ArduinoJson6101_00013TextFormatterINS_19DynamicStringWriterI6StringEEE11writeStringEPKc+0x46>
   d5032:	3302      	adds	r3, #2
   d5034:	f813 2c03 	ldrb.w	r2, [r3, #-3]
   d5038:	428a      	cmp	r2, r1
   d503a:	d1f7      	bne.n	d502c <_ZN19ArduinoJson6101_00013TextFormatterINS_19DynamicStringWriterI6StringEEE11writeStringEPKc+0x20>
  }

  void writeChar(char c) {
    char specialChar = EscapeSequence::escapeChar(c);
    if (specialChar) {
      writeRaw('\\');
   d503c:	215c      	movs	r1, #92	; 0x5c
   d503e:	4628      	mov	r0, r5
   d5040:	f7ff ffd9 	bl	d4ff6 <_ZN19ArduinoJson6101_00013TextFormatterINS_19DynamicStringWriterI6StringEEE8writeRawEc>
      writeRaw(specialChar);
   d5044:	4631      	mov	r1, r6
   d5046:	e004      	b.n	d5052 <_ZN19ArduinoJson6101_00013TextFormatterINS_19DynamicStringWriterI6StringEEE11writeStringEPKc+0x46>
    if (!value) {
      writeRaw("null");
    } else {
      writeRaw('\"');
      while (*value) writeChar(*value++);
      writeRaw('\"');
   d5048:	2122      	movs	r1, #34	; 0x22
   d504a:	4628      	mov	r0, r5
   d504c:	f7ff ffd3 	bl	d4ff6 <_ZN19ArduinoJson6101_00013TextFormatterINS_19DynamicStringWriterI6StringEEE8writeRawEc>
    }
  }
   d5050:	bd70      	pop	{r4, r5, r6, pc}
    char specialChar = EscapeSequence::escapeChar(c);
    if (specialChar) {
      writeRaw('\\');
      writeRaw(specialChar);
    } else {
      writeRaw(c);
   d5052:	4628      	mov	r0, r5
   d5054:	f7ff ffcf 	bl	d4ff6 <_ZN19ArduinoJson6101_00013TextFormatterINS_19DynamicStringWriterI6StringEEE8writeRawEc>
   d5058:	e7e4      	b.n	d5024 <_ZN19ArduinoJson6101_00013TextFormatterINS_19DynamicStringWriterI6StringEEE11writeStringEPKc+0x18>
   d505a:	bf00      	nop
   d505c:	000d7ecf 	.word	0x000d7ecf
   d5060:	000d7ec2 	.word	0x000d7ec2
   d5064:	00000000 	.word	0x00000000

000d5068 <_ZN19ArduinoJson6101_00010FloatPartsIfEC1Ef>:
  uint32_t integral;
  uint32_t decimal;
  int16_t exponent;
  int8_t decimalPlaces;

  FloatParts(TFloat value) {
   d5068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int16_t powersOf10 = 0;

    int8_t index = sizeof(TFloat) == 8 ? 8 : 5;
    int bit = 1 << index;

    if (value >= ARDUINOJSON_POSITIVE_EXPONENTIATION_THRESHOLD) {
   d506a:	eddf 7a55 	vldr	s15, [pc, #340]	; d51c0 <_ZN19ArduinoJson6101_00010FloatPartsIfEC1Ef+0x158>
   d506e:	eeb4 0ae7 	vcmpe.f32	s0, s15
  int16_t exponent;
  int8_t decimalPlaces;

  FloatParts(TFloat value) {
    uint32_t maxDecimalPart = sizeof(TFloat) >= 8 ? 1000000000 : 1000000;
    decimalPlaces = sizeof(TFloat) >= 8 ? 9 : 6;
   d5072:	2306      	movs	r3, #6
    int16_t powersOf10 = 0;

    int8_t index = sizeof(TFloat) == 8 ? 8 : 5;
    int bit = 1 << index;

    if (value >= ARDUINOJSON_POSITIVE_EXPONENTIATION_THRESHOLD) {
   d5074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  uint32_t integral;
  uint32_t decimal;
  int16_t exponent;
  int8_t decimalPlaces;

  FloatParts(TFloat value) {
   d5078:	ed2d 8b02 	vpush	{d8}
   d507c:	4604      	mov	r4, r0
   d507e:	eeb0 8a40 	vmov.f32	s16, s0
    uint32_t maxDecimalPart = sizeof(TFloat) >= 8 ? 1000000000 : 1000000;
    decimalPlaces = sizeof(TFloat) >= 8 ? 9 : 6;
   d5082:	7283      	strb	r3, [r0, #10]
    int16_t powersOf10 = 0;

    int8_t index = sizeof(TFloat) == 8 ? 8 : 5;
    int bit = 1 << index;

    if (value >= ARDUINOJSON_POSITIVE_EXPONENTIATION_THRESHOLD) {
   d5084:	db1c      	blt.n	d50c0 <_ZN19ArduinoJson6101_00010FloatPartsIfEC1Ef+0x58>
   d5086:	4b4f      	ldr	r3, [pc, #316]	; (d51c4 <_ZN19ArduinoJson6101_00010FloatPartsIfEC1Ef+0x15c>)
   d5088:	4a4f      	ldr	r2, [pc, #316]	; (d51c8 <_ZN19ArduinoJson6101_00010FloatPartsIfEC1Ef+0x160>)
   d508a:	f1a3 0118 	sub.w	r1, r3, #24
   d508e:	2500      	movs	r5, #0
   d5090:	2720      	movs	r7, #32
      for (; index >= 0; index--) {
        if (value >= traits::positiveBinaryPowerOfTen(index)) {
   d5092:	ed72 7a01 	vldmdb	r2!, {s15}
   d5096:	eef4 7ac8 	vcmpe.f32	s15, s16
   d509a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
          value *= traits::negativeBinaryPowerOfTen(index);
   d509e:	bf9c      	itt	ls
   d50a0:	edd3 7a05 	vldrls	s15, [r3, #20]
          powersOf10 = int16_t(powersOf10 + bit);
   d50a4:	19ed      	addls	r5, r5, r7
   d50a6:	f1a3 0304 	sub.w	r3, r3, #4
    int bit = 1 << index;

    if (value >= ARDUINOJSON_POSITIVE_EXPONENTIATION_THRESHOLD) {
      for (; index >= 0; index--) {
        if (value >= traits::positiveBinaryPowerOfTen(index)) {
          value *= traits::negativeBinaryPowerOfTen(index);
   d50aa:	bf9c      	itt	ls
   d50ac:	ee28 8a27 	vmulls.f32	s16, s16, s15
          powersOf10 = int16_t(powersOf10 + bit);
   d50b0:	b22d      	sxthls	r5, r5

    int8_t index = sizeof(TFloat) == 8 ? 8 : 5;
    int bit = 1 << index;

    if (value >= ARDUINOJSON_POSITIVE_EXPONENTIATION_THRESHOLD) {
      for (; index >= 0; index--) {
   d50b2:	4299      	cmp	r1, r3
        if (value >= traits::positiveBinaryPowerOfTen(index)) {
          value *= traits::negativeBinaryPowerOfTen(index);
          powersOf10 = int16_t(powersOf10 + bit);
        }
        bit >>= 1;
   d50b4:	ea4f 0767 	mov.w	r7, r7, asr #1

    int8_t index = sizeof(TFloat) == 8 ? 8 : 5;
    int bit = 1 << index;

    if (value >= ARDUINOJSON_POSITIVE_EXPONENTIATION_THRESHOLD) {
      for (; index >= 0; index--) {
   d50b8:	d1eb      	bne.n	d5092 <_ZN19ArduinoJson6101_00010FloatPartsIfEC1Ef+0x2a>
   d50ba:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   d50be:	e002      	b.n	d50c6 <_ZN19ArduinoJson6101_00010FloatPartsIfEC1Ef+0x5e>
  static int16_t normalize(TFloat& value) {
    typedef FloatTraits<TFloat> traits;
    int16_t powersOf10 = 0;

    int8_t index = sizeof(TFloat) == 8 ? 8 : 5;
    int bit = 1 << index;
   d50c0:	2720      	movs	r7, #32

  static int16_t normalize(TFloat& value) {
    typedef FloatTraits<TFloat> traits;
    int16_t powersOf10 = 0;

    int8_t index = sizeof(TFloat) == 8 ? 8 : 5;
   d50c2:	2605      	movs	r6, #5
    }
  }

  static int16_t normalize(TFloat& value) {
    typedef FloatTraits<TFloat> traits;
    int16_t powersOf10 = 0;
   d50c4:	2500      	movs	r5, #0
        }
        bit >>= 1;
      }
    }

    if (value > 0 && value <= ARDUINOJSON_NEGATIVE_EXPONENTIATION_THRESHOLD) {
   d50c6:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   d50ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d50ce:	dd21      	ble.n	d5114 <_ZN19ArduinoJson6101_00010FloatPartsIfEC1Ef+0xac>
   d50d0:	ee18 0a10 	vmov	r0, s16
   d50d4:	f002 fb22 	bl	d771c <__aeabi_f2d>
   d50d8:	a337      	add	r3, pc, #220	; (adr r3, d51b8 <_ZN19ArduinoJson6101_00010FloatPartsIfEC1Ef+0x150>)
   d50da:	e9d3 2300 	ldrd	r2, r3, [r3]
   d50de:	f002 fded 	bl	d7cbc <__aeabi_dcmple>
   d50e2:	b1b8      	cbz	r0, d5114 <_ZN19ArduinoJson6101_00010FloatPartsIfEC1Ef+0xac>
    return factors[index];
  }

  static T negativeBinaryPowerOfTenPlusOne(int index) {
    static T factors[] = {1e0f, 1e-1f, 1e-3f, 1e-7f, 1e-15f, 1e-31f};
    return factors[index];
   d50e4:	4a39      	ldr	r2, [pc, #228]	; (d51cc <_ZN19ArduinoJson6101_00010FloatPartsIfEC1Ef+0x164>)
    return m;
  }

  static T positiveBinaryPowerOfTen(int index) {
    static T factors[] = {1e1f, 1e2f, 1e4f, 1e8f, 1e16f, 1e32f};
    return factors[index];
   d50e6:	493a      	ldr	r1, [pc, #232]	; (d51d0 <_ZN19ArduinoJson6101_00010FloatPartsIfEC1Ef+0x168>)
      for (; index >= 0; index--) {
   d50e8:	1c73      	adds	r3, r6, #1
   d50ea:	d013      	beq.n	d5114 <_ZN19ArduinoJson6101_00010FloatPartsIfEC1Ef+0xac>
    return factors[index];
  }

  static T negativeBinaryPowerOfTenPlusOne(int index) {
    static T factors[] = {1e0f, 1e-1f, 1e-3f, 1e-7f, 1e-15f, 1e-31f};
    return factors[index];
   d50ec:	00b3      	lsls	r3, r6, #2
   d50ee:	18d0      	adds	r0, r2, r3
        if (value < traits::negativeBinaryPowerOfTenPlusOne(index)) {
   d50f0:	edd0 7a00 	vldr	s15, [r0]
   d50f4:	eef4 7ac8 	vcmpe.f32	s15, s16
   d50f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d50fc:	dd06      	ble.n	d510c <_ZN19ArduinoJson6101_00010FloatPartsIfEC1Ef+0xa4>
    return m;
  }

  static T positiveBinaryPowerOfTen(int index) {
    static T factors[] = {1e1f, 1e2f, 1e4f, 1e8f, 1e16f, 1e32f};
    return factors[index];
   d50fe:	440b      	add	r3, r1
          value *= traits::positiveBinaryPowerOfTen(index);
   d5100:	edd3 7a00 	vldr	s15, [r3]
          powersOf10 = int16_t(powersOf10 - bit);
   d5104:	1bed      	subs	r5, r5, r7
    }

    if (value > 0 && value <= ARDUINOJSON_NEGATIVE_EXPONENTIATION_THRESHOLD) {
      for (; index >= 0; index--) {
        if (value < traits::negativeBinaryPowerOfTenPlusOne(index)) {
          value *= traits::positiveBinaryPowerOfTen(index);
   d5106:	ee28 8a27 	vmul.f32	s16, s16, s15
          powersOf10 = int16_t(powersOf10 - bit);
   d510a:	b22d      	sxth	r5, r5
   d510c:	3e01      	subs	r6, #1
        }
        bit >>= 1;
   d510e:	107f      	asrs	r7, r7, #1
   d5110:	b276      	sxtb	r6, r6
   d5112:	e7e9      	b.n	d50e8 <_ZN19ArduinoJson6101_00010FloatPartsIfEC1Ef+0x80>
    uint32_t maxDecimalPart = sizeof(TFloat) >= 8 ? 1000000000 : 1000000;
    decimalPlaces = sizeof(TFloat) >= 8 ? 9 : 6;

    exponent = normalize(value);

    integral = uint32_t(value);
   d5114:	eefc 7ac8 	vcvt.u32.f32	s15, s16
  uint32_t decimal;
  int16_t exponent;
  int8_t decimalPlaces;

  FloatParts(TFloat value) {
    uint32_t maxDecimalPart = sizeof(TFloat) >= 8 ? 1000000000 : 1000000;
   d5118:	492e      	ldr	r1, [pc, #184]	; (d51d4 <_ZN19ArduinoJson6101_00010FloatPartsIfEC1Ef+0x16c>)
    decimalPlaces = sizeof(TFloat) >= 8 ? 9 : 6;

    exponent = normalize(value);
   d511a:	8125      	strh	r5, [r4, #8]

    integral = uint32_t(value);
   d511c:	ee17 3a90 	vmov	r3, s15
    // reduce number of decimal places by the number of integral places
    for (uint32_t tmp = integral; tmp >= 10; tmp /= 10) {
   d5120:	ee17 2a90 	vmov	r2, s15
    uint32_t maxDecimalPart = sizeof(TFloat) >= 8 ? 1000000000 : 1000000;
    decimalPlaces = sizeof(TFloat) >= 8 ? 9 : 6;

    exponent = normalize(value);

    integral = uint32_t(value);
   d5124:	edc4 7a00 	vstr	s15, [r4]
    // reduce number of decimal places by the number of integral places
    for (uint32_t tmp = integral; tmp >= 10; tmp /= 10) {
      maxDecimalPart /= 10;
   d5128:	260a      	movs	r6, #10

    exponent = normalize(value);

    integral = uint32_t(value);
    // reduce number of decimal places by the number of integral places
    for (uint32_t tmp = integral; tmp >= 10; tmp /= 10) {
   d512a:	2a09      	cmp	r2, #9
   d512c:	d907      	bls.n	d513e <_ZN19ArduinoJson6101_00010FloatPartsIfEC1Ef+0xd6>
      maxDecimalPart /= 10;
   d512e:	fbb1 f1f6 	udiv	r1, r1, r6

    exponent = normalize(value);

    integral = uint32_t(value);
    // reduce number of decimal places by the number of integral places
    for (uint32_t tmp = integral; tmp >= 10; tmp /= 10) {
   d5132:	fbb2 f2f6 	udiv	r2, r2, r6
      maxDecimalPart /= 10;
      decimalPlaces--;
   d5136:	7aa0      	ldrb	r0, [r4, #10]
   d5138:	3801      	subs	r0, #1
   d513a:	72a0      	strb	r0, [r4, #10]

    exponent = normalize(value);

    integral = uint32_t(value);
    // reduce number of decimal places by the number of integral places
    for (uint32_t tmp = integral; tmp >= 10; tmp /= 10) {
   d513c:	e7f5      	b.n	d512a <_ZN19ArduinoJson6101_00010FloatPartsIfEC1Ef+0xc2>
      maxDecimalPart /= 10;
      decimalPlaces--;
    }

    TFloat remainder = (value - TFloat(integral)) * TFloat(maxDecimalPart);
   d513e:	ee07 3a90 	vmov	s15, r3
   d5142:	eeb8 0a67 	vcvt.f32.u32	s0, s15
   d5146:	ee07 1a90 	vmov	s15, r1
   d514a:	ee38 8a40 	vsub.f32	s16, s16, s0
   d514e:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
   d5152:	ee28 8a00 	vmul.f32	s16, s16, s0

    decimal = uint32_t(remainder);
   d5156:	eefc 7ac8 	vcvt.u32.f32	s15, s16
    remainder = remainder - TFloat(decimal);

    // rounding:
    // increment by 1 if remainder >= 0.5
    decimal += uint32_t(remainder * 2);
   d515a:	eeb8 0a67 	vcvt.f32.u32	s0, s15
   d515e:	ee17 0a90 	vmov	r0, s15
   d5162:	ee38 8a40 	vsub.f32	s16, s16, s0
   d5166:	ee38 8a08 	vadd.f32	s16, s16, s16
   d516a:	eebc 8ac8 	vcvt.u32.f32	s16, s16
   d516e:	ee18 2a10 	vmov	r2, s16
   d5172:	4402      	add	r2, r0
    if (decimal >= maxDecimalPart) {
   d5174:	4291      	cmp	r1, r2
   d5176:	d901      	bls.n	d517c <_ZN19ArduinoJson6101_00010FloatPartsIfEC1Ef+0x114>
    decimal = uint32_t(remainder);
    remainder = remainder - TFloat(decimal);

    // rounding:
    // increment by 1 if remainder >= 0.5
    decimal += uint32_t(remainder * 2);
   d5178:	6062      	str	r2, [r4, #4]
   d517a:	e00a      	b.n	d5192 <_ZN19ArduinoJson6101_00010FloatPartsIfEC1Ef+0x12a>
    if (decimal >= maxDecimalPart) {
      decimal = 0;
   d517c:	2200      	movs	r2, #0
      integral++;
   d517e:	3301      	adds	r3, #1

    // rounding:
    // increment by 1 if remainder >= 0.5
    decimal += uint32_t(remainder * 2);
    if (decimal >= maxDecimalPart) {
      decimal = 0;
   d5180:	6062      	str	r2, [r4, #4]
      integral++;
   d5182:	6023      	str	r3, [r4, #0]
      if (exponent && integral >= 10) {
   d5184:	b12d      	cbz	r5, d5192 <_ZN19ArduinoJson6101_00010FloatPartsIfEC1Ef+0x12a>
   d5186:	2b09      	cmp	r3, #9
        exponent++;
   d5188:	bf81      	itttt	hi
   d518a:	3501      	addhi	r5, #1
        integral = 1;
   d518c:	2301      	movhi	r3, #1
    decimal += uint32_t(remainder * 2);
    if (decimal >= maxDecimalPart) {
      decimal = 0;
      integral++;
      if (exponent && integral >= 10) {
        exponent++;
   d518e:	8125      	strhhi	r5, [r4, #8]
        integral = 1;
   d5190:	6023      	strhi	r3, [r4, #0]
      }
    }

    // remove trailing zeros
    while (decimal % 10 == 0 && decimalPlaces > 0) {
   d5192:	210a      	movs	r1, #10
   d5194:	6863      	ldr	r3, [r4, #4]
   d5196:	fbb3 f2f1 	udiv	r2, r3, r1
   d519a:	fb01 3312 	mls	r3, r1, r2, r3
   d519e:	b93b      	cbnz	r3, d51b0 <_ZN19ArduinoJson6101_00010FloatPartsIfEC1Ef+0x148>
   d51a0:	f994 300a 	ldrsb.w	r3, [r4, #10]
   d51a4:	2b00      	cmp	r3, #0
   d51a6:	dd03      	ble.n	d51b0 <_ZN19ArduinoJson6101_00010FloatPartsIfEC1Ef+0x148>
      decimal /= 10;
      decimalPlaces--;
   d51a8:	3b01      	subs	r3, #1
      }
    }

    // remove trailing zeros
    while (decimal % 10 == 0 && decimalPlaces > 0) {
      decimal /= 10;
   d51aa:	6062      	str	r2, [r4, #4]
      decimalPlaces--;
   d51ac:	72a3      	strb	r3, [r4, #10]
        integral = 1;
      }
    }

    // remove trailing zeros
    while (decimal % 10 == 0 && decimalPlaces > 0) {
   d51ae:	e7f1      	b.n	d5194 <_ZN19ArduinoJson6101_00010FloatPartsIfEC1Ef+0x12c>
      decimal /= 10;
      decimalPlaces--;
    }
  }
   d51b0:	ecbd 8b02 	vpop	{d8}
   d51b4:	4620      	mov	r0, r4
   d51b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d51b8:	88e368f1 	.word	0x88e368f1
   d51bc:	3ee4f8b5 	.word	0x3ee4f8b5
   d51c0:	4b189680 	.word	0x4b189680
   d51c4:	2003e370 	.word	0x2003e370
   d51c8:	2003e3a0 	.word	0x2003e3a0
   d51cc:	2003e358 	.word	0x2003e358
   d51d0:	2003e388 	.word	0x2003e388
   d51d4:	000f4240 	.word	0x000f4240

000d51d8 <_ZN19ArduinoJson6101_00013TextFormatterINS_19DynamicStringWriterI6StringEEE8writeRawEPKcS6_>:

  void writeRaw(const char *s, size_t n) {
    _length += _writer.write(reinterpret_cast<const uint8_t *>(s), n);
  }

  void writeRaw(const char *begin, const char *end) {
   d51d8:	b510      	push	{r4, lr}
    _length += _writer.write(reinterpret_cast<const uint8_t *>(begin),
   d51da:	1a52      	subs	r2, r2, r1

  void writeRaw(const char *s, size_t n) {
    _length += _writer.write(reinterpret_cast<const uint8_t *>(s), n);
  }

  void writeRaw(const char *begin, const char *end) {
   d51dc:	4604      	mov	r4, r0
    _length += _writer.write(reinterpret_cast<const uint8_t *>(begin),
   d51de:	6800      	ldr	r0, [r0, #0]
   d51e0:	f7ff f832 	bl	d4248 <_ZN19ArduinoJson6101_00019DynamicStringWriterI6StringE5writeEPKhj>
   d51e4:	6863      	ldr	r3, [r4, #4]
   d51e6:	4418      	add	r0, r3
   d51e8:	6060      	str	r0, [r4, #4]
   d51ea:	bd10      	pop	{r4, pc}

000d51ec <_ZN19ArduinoJson6101_00013TextFormatterINS_19DynamicStringWriterI6StringEEE20writePositiveIntegerImEEvT_>:
    writeRaw('-');
    writePositiveInteger(value);
  }

  template <typename T>
  void writePositiveInteger(T value) {
   d51ec:	b530      	push	{r4, r5, lr}
   d51ee:	b087      	sub	sp, #28
   d51f0:	460b      	mov	r3, r1
    char buffer[22];
    char *end = buffer + sizeof(buffer);
    char *begin = end;
   d51f2:	f10d 0116 	add.w	r1, sp, #22
   d51f6:	460a      	mov	r2, r1

    // write the string in reverse order
    do {
      *--begin = char(value % 10 + '0');
   d51f8:	250a      	movs	r5, #10
   d51fa:	fbb3 f4f5 	udiv	r4, r3, r5
   d51fe:	fb05 3314 	mls	r3, r5, r4, r3
   d5202:	3330      	adds	r3, #48	; 0x30
   d5204:	f801 3d01 	strb.w	r3, [r1, #-1]!
    char buffer[22];
    char *end = buffer + sizeof(buffer);
    char *begin = end;

    // write the string in reverse order
    do {
   d5208:	4623      	mov	r3, r4
   d520a:	2c00      	cmp	r4, #0
   d520c:	d1f5      	bne.n	d51fa <_ZN19ArduinoJson6101_00013TextFormatterINS_19DynamicStringWriterI6StringEEE20writePositiveIntegerImEEvT_+0xe>
      *--begin = char(value % 10 + '0');
      value = T(value / 10);
    } while (value);

    // and dump it in the right order
    writeRaw(begin, end);
   d520e:	f7ff ffe3 	bl	d51d8 <_ZN19ArduinoJson6101_00013TextFormatterINS_19DynamicStringWriterI6StringEEE8writeRawEPKcS6_>
  }
   d5212:	b007      	add	sp, #28
   d5214:	bd30      	pop	{r4, r5, pc}
	...

000d5218 <_ZN19ArduinoJson6101_00013TextFormatterINS_19DynamicStringWriterI6StringEEE10writeFloatIfEEvT_>:
      writeRaw(c);
    }
  }

  template <typename T>
  void writeFloat(T value) {
   d5218:	b5f0      	push	{r4, r5, r6, r7, lr}
   d521a:	ed2d 8b02 	vpush	{d8}
    if (isnan(value)) return writeRaw("NaN");
   d521e:	eeb4 0a40 	vcmp.f32	s0, s0
   d5222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      writeRaw(c);
    }
  }

  template <typename T>
  void writeFloat(T value) {
   d5226:	b08b      	sub	sp, #44	; 0x2c
   d5228:	4604      	mov	r4, r0
   d522a:	eeb0 8a40 	vmov.f32	s16, s0
    if (isnan(value)) return writeRaw("NaN");
   d522e:	d701      	bvc.n	d5234 <_ZN19ArduinoJson6101_00013TextFormatterINS_19DynamicStringWriterI6StringEEE10writeFloatIfEEvT_+0x1c>
   d5230:	493d      	ldr	r1, [pc, #244]	; (d5328 <_ZN19ArduinoJson6101_00013TextFormatterINS_19DynamicStringWriterI6StringEEE10writeFloatIfEEvT_+0x110>)
   d5232:	e014      	b.n	d525e <_ZN19ArduinoJson6101_00013TextFormatterINS_19DynamicStringWriterI6StringEEE10writeFloatIfEEvT_+0x46>

    if (value < 0.0) {
   d5234:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   d5238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d523c:	d504      	bpl.n	d5248 <_ZN19ArduinoJson6101_00013TextFormatterINS_19DynamicStringWriterI6StringEEE10writeFloatIfEEvT_+0x30>
      writeRaw('-');
   d523e:	212d      	movs	r1, #45	; 0x2d
   d5240:	f7ff fed9 	bl	d4ff6 <_ZN19ArduinoJson6101_00013TextFormatterINS_19DynamicStringWriterI6StringEEE8writeRawEc>
      value = -value;
   d5244:	eeb1 8a48 	vneg.f32	s16, s16
    }

    if (isinf(value)) return writeRaw("Infinity");
   d5248:	ed9f 7a38 	vldr	s14, [pc, #224]	; d532c <_ZN19ArduinoJson6101_00013TextFormatterINS_19DynamicStringWriterI6StringEEE10writeFloatIfEEvT_+0x114>
   d524c:	eef0 7ac8 	vabs.f32	s15, s16
   d5250:	eef4 7a47 	vcmp.f32	s15, s14
   d5254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d5258:	dd04      	ble.n	d5264 <_ZN19ArduinoJson6101_00013TextFormatterINS_19DynamicStringWriterI6StringEEE10writeFloatIfEEvT_+0x4c>
   d525a:	4935      	ldr	r1, [pc, #212]	; (d5330 <_ZN19ArduinoJson6101_00013TextFormatterINS_19DynamicStringWriterI6StringEEE10writeFloatIfEEvT_+0x118>)
   d525c:	4620      	mov	r0, r4
   d525e:	f7ff febb 	bl	d4fd8 <_ZN19ArduinoJson6101_00013TextFormatterINS_19DynamicStringWriterI6StringEEE8writeRawEPKc>
   d5262:	e05c      	b.n	d531e <_ZN19ArduinoJson6101_00013TextFormatterINS_19DynamicStringWriterI6StringEEE10writeFloatIfEEvT_+0x106>

    FloatParts<T> parts(value);
   d5264:	eeb0 0a48 	vmov.f32	s0, s16
   d5268:	a801      	add	r0, sp, #4
   d526a:	f7ff fefd 	bl	d5068 <_ZN19ArduinoJson6101_00010FloatPartsIfEC1Ef>

    writePositiveInteger(parts.integral);
   d526e:	9901      	ldr	r1, [sp, #4]
   d5270:	4620      	mov	r0, r4
   d5272:	f7ff ffbb 	bl	d51ec <_ZN19ArduinoJson6101_00013TextFormatterINS_19DynamicStringWriterI6StringEEE20writePositiveIntegerImEEvT_>
    if (parts.decimalPlaces) writeDecimals(parts.decimal, parts.decimalPlaces);
   d5276:	f99d 100e 	ldrsb.w	r1, [sp, #14]
   d527a:	b1c9      	cbz	r1, d52b0 <_ZN19ArduinoJson6101_00013TextFormatterINS_19DynamicStringWriterI6StringEEE10writeFloatIfEEvT_+0x98>

  void writeDecimals(uint32_t value, int8_t width) {
    // buffer should be big enough for all digits and the dot
    char buffer[16];
    char *end = buffer + sizeof(buffer);
    char *begin = end;
   d527c:	ad08      	add	r5, sp, #32
    if (isinf(value)) return writeRaw("Infinity");

    FloatParts<T> parts(value);

    writePositiveInteger(parts.integral);
    if (parts.decimalPlaces) writeDecimals(parts.decimal, parts.decimalPlaces);
   d527e:	9b02      	ldr	r3, [sp, #8]
   d5280:	4608      	mov	r0, r1
   d5282:	462a      	mov	r2, r5
    char *end = buffer + sizeof(buffer);
    char *begin = end;

    // write the string in reverse order
    while (width--) {
      *--begin = char(value % 10 + '0');
   d5284:	270a      	movs	r7, #10
   d5286:	3801      	subs	r0, #1
   d5288:	b240      	sxtb	r0, r0
    char buffer[16];
    char *end = buffer + sizeof(buffer);
    char *begin = end;

    // write the string in reverse order
    while (width--) {
   d528a:	1c46      	adds	r6, r0, #1
   d528c:	d008      	beq.n	d52a0 <_ZN19ArduinoJson6101_00013TextFormatterINS_19DynamicStringWriterI6StringEEE10writeFloatIfEEvT_+0x88>
      *--begin = char(value % 10 + '0');
   d528e:	fbb3 f6f7 	udiv	r6, r3, r7
   d5292:	fb07 3316 	mls	r3, r7, r6, r3
   d5296:	3330      	adds	r3, #48	; 0x30
   d5298:	f805 3d01 	strb.w	r3, [r5, #-1]!
      value /= 10;
   d529c:	4633      	mov	r3, r6
   d529e:	e7f2      	b.n	d5286 <_ZN19ArduinoJson6101_00013TextFormatterINS_19DynamicStringWriterI6StringEEE10writeFloatIfEEvT_+0x6e>
   d52a0:	b2c9      	uxtb	r1, r1
    }
    *--begin = '.';
   d52a2:	1a51      	subs	r1, r2, r1
   d52a4:	232e      	movs	r3, #46	; 0x2e
   d52a6:	f801 3d01 	strb.w	r3, [r1, #-1]!

    // and dump it in the right order
    writeRaw(begin, end);
   d52aa:	4620      	mov	r0, r4
   d52ac:	f7ff ff94 	bl	d51d8 <_ZN19ArduinoJson6101_00013TextFormatterINS_19DynamicStringWriterI6StringEEE8writeRawEPKcS6_>
    FloatParts<T> parts(value);

    writePositiveInteger(parts.integral);
    if (parts.decimalPlaces) writeDecimals(parts.decimal, parts.decimalPlaces);

    if (parts.exponent < 0) {
   d52b0:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
   d52b4:	2b00      	cmp	r3, #0
   d52b6:	da17      	bge.n	d52e8 <_ZN19ArduinoJson6101_00013TextFormatterINS_19DynamicStringWriterI6StringEEE10writeFloatIfEEvT_+0xd0>
      writeRaw("e-");
   d52b8:	491e      	ldr	r1, [pc, #120]	; (d5334 <_ZN19ArduinoJson6101_00013TextFormatterINS_19DynamicStringWriterI6StringEEE10writeFloatIfEEvT_+0x11c>)
   d52ba:	4620      	mov	r0, r4
   d52bc:	f7ff fe8c 	bl	d4fd8 <_ZN19ArduinoJson6101_00013TextFormatterINS_19DynamicStringWriterI6StringEEE8writeRawEPKc>
      writePositiveInteger(-parts.exponent);
   d52c0:	f9bd 300c 	ldrsh.w	r3, [sp, #12]

  template <typename T>
  void writePositiveInteger(T value) {
    char buffer[22];
    char *end = buffer + sizeof(buffer);
    char *begin = end;
   d52c4:	f10d 0126 	add.w	r1, sp, #38	; 0x26
    writePositiveInteger(parts.integral);
    if (parts.decimalPlaces) writeDecimals(parts.decimal, parts.decimalPlaces);

    if (parts.exponent < 0) {
      writeRaw("e-");
      writePositiveInteger(-parts.exponent);
   d52c8:	425b      	negs	r3, r3
   d52ca:	460a      	mov	r2, r1
    char *end = buffer + sizeof(buffer);
    char *begin = end;

    // write the string in reverse order
    do {
      *--begin = char(value % 10 + '0');
   d52cc:	250a      	movs	r5, #10
   d52ce:	fb93 f0f5 	sdiv	r0, r3, r5
   d52d2:	fb05 3310 	mls	r3, r5, r0, r3
   d52d6:	3330      	adds	r3, #48	; 0x30
   d52d8:	f801 3d01 	strb.w	r3, [r1, #-1]!
    char buffer[22];
    char *end = buffer + sizeof(buffer);
    char *begin = end;

    // write the string in reverse order
    do {
   d52dc:	4603      	mov	r3, r0
   d52de:	2800      	cmp	r0, #0
   d52e0:	d1f5      	bne.n	d52ce <_ZN19ArduinoJson6101_00013TextFormatterINS_19DynamicStringWriterI6StringEEE10writeFloatIfEEvT_+0xb6>
      *--begin = char(value % 10 + '0');
      value = T(value / 10);
    } while (value);

    // and dump it in the right order
    writeRaw(begin, end);
   d52e2:	4620      	mov	r0, r4
   d52e4:	f7ff ff78 	bl	d51d8 <_ZN19ArduinoJson6101_00013TextFormatterINS_19DynamicStringWriterI6StringEEE8writeRawEPKcS6_>
    if (parts.exponent < 0) {
      writeRaw("e-");
      writePositiveInteger(-parts.exponent);
    }

    if (parts.exponent > 0) {
   d52e8:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
   d52ec:	2b00      	cmp	r3, #0
   d52ee:	dd16      	ble.n	d531e <_ZN19ArduinoJson6101_00013TextFormatterINS_19DynamicStringWriterI6StringEEE10writeFloatIfEEvT_+0x106>
      writeRaw('e');
   d52f0:	2165      	movs	r1, #101	; 0x65
   d52f2:	4620      	mov	r0, r4
   d52f4:	f7ff fe7f 	bl	d4ff6 <_ZN19ArduinoJson6101_00013TextFormatterINS_19DynamicStringWriterI6StringEEE8writeRawEc>

  template <typename T>
  void writePositiveInteger(T value) {
    char buffer[22];
    char *end = buffer + sizeof(buffer);
    char *begin = end;
   d52f8:	f10d 0126 	add.w	r1, sp, #38	; 0x26
      writePositiveInteger(-parts.exponent);
    }

    if (parts.exponent > 0) {
      writeRaw('e');
      writePositiveInteger(parts.exponent);
   d52fc:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
   d5300:	460a      	mov	r2, r1
    char *end = buffer + sizeof(buffer);
    char *begin = end;

    // write the string in reverse order
    do {
      *--begin = char(value % 10 + '0');
   d5302:	250a      	movs	r5, #10
   d5304:	fb93 f0f5 	sdiv	r0, r3, r5
   d5308:	fb05 3310 	mls	r3, r5, r0, r3
   d530c:	3330      	adds	r3, #48	; 0x30
   d530e:	f801 3d01 	strb.w	r3, [r1, #-1]!
      value = T(value / 10);
   d5312:	b203      	sxth	r3, r0
    char buffer[22];
    char *end = buffer + sizeof(buffer);
    char *begin = end;

    // write the string in reverse order
    do {
   d5314:	2b00      	cmp	r3, #0
   d5316:	d1f5      	bne.n	d5304 <_ZN19ArduinoJson6101_00013TextFormatterINS_19DynamicStringWriterI6StringEEE10writeFloatIfEEvT_+0xec>
      *--begin = char(value % 10 + '0');
      value = T(value / 10);
    } while (value);

    // and dump it in the right order
    writeRaw(begin, end);
   d5318:	4620      	mov	r0, r4
   d531a:	f7ff ff5d 	bl	d51d8 <_ZN19ArduinoJson6101_00013TextFormatterINS_19DynamicStringWriterI6StringEEE8writeRawEPKcS6_>

    if (parts.exponent > 0) {
      writeRaw('e');
      writePositiveInteger(parts.exponent);
    }
  }
   d531e:	b00b      	add	sp, #44	; 0x2c
   d5320:	ecbd 8b02 	vpop	{d8}
   d5324:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5326:	bf00      	nop
   d5328:	000d7ed4 	.word	0x000d7ed4
   d532c:	7f7fffff 	.word	0x7f7fffff
   d5330:	000d7edb 	.word	0x000d7edb
   d5334:	000d7ed8 	.word	0x000d7ed8

000d5338 <_ZNK19ArduinoJson6101_00011VariantData6acceptINS_14JsonSerializerINS_19DynamicStringWriterI6StringEEEEEEvRT_>:
  // - no destructor
  // - no virtual
  // - no inheritance

  template <typename Visitor>
  void accept(Visitor &visitor) const {
   d5338:	b538      	push	{r3, r4, r5, lr}
    switch (type()) {
   d533a:	7a03      	ldrb	r3, [r0, #8]
   d533c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   d5340:	2b05      	cmp	r3, #5
  // - no destructor
  // - no virtual
  // - no inheritance

  template <typename Visitor>
  void accept(Visitor &visitor) const {
   d5342:	4605      	mov	r5, r0
   d5344:	460c      	mov	r4, r1
    switch (type()) {
   d5346:	d067      	beq.n	d5418 <_ZNK19ArduinoJson6101_00011VariantData6acceptINS_14JsonSerializerINS_19DynamicStringWriterI6StringEEEEEEvRT_+0xe0>
   d5348:	d808      	bhi.n	d535c <_ZNK19ArduinoJson6101_00011VariantData6acceptINS_14JsonSerializerINS_19DynamicStringWriterI6StringEEEEEEvRT_+0x24>
   d534a:	2b00      	cmp	r3, #0
   d534c:	d06a      	beq.n	d5424 <_ZNK19ArduinoJson6101_00011VariantData6acceptINS_14JsonSerializerINS_19DynamicStringWriterI6StringEEEEEEvRT_+0xec>
   d534e:	2b02      	cmp	r3, #2
   d5350:	d954      	bls.n	d53fc <_ZNK19ArduinoJson6101_00011VariantData6acceptINS_14JsonSerializerINS_19DynamicStringWriterI6StringEEEEEEvRT_+0xc4>
  void visitFloat(Float value) {
    _formatter.writeFloat(value);
  }

  void visitString(const char *value) {
    _formatter.writeString(value);
   d5352:	6801      	ldr	r1, [r0, #0]
   d5354:	4620      	mov	r0, r4
   d5356:	f7ff fe59 	bl	d500c <_ZN19ArduinoJson6101_00013TextFormatterINS_19DynamicStringWriterI6StringEEE11writeStringEPKc>
   d535a:	bd38      	pop	{r3, r4, r5, pc}
   d535c:	2b08      	cmp	r3, #8
   d535e:	d015      	beq.n	d538c <_ZNK19ArduinoJson6101_00011VariantData6acceptINS_14JsonSerializerINS_19DynamicStringWriterI6StringEEEEEEvRT_+0x54>
   d5360:	d80a      	bhi.n	d5378 <_ZNK19ArduinoJson6101_00011VariantData6acceptINS_14JsonSerializerINS_19DynamicStringWriterI6StringEEEEEEvRT_+0x40>
   d5362:	2b06      	cmp	r3, #6
   d5364:	d053      	beq.n	d540e <_ZNK19ArduinoJson6101_00011VariantData6acceptINS_14JsonSerializerINS_19DynamicStringWriterI6StringEEEEEEvRT_+0xd6>
   d5366:	2b07      	cmp	r3, #7
   d5368:	d15c      	bne.n	d5424 <_ZNK19ArduinoJson6101_00011VariantData6acceptINS_14JsonSerializerINS_19DynamicStringWriterI6StringEEEEEEvRT_+0xec>
      case VALUE_IS_OWNED_RAW:
      case VALUE_IS_LINKED_RAW:
        return visitor.visitRawJson(_content.asRaw.data, _content.asRaw.size);

      case VALUE_IS_NEGATIVE_INTEGER:
        return visitor.visitNegativeInteger(_content.asInteger);
   d536a:	6805      	ldr	r5, [r0, #0]

  void writeNegativeInteger(UInt value) {
    writeRaw('-');
   d536c:	212d      	movs	r1, #45	; 0x2d
   d536e:	4620      	mov	r0, r4
   d5370:	f7ff fe41 	bl	d4ff6 <_ZN19ArduinoJson6101_00013TextFormatterINS_19DynamicStringWriterI6StringEEE8writeRawEc>
    writePositiveInteger(value);
   d5374:	4629      	mov	r1, r5
   d5376:	e04b      	b.n	d5410 <_ZNK19ArduinoJson6101_00011VariantData6acceptINS_14JsonSerializerINS_19DynamicStringWriterI6StringEEEEEEvRT_+0xd8>
  // - no virtual
  // - no inheritance

  template <typename Visitor>
  void accept(Visitor &visitor) const {
    switch (type()) {
   d5378:	2b20      	cmp	r3, #32
   d537a:	d01e      	beq.n	d53ba <_ZNK19ArduinoJson6101_00011VariantData6acceptINS_14JsonSerializerINS_19DynamicStringWriterI6StringEEEEEEvRT_+0x82>
   d537c:	2b40      	cmp	r3, #64	; 0x40
   d537e:	d151      	bne.n	d5424 <_ZNK19ArduinoJson6101_00011VariantData6acceptINS_14JsonSerializerINS_19DynamicStringWriterI6StringEEEEEEvRT_+0xec>
    return _formatter.bytesWritten();
  }

 protected:
  void write(char c) {
    _formatter.writeRaw(c);
   d5380:	215b      	movs	r1, #91	; 0x5b
   d5382:	4620      	mov	r0, r4
   d5384:	f7ff fe37 	bl	d4ff6 <_ZN19ArduinoJson6101_00013TextFormatterINS_19DynamicStringWriterI6StringEEE8writeRawEc>
   d5388:	682d      	ldr	r5, [r5, #0]
   d538a:	e012      	b.n	d53b2 <_ZNK19ArduinoJson6101_00011VariantData6acceptINS_14JsonSerializerINS_19DynamicStringWriterI6StringEEEEEEvRT_+0x7a>

    write('}');
  }

  void visitFloat(Float value) {
    _formatter.writeFloat(value);
   d538c:	ed90 0a00 	vldr	s0, [r0]
   d5390:	4608      	mov	r0, r1
   d5392:	f7ff ff41 	bl	d5218 <_ZN19ArduinoJson6101_00013TextFormatterINS_19DynamicStringWriterI6StringEEE10writeFloatIfEEvT_>
   d5396:	bd38      	pop	{r3, r4, r5, pc}
    write('[');

    VariantSlot *slot = array.head();

    while (slot != 0) {
      slot->data()->accept(*this);
   d5398:	4628      	mov	r0, r5
   d539a:	4621      	mov	r1, r4
   d539c:	f7ff ffcc 	bl	d5338 <_ZNK19ArduinoJson6101_00011VariantData6acceptINS_14JsonSerializerINS_19DynamicStringWriterI6StringEEEEEEvRT_>

      slot = slot->next();
   d53a0:	4628      	mov	r0, r5
   d53a2:	f7fe ff0f 	bl	d41c4 <_ZN19ArduinoJson6101_00011VariantSlot4nextEv>
      if (slot == 0) break;
   d53a6:	4605      	mov	r5, r0
   d53a8:	b128      	cbz	r0, d53b6 <_ZNK19ArduinoJson6101_00011VariantData6acceptINS_14JsonSerializerINS_19DynamicStringWriterI6StringEEEEEEvRT_+0x7e>
    return _formatter.bytesWritten();
  }

 protected:
  void write(char c) {
    _formatter.writeRaw(c);
   d53aa:	212c      	movs	r1, #44	; 0x2c
   d53ac:	4620      	mov	r0, r4
   d53ae:	f7ff fe22 	bl	d4ff6 <_ZN19ArduinoJson6101_00013TextFormatterINS_19DynamicStringWriterI6StringEEE8writeRawEc>
  FORCE_INLINE void visitArray(const CollectionData &array) {
    write('[');

    VariantSlot *slot = array.head();

    while (slot != 0) {
   d53b2:	2d00      	cmp	r5, #0
   d53b4:	d1f0      	bne.n	d5398 <_ZNK19ArduinoJson6101_00011VariantData6acceptINS_14JsonSerializerINS_19DynamicStringWriterI6StringEEEEEEvRT_+0x60>
    return _formatter.bytesWritten();
  }

 protected:
  void write(char c) {
    _formatter.writeRaw(c);
   d53b6:	215d      	movs	r1, #93	; 0x5d
   d53b8:	e01c      	b.n	d53f4 <_ZNK19ArduinoJson6101_00011VariantData6acceptINS_14JsonSerializerINS_19DynamicStringWriterI6StringEEEEEEvRT_+0xbc>
   d53ba:	217b      	movs	r1, #123	; 0x7b
   d53bc:	4620      	mov	r0, r4
   d53be:	f7ff fe1a 	bl	d4ff6 <_ZN19ArduinoJson6101_00013TextFormatterINS_19DynamicStringWriterI6StringEEE8writeRawEc>
   d53c2:	682d      	ldr	r5, [r5, #0]
  void visitObject(const CollectionData &object) {
    write('{');

    VariantSlot *slot = object.head();

    while (slot != 0) {
   d53c4:	b1ad      	cbz	r5, d53f2 <_ZNK19ArduinoJson6101_00011VariantData6acceptINS_14JsonSerializerINS_19DynamicStringWriterI6StringEEEEEEvRT_+0xba>
      _formatter.writeString(slot->key());
   d53c6:	68e9      	ldr	r1, [r5, #12]
   d53c8:	4620      	mov	r0, r4
   d53ca:	f7ff fe1f 	bl	d500c <_ZN19ArduinoJson6101_00013TextFormatterINS_19DynamicStringWriterI6StringEEE11writeStringEPKc>
    return _formatter.bytesWritten();
  }

 protected:
  void write(char c) {
    _formatter.writeRaw(c);
   d53ce:	213a      	movs	r1, #58	; 0x3a
   d53d0:	4620      	mov	r0, r4
   d53d2:	f7ff fe10 	bl	d4ff6 <_ZN19ArduinoJson6101_00013TextFormatterINS_19DynamicStringWriterI6StringEEE8writeRawEc>
    VariantSlot *slot = object.head();

    while (slot != 0) {
      _formatter.writeString(slot->key());
      write(':');
      slot->data()->accept(*this);
   d53d6:	4628      	mov	r0, r5
   d53d8:	4621      	mov	r1, r4
   d53da:	f7ff ffad 	bl	d5338 <_ZNK19ArduinoJson6101_00011VariantData6acceptINS_14JsonSerializerINS_19DynamicStringWriterI6StringEEEEEEvRT_>

      slot = slot->next();
   d53de:	4628      	mov	r0, r5
   d53e0:	f7fe fef0 	bl	d41c4 <_ZN19ArduinoJson6101_00011VariantSlot4nextEv>
      if (slot == 0) break;
   d53e4:	4605      	mov	r5, r0
   d53e6:	b120      	cbz	r0, d53f2 <_ZNK19ArduinoJson6101_00011VariantData6acceptINS_14JsonSerializerINS_19DynamicStringWriterI6StringEEEEEEvRT_+0xba>
    return _formatter.bytesWritten();
  }

 protected:
  void write(char c) {
    _formatter.writeRaw(c);
   d53e8:	212c      	movs	r1, #44	; 0x2c
   d53ea:	4620      	mov	r0, r4
   d53ec:	f7ff fe03 	bl	d4ff6 <_ZN19ArduinoJson6101_00013TextFormatterINS_19DynamicStringWriterI6StringEEE8writeRawEc>
   d53f0:	e7e8      	b.n	d53c4 <_ZNK19ArduinoJson6101_00011VariantData6acceptINS_14JsonSerializerINS_19DynamicStringWriterI6StringEEEEEEvRT_+0x8c>
   d53f2:	217d      	movs	r1, #125	; 0x7d
   d53f4:	4620      	mov	r0, r4
   d53f6:	f7ff fdfe 	bl	d4ff6 <_ZN19ArduinoJson6101_00013TextFormatterINS_19DynamicStringWriterI6StringEEE8writeRawEc>
   d53fa:	bd38      	pop	{r3, r4, r5, pc}
  void writeRaw(const char *s) {
    _length += _writer.write(reinterpret_cast<const uint8_t *>(s), strlen(s));
  }

  void writeRaw(const char *s, size_t n) {
    _length += _writer.write(reinterpret_cast<const uint8_t *>(s), n);
   d53fc:	e890 0006 	ldmia.w	r0, {r1, r2}
   d5400:	6820      	ldr	r0, [r4, #0]
   d5402:	f7fe ff21 	bl	d4248 <_ZN19ArduinoJson6101_00019DynamicStringWriterI6StringE5writeEPKhj>
   d5406:	6863      	ldr	r3, [r4, #4]
   d5408:	4418      	add	r0, r3
   d540a:	6060      	str	r0, [r4, #4]
   d540c:	bd38      	pop	{r3, r4, r5, pc}
  void visitNegativeInteger(UInt value) {
    _formatter.writeNegativeInteger(value);
  }

  void visitPositiveInteger(UInt value) {
    _formatter.writePositiveInteger(value);
   d540e:	6801      	ldr	r1, [r0, #0]
   d5410:	4620      	mov	r0, r4
   d5412:	f7ff feeb 	bl	d51ec <_ZN19ArduinoJson6101_00013TextFormatterINS_19DynamicStringWriterI6StringEEE20writePositiveIntegerImEEvT_>
   d5416:	bd38      	pop	{r3, r4, r5, pc}
  size_t bytesWritten() const {
    return _length;
  }

  void writeBoolean(bool value) {
    if (value)
   d5418:	6803      	ldr	r3, [r0, #0]
   d541a:	b10b      	cbz	r3, d5420 <_ZNK19ArduinoJson6101_00011VariantData6acceptINS_14JsonSerializerINS_19DynamicStringWriterI6StringEEEEEEvRT_+0xe8>
      writeRaw("true");
   d541c:	4904      	ldr	r1, [pc, #16]	; (d5430 <_ZNK19ArduinoJson6101_00011VariantData6acceptINS_14JsonSerializerINS_19DynamicStringWriterI6StringEEEEEEvRT_+0xf8>)
   d541e:	e002      	b.n	d5426 <_ZNK19ArduinoJson6101_00011VariantData6acceptINS_14JsonSerializerINS_19DynamicStringWriterI6StringEEEEEEvRT_+0xee>
    else
      writeRaw("false");
   d5420:	4904      	ldr	r1, [pc, #16]	; (d5434 <_ZNK19ArduinoJson6101_00011VariantData6acceptINS_14JsonSerializerINS_19DynamicStringWriterI6StringEEEEEEvRT_+0xfc>)
   d5422:	e000      	b.n	d5426 <_ZNK19ArduinoJson6101_00011VariantData6acceptINS_14JsonSerializerINS_19DynamicStringWriterI6StringEEEEEEvRT_+0xee>
  void visitBoolean(bool value) {
    _formatter.writeBoolean(value);
  }

  void visitNull() {
    _formatter.writeRaw("null");
   d5424:	4904      	ldr	r1, [pc, #16]	; (d5438 <_ZNK19ArduinoJson6101_00011VariantData6acceptINS_14JsonSerializerINS_19DynamicStringWriterI6StringEEEEEEvRT_+0x100>)
   d5426:	4620      	mov	r0, r4
   d5428:	f7ff fdd6 	bl	d4fd8 <_ZN19ArduinoJson6101_00013TextFormatterINS_19DynamicStringWriterI6StringEEE8writeRawEPKc>
   d542c:	bd38      	pop	{r3, r4, r5, pc}
   d542e:	bf00      	nop
   d5430:	000d7ee4 	.word	0x000d7ee4
   d5434:	000d7ee9 	.word	0x000d7ee9
   d5438:	000d7ecf 	.word	0x000d7ecf

000d543c <_ZN19ArduinoJson6101_00013serializeJsonINS_17BasicJsonDocumentINS_16DefaultAllocatorEEE6StringEEjRKT_RT0_>:
 private:
  TextFormatter<TWriter> _formatter;
};

template <typename TSource, typename TDestination>
size_t serializeJson(const TSource &source, TDestination &destination) {
   d543c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
struct IsWriteableString<String> : true_type {};

template <>
class DynamicStringWriter<String> {
 public:
  DynamicStringWriter(String &str) : _str(&str) {}
   d543e:	ab04      	add	r3, sp, #16

namespace ARDUINOJSON_NAMESPACE {

template <typename Visitor>
inline void variantAccept(const VariantData *var, Visitor &visitor) {
  if (var != 0)
   d5440:	3014      	adds	r0, #20
   d5442:	f843 1d0c 	str.w	r1, [r3, #-12]!
namespace ARDUINOJSON_NAMESPACE {

template <typename TWriter>
class TextFormatter {
 public:
  explicit TextFormatter(TWriter &writer) : _writer(writer), _length(0) {}
   d5446:	9302      	str	r3, [sp, #8]
   d5448:	f04f 0300 	mov.w	r3, #0
   d544c:	9303      	str	r3, [sp, #12]
   d544e:	d003      	beq.n	d5458 <_ZN19ArduinoJson6101_00013serializeJsonINS_17BasicJsonDocumentINS_16DefaultAllocatorEEE6StringEEjRKT_RT0_+0x1c>
    var->accept(visitor);
   d5450:	a902      	add	r1, sp, #8
   d5452:	f7ff ff71 	bl	d5338 <_ZNK19ArduinoJson6101_00011VariantData6acceptINS_14JsonSerializerINS_19DynamicStringWriterI6StringEEEEEEvRT_>
   d5456:	e003      	b.n	d5460 <_ZN19ArduinoJson6101_00013serializeJsonINS_17BasicJsonDocumentINS_16DefaultAllocatorEEE6StringEEjRKT_RT0_+0x24>
  void visitBoolean(bool value) {
    _formatter.writeBoolean(value);
  }

  void visitNull() {
    _formatter.writeRaw("null");
   d5458:	4903      	ldr	r1, [pc, #12]	; (d5468 <_ZN19ArduinoJson6101_00013serializeJsonINS_17BasicJsonDocumentINS_16DefaultAllocatorEEE6StringEEjRKT_RT0_+0x2c>)
   d545a:	a802      	add	r0, sp, #8
   d545c:	f7ff fdbc 	bl	d4fd8 <_ZN19ArduinoJson6101_00013TextFormatterINS_19DynamicStringWriterI6StringEEE8writeRawEPKc>
};

template <typename TSource, typename TDestination>
size_t serializeJson(const TSource &source, TDestination &destination) {
  return serialize<JsonSerializer>(source, destination);
}
   d5460:	9803      	ldr	r0, [sp, #12]
   d5462:	b005      	add	sp, #20
   d5464:	f85d fb04 	ldr.w	pc, [sp], #4
   d5468:	000d7ecf 	.word	0x000d7ecf

000d546c <_Z10changeConf6String>:

// ------------ Functions ------------

// Cloud function. Change ITL configuration received from the cloud
int changeConf (String inputJson)
{
   d546c:	b570      	push	{r4, r5, r6, lr}
   d546e:	4b33      	ldr	r3, [pc, #204]	; (d553c <_Z10changeConf6String+0xd0>)
        return publish(eventName, eventData, 60, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d5470:	4933      	ldr	r1, [pc, #204]	; (d5540 <_Z10changeConf6String+0xd4>)
   d5472:	781b      	ldrb	r3, [r3, #0]
   d5474:	b092      	sub	sp, #72	; 0x48
   d5476:	4605      	mov	r5, r0
   d5478:	f88d 3000 	strb.w	r3, [sp]
   d547c:	6802      	ldr	r2, [r0, #0]
   d547e:	233c      	movs	r3, #60	; 0x3c
   d5480:	a80a      	add	r0, sp, #40	; 0x28
   d5482:	f000 fedf 	bl	d6244 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d5486:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   d5488:	b17c      	cbz	r4, d54aa <_Z10changeConf6String+0x3e>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d548a:	6863      	ldr	r3, [r4, #4]
   d548c:	3b01      	subs	r3, #1
   d548e:	6063      	str	r3, [r4, #4]
   d5490:	b95b      	cbnz	r3, d54aa <_Z10changeConf6String+0x3e>
        {
          _M_dispose();
   d5492:	6823      	ldr	r3, [r4, #0]
   d5494:	4620      	mov	r0, r4
   d5496:	689b      	ldr	r3, [r3, #8]
   d5498:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d549a:	68a3      	ldr	r3, [r4, #8]
   d549c:	3b01      	subs	r3, #1
   d549e:	60a3      	str	r3, [r4, #8]
   d54a0:	b91b      	cbnz	r3, d54aa <_Z10changeConf6String+0x3e>
            _M_destroy();
   d54a2:	6823      	ldr	r3, [r4, #0]
   d54a4:	4620      	mov	r0, r4
   d54a6:	68db      	ldr	r3, [r3, #12]
   d54a8:	4798      	blx	r3
  Particle.publish("newConf",inputJson , PUBLIC);
  DynamicJsonDocument newConfJson (1024);
   d54aa:	f04f 0200 	mov.w	r2, #0
   d54ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
   d54b2:	a80a      	add	r0, sp, #40	; 0x28

template <typename TInput>
DeserializationError deserializeJson(
    JsonDocument &doc, TInput &input,
    NestingLimit nestingLimit = NestingLimit()) {
  return deserialize<JsonDeserializer>(doc, input, nestingLimit);
   d54b4:	ae0b      	add	r6, sp, #44	; 0x2c
   d54b6:	f7fe ffd5 	bl	d4464 <_ZN19ArduinoJson6101_00017BasicJsonDocumentINS_16DefaultAllocatorEEC1EjS1_>
   d54ba:	f04f 020a 	mov.w	r2, #10
   d54be:	4629      	mov	r1, r5
   d54c0:	4630      	mov	r0, r6
   d54c2:	f7ff fc0f 	bl	d4ce4 <_ZN19ArduinoJson6101_00011deserializeINS_16JsonDeserializerE6StringEENS_9enable_ifIXntsrNS_8is_arrayIT0_EE5valueENS_20DeserializationErrorEE4typeERNS_12JsonDocumentERKS5_NS_12NestingLimitE>
  DeserializationError err = deserializeJson(newConfJson, inputJson);
  if (!err) {
   d54c6:	a903      	add	r1, sp, #12
// Cloud function. Change ITL configuration received from the cloud
int changeConf (String inputJson)
{
  Particle.publish("newConf",inputJson , PUBLIC);
  DynamicJsonDocument newConfJson (1024);
  DeserializationError err = deserializeJson(newConfJson, inputJson);
   d54c8:	f88d 000c 	strb.w	r0, [sp, #12]
  if (!err) {
   d54cc:	a806      	add	r0, sp, #24
   d54ce:	f7fe ff0d 	bl	d42ec <_ZNK19ArduinoJson6101_00020DeserializationErrorcvMS0_KFvvEEv>
   d54d2:	9b06      	ldr	r3, [sp, #24]
   d54d4:	b91b      	cbnz	r3, d54de <_Z10changeConf6String+0x72>
   d54d6:	9d07      	ldr	r5, [sp, #28]
   d54d8:	f015 0501 	ands.w	r5, r5, #1
   d54dc:	d002      	beq.n	d54e4 <_Z10changeConf6String+0x78>

    return 0;
  }
  else
  {
    return -1;
   d54de:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   d54e2:	e024      	b.n	d552e <_Z10changeConf6String+0xc2>
  // getOrAddMember(char*)
  // getOrAddMember(const char*)
  // getOrAddMember(const __FlashStringHelper*)
  template <typename TChar>
  FORCE_INLINE VariantRef getOrAddMember(TChar* key) {
    return VariantRef(&_pool, _data.getOrAddMember(adaptString(key), &_pool));
   d54e4:	4c17      	ldr	r4, [pc, #92]	; (d5544 <_Z10changeConf6String+0xd8>)
                    public Visitable {
  typedef MemberProxy<TObject, TStringRef> this_type;

 public:
  FORCE_INLINE MemberProxy(TObject variant, TStringRef key)
      : _object(variant), _key(key) {}
   d54e6:	4918      	ldr	r1, [pc, #96]	; (d5548 <_Z10changeConf6String+0xdc>)
   d54e8:	9105      	str	r1, [sp, #20]
   d54ea:	4622      	mov	r2, r4
   d54ec:	f104 0010 	add.w	r0, r4, #16
   d54f0:	9604      	str	r6, [sp, #16]
   d54f2:	f7ff f834 	bl	d455e <_ZN19ArduinoJson6101_00011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE>
  FORCE_INLINE operator VariantConstRef() const {
    return getUpstreamMember();
  }

  FORCE_INLINE this_type &operator=(const this_type &src) {
    getOrAddUpstreamMember().set(src);
   d54f6:	a904      	add	r1, sp, #16
  size_t size() const {
    return variantSize(_data);
  }

 protected:
  VariantRefBase(TData *data) : _data(data) {}
   d54f8:	9008      	str	r0, [sp, #32]
   d54fa:	a808      	add	r0, sp, #32
  friend class VariantConstRef;

 public:
  // Intenal use only
  FORCE_INLINE VariantRef(MemoryPool *pool, VariantData *data)
      : base_type(data), _pool(pool) {}
   d54fc:	9409      	str	r4, [sp, #36]	; 0x24
   d54fe:	f7ff f85a 	bl	d45b6 <_ZNK19ArduinoJson6101_00010VariantRef3setINS_11MemberProxyIRNS_12JsonDocumentEPKcEEEENS_9enable_ifIXsrNS_11IsVisitableIT_EE5valueEbE4typeERKSA_>
                    public Visitable {
  typedef MemberProxy<TObject, TStringRef> this_type;

 public:
  FORCE_INLINE MemberProxy(TObject variant, TStringRef key)
      : _object(variant), _key(key) {}
   d5502:	4912      	ldr	r1, [pc, #72]	; (d554c <_Z10changeConf6String+0xe0>)
   d5504:	9105      	str	r1, [sp, #20]
   d5506:	4622      	mov	r2, r4
   d5508:	f104 0010 	add.w	r0, r4, #16
   d550c:	9604      	str	r6, [sp, #16]
   d550e:	f7ff f826 	bl	d455e <_ZN19ArduinoJson6101_00011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE>
  FORCE_INLINE operator VariantConstRef() const {
    return getUpstreamMember();
  }

  FORCE_INLINE this_type &operator=(const this_type &src) {
    getOrAddUpstreamMember().set(src);
   d5512:	a904      	add	r1, sp, #16
  size_t size() const {
    return variantSize(_data);
  }

 protected:
  VariantRefBase(TData *data) : _data(data) {}
   d5514:	9008      	str	r0, [sp, #32]
   d5516:	a808      	add	r0, sp, #32
  friend class VariantConstRef;

 public:
  // Intenal use only
  FORCE_INLINE VariantRef(MemoryPool *pool, VariantData *data)
      : base_type(data), _pool(pool) {}
   d5518:	9409      	str	r4, [sp, #36]	; 0x24
   d551a:	f7ff f84c 	bl	d45b6 <_ZNK19ArduinoJson6101_00010VariantRef3setINS_11MemberProxyIRNS_12JsonDocumentEPKcEEEENS_9enable_ifIXsrNS_11IsVisitableIT_EE5valueEbE4typeERKSA_>
  DynamicJsonDocument newConfJson (1024);
  DeserializationError err = deserializeJson(newConfJson, inputJson);
  if (!err) {
    currentStateJson["mode"] = newConfJson["mode"];
    currentStateJson["specificData"] = newConfJson["specificData"];
    currentStateString="";
   d551e:	490c      	ldr	r1, [pc, #48]	; (d5550 <_Z10changeConf6String+0xe4>)
   d5520:	480c      	ldr	r0, [pc, #48]	; (d5554 <_Z10changeConf6String+0xe8>)
   d5522:	f001 fbef 	bl	d6d04 <_ZN6StringaSEPKc>
    serializeJson(currentStateJson, currentStateString);
   d5526:	490b      	ldr	r1, [pc, #44]	; (d5554 <_Z10changeConf6String+0xe8>)
   d5528:	1f20      	subs	r0, r4, #4
   d552a:	f7ff ff87 	bl	d543c <_ZN19ArduinoJson6101_00013serializeJsonINS_17BasicJsonDocumentINS_16DefaultAllocatorEEE6StringEEjRKT_RT0_>
  }

  void deallocate(void* p) {
    free(p);
   d552e:	980b      	ldr	r0, [sp, #44]	; 0x2c
   d5530:	f000 fc82 	bl	d5e38 <free>
  }
  else
  {
    return -1;
  }
}
   d5534:	4628      	mov	r0, r5
   d5536:	b012      	add	sp, #72	; 0x48
   d5538:	bd70      	pop	{r4, r5, r6, pc}
   d553a:	bf00      	nop
   d553c:	2003e40c 	.word	0x2003e40c
   d5540:	000d7eef 	.word	0x000d7eef
   d5544:	2003e424 	.word	0x2003e424
   d5548:	000d7ef7 	.word	0x000d7ef7
   d554c:	000d7efc 	.word	0x000d7efc
   d5550:	000d7ece 	.word	0x000d7ece
   d5554:	2003e46c 	.word	0x2003e46c

000d5558 <_Z16updateStateTimerv>:

// Timer handler
void updateStateTimer ( )
{
   d5558:	b570      	push	{r4, r5, r6, lr}
   d555a:	ed2d 8b02 	vpush	{d8}
   d555e:	b08a      	sub	sp, #40	; 0x28
                    public Visitable {
  typedef MemberProxy<TObject, TStringRef> this_type;

 public:
  FORCE_INLINE MemberProxy(TObject variant, TStringRef key)
      : _object(variant), _key(key) {}
   d5560:	4c5d      	ldr	r4, [pc, #372]	; (d56d8 <_Z16updateStateTimerv+0x180>)
   d5562:	4d5e      	ldr	r5, [pc, #376]	; (d56dc <_Z16updateStateTimerv+0x184>)
   d5564:	9404      	str	r4, [sp, #16]
   d5566:	9505      	str	r5, [sp, #20]
  if (currentStateJson["mode"]=="dynamic")
   d5568:	ab04      	add	r3, sp, #16
   d556a:	4a5d      	ldr	r2, [pc, #372]	; (d56e0 <_Z16updateStateTimerv+0x188>)
   d556c:	4e5d      	ldr	r6, [pc, #372]	; (d56e4 <_Z16updateStateTimerv+0x18c>)
   d556e:	e893 0003 	ldmia.w	r3, {r0, r1}
   d5572:	f7ff f82c 	bl	d45ce <_ZN19ArduinoJson6101_000eqIKcEENS_9enable_ifIXsrNS_8IsStringIPT_EE5valueEbE4typeENS_11MemberProxyIRNS_12JsonDocumentEPS1_EES5_>
   d5576:	2800      	cmp	r0, #0
   d5578:	d057      	beq.n	d562a <_Z16updateStateTimerv+0xd2>
  // JsonVariant getMember(char*)
  // JsonVariant getMember(const char*)
  // JsonVariant getMember(const __FlashStringHelper*)
  template <typename TChar>
  FORCE_INLINE VariantRef getMember(TChar* key) {
    return VariantRef(&_pool, _data.getMember(adaptString(key)));
   d557a:	f104 0010 	add.w	r0, r4, #16
   d557e:	495a      	ldr	r1, [pc, #360]	; (d56e8 <_Z16updateStateTimerv+0x190>)
   d5580:	f7ff f80c 	bl	d459c <_ZNK19ArduinoJson6101_00011VariantData9getMemberINS_21ConstRamStringAdapterEEEPS0_T_>
// ---

template <typename T>
inline typename enable_if<is_integral<T>::value, T>::type variantAs(
    const VariantData* _data) {
  return _data != 0 ? _data->asIntegral<T>() : T(0);
   d5584:	4604      	mov	r4, r0
   d5586:	b110      	cbz	r0, d558e <_Z16updateStateTimerv+0x36>
   d5588:	f7ff fcde 	bl	d4f48 <_ZNK19ArduinoJson6101_00011VariantData10asIntegralIiEET_v>
   d558c:	4604      	mov	r4, r0
  // getOrAddMember(char*)
  // getOrAddMember(const char*)
  // getOrAddMember(const __FlashStringHelper*)
  template <typename TChar>
  FORCE_INLINE VariantRef getOrAddMember(TChar* key) {
    return VariantRef(&_pool, _data.getOrAddMember(adaptString(key), &_pool));
   d558e:	4a52      	ldr	r2, [pc, #328]	; (d56d8 <_Z16updateStateTimerv+0x180>)
   d5590:	4955      	ldr	r1, [pc, #340]	; (d56e8 <_Z16updateStateTimerv+0x190>)
   d5592:	f102 0010 	add.w	r0, r2, #16
   d5596:	f7fe ffe2 	bl	d455e <_ZN19ArduinoJson6101_00011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE>
  template <typename T>
  FORCE_INLINE bool set(
      T value,
      typename enable_if<is_integral<T>::value && is_signed<T>::value>::type * =
          0) const {
    return variantSetSignedInteger(_data, value);
   d559a:	1e61      	subs	r1, r4, #1
   d559c:	f7fe ff7b 	bl	d4496 <_ZN19ArduinoJson6101_00023variantSetSignedIntegerIiEEbPNS_11VariantDataET_>
  {
    int timeout = currentStateJson["timeout"];
    currentStateJson["timeout"] = (timeout - 1);
    if (timeout == 0)                            // Changing the state (color)
   d55a0:	2c00      	cmp	r4, #0
   d55a2:	d13a      	bne.n	d561a <_Z16updateStateTimerv+0xc2>
  // JsonVariant getMember(char*)
  // JsonVariant getMember(const char*)
  // JsonVariant getMember(const __FlashStringHelper*)
  template <typename TChar>
  FORCE_INLINE VariantRef getMember(TChar* key) {
    return VariantRef(&_pool, _data.getMember(adaptString(key)));
   d55a4:	4951      	ldr	r1, [pc, #324]	; (d56ec <_Z16updateStateTimerv+0x194>)
   d55a6:	4852      	ldr	r0, [pc, #328]	; (d56f0 <_Z16updateStateTimerv+0x198>)
   d55a8:	f7fe fff8 	bl	d459c <_ZNK19ArduinoJson6101_00011VariantData9getMemberINS_21ConstRamStringAdapterEEEPS0_T_>
   d55ac:	b120      	cbz	r0, d55b8 <_Z16updateStateTimerv+0x60>
   d55ae:	f7ff fccb 	bl	d4f48 <_ZNK19ArduinoJson6101_00011VariantData10asIntegralIiEET_v>
    {
      int state = currentStateJson["state"];
      if (state == 0)
   d55b2:	b108      	cbz	r0, d55b8 <_Z16updateStateTimerv+0x60>
      {
        state = 2;
      }
      else
      {
        state --;
   d55b4:	1e45      	subs	r5, r0, #1
   d55b6:	e000      	b.n	d55ba <_Z16updateStateTimerv+0x62>
    if (timeout == 0)                            // Changing the state (color)
    {
      int state = currentStateJson["state"];
      if (state == 0)
      {
        state = 2;
   d55b8:	2502      	movs	r5, #2
  // getOrAddMember(char*)
  // getOrAddMember(const char*)
  // getOrAddMember(const __FlashStringHelper*)
  template <typename TChar>
  FORCE_INLINE VariantRef getOrAddMember(TChar* key) {
    return VariantRef(&_pool, _data.getOrAddMember(adaptString(key), &_pool));
   d55ba:	4c47      	ldr	r4, [pc, #284]	; (d56d8 <_Z16updateStateTimerv+0x180>)
   d55bc:	494b      	ldr	r1, [pc, #300]	; (d56ec <_Z16updateStateTimerv+0x194>)
   d55be:	4622      	mov	r2, r4
   d55c0:	f104 0010 	add.w	r0, r4, #16
   d55c4:	f7fe ffcb 	bl	d455e <_ZN19ArduinoJson6101_00011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE>
   d55c8:	4629      	mov	r1, r5
   d55ca:	f7fe ff64 	bl	d4496 <_ZN19ArduinoJson6101_00023variantSetSignedIntegerIiEEbPNS_11VariantDataET_>
        state --;
      }
      currentStateJson["state"] = state;

      // Fitting the new timeout
      if (state == 2)                           // Green state
   d55ce:	2d02      	cmp	r5, #2
   d55d0:	d106      	bne.n	d55e0 <_Z16updateStateTimerv+0x88>
   d55d2:	4b48      	ldr	r3, [pc, #288]	; (d56f4 <_Z16updateStateTimerv+0x19c>)
   d55d4:	9303      	str	r3, [sp, #12]
   d55d6:	ab02      	add	r3, sp, #8
   d55d8:	9306      	str	r3, [sp, #24]
   d55da:	9402      	str	r4, [sp, #8]
   d55dc:	4b46      	ldr	r3, [pc, #280]	; (d56f8 <_Z16updateStateTimerv+0x1a0>)
   d55de:	e00f      	b.n	d5600 <_Z16updateStateTimerv+0xa8>
      {
        currentStateJson["timeout"] = currentStateJson["specificData"]["greenTime"];
      }
      if (state == 1)                           // Yellow state
   d55e0:	2d01      	cmp	r5, #1
   d55e2:	d106      	bne.n	d55f2 <_Z16updateStateTimerv+0x9a>
   d55e4:	4b43      	ldr	r3, [pc, #268]	; (d56f4 <_Z16updateStateTimerv+0x19c>)
   d55e6:	9303      	str	r3, [sp, #12]
   d55e8:	ab02      	add	r3, sp, #8
   d55ea:	9306      	str	r3, [sp, #24]
   d55ec:	9402      	str	r4, [sp, #8]
   d55ee:	4b43      	ldr	r3, [pc, #268]	; (d56fc <_Z16updateStateTimerv+0x1a4>)
   d55f0:	e006      	b.n	d5600 <_Z16updateStateTimerv+0xa8>
      {
        currentStateJson["timeout"] = currentStateJson["specificData"]["yellowTime"];
      }
      if (state == 0)                           // Red state
   d55f2:	b995      	cbnz	r5, d561a <_Z16updateStateTimerv+0xc2>
   d55f4:	4b3f      	ldr	r3, [pc, #252]	; (d56f4 <_Z16updateStateTimerv+0x19c>)
   d55f6:	9303      	str	r3, [sp, #12]
   d55f8:	ab02      	add	r3, sp, #8
   d55fa:	9306      	str	r3, [sp, #24]
   d55fc:	4b40      	ldr	r3, [pc, #256]	; (d5700 <_Z16updateStateTimerv+0x1a8>)
   d55fe:	9402      	str	r4, [sp, #8]
   d5600:	4939      	ldr	r1, [pc, #228]	; (d56e8 <_Z16updateStateTimerv+0x190>)
   d5602:	9307      	str	r3, [sp, #28]
   d5604:	4622      	mov	r2, r4
   d5606:	f104 0010 	add.w	r0, r4, #16
   d560a:	f7fe ffa8 	bl	d455e <_ZN19ArduinoJson6101_00011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE>
  }

  template <typename TValue>
  FORCE_INLINE typename enable_if<!is_array<TValue>::value, this_type &>::type
  operator=(const TValue &src) {
    getOrAddUpstreamMember().set(src);
   d560e:	a906      	add	r1, sp, #24
  size_t size() const {
    return variantSize(_data);
  }

 protected:
  VariantRefBase(TData *data) : _data(data) {}
   d5610:	9008      	str	r0, [sp, #32]
   d5612:	a808      	add	r0, sp, #32
  friend class VariantConstRef;

 public:
  // Intenal use only
  FORCE_INLINE VariantRef(MemoryPool *pool, VariantData *data)
      : base_type(data), _pool(pool) {}
   d5614:	9409      	str	r4, [sp, #36]	; 0x24
   d5616:	f7fe fff3 	bl	d4600 <_ZNK19ArduinoJson6101_00010VariantRef3setINS_11MemberProxyIRKNS2_IRNS_12JsonDocumentEPKcEES6_EEEENS_9enable_ifIXsrNS_11IsVisitableIT_EE5valueEbE4typeERKSD_>
  // JsonVariant getMember(char*)
  // JsonVariant getMember(const char*)
  // JsonVariant getMember(const __FlashStringHelper*)
  template <typename TChar>
  FORCE_INLINE VariantRef getMember(TChar* key) {
    return VariantRef(&_pool, _data.getMember(adaptString(key)));
   d561a:	4933      	ldr	r1, [pc, #204]	; (d56e8 <_Z16updateStateTimerv+0x190>)
   d561c:	4834      	ldr	r0, [pc, #208]	; (d56f0 <_Z16updateStateTimerv+0x198>)
   d561e:	f7fe ffbd 	bl	d459c <_ZNK19ArduinoJson6101_00011VariantData9getMemberINS_21ConstRamStringAdapterEEEPS0_T_>
  FORCE_INLINE typename enable_if<!is_same<T, ArrayRef>::value &&
                                      !is_same<T, ObjectRef>::value &&
                                      !is_same<T, VariantRef>::value,
                                  typename VariantAs<T>::type>::type
  as() const {
    return variantAs<T>(_data);
   d5622:	f7ff fb85 	bl	d4d30 <_ZN19ArduinoJson6101_0009variantAsIhEENS_9enable_ifIXsrNS_11is_integralIT_EE5valueES3_E4typeEPKNS_11VariantDataE>
      {
        currentStateJson["timeout"] = currentStateJson["specificData"]["redTime"];
      }
    }
    bleFrame[1] = currentStateJson["timeout"];
   d5626:	7070      	strb	r0, [r6, #1]
   d5628:	e01c      	b.n	d5664 <_Z16updateStateTimerv+0x10c>
                    public Visitable {
  typedef MemberProxy<TObject, TStringRef> this_type;

 public:
  FORCE_INLINE MemberProxy(TObject variant, TStringRef key)
      : _object(variant), _key(key) {}
   d562a:	9406      	str	r4, [sp, #24]
   d562c:	9507      	str	r5, [sp, #28]
  }
  else if (currentStateJson["mode"]=="static")
   d562e:	ab06      	add	r3, sp, #24
   d5630:	4a34      	ldr	r2, [pc, #208]	; (d5704 <_Z16updateStateTimerv+0x1ac>)
   d5632:	e893 0003 	ldmia.w	r3, {r0, r1}
   d5636:	f7fe ffca 	bl	d45ce <_ZN19ArduinoJson6101_000eqIKcEENS_9enable_ifIXsrNS_8IsStringIPT_EE5valueEbE4typeENS_11MemberProxyIRNS_12JsonDocumentEPS1_EES5_>
   d563a:	b198      	cbz	r0, d5664 <_Z16updateStateTimerv+0x10c>
   d563c:	4b2d      	ldr	r3, [pc, #180]	; (d56f4 <_Z16updateStateTimerv+0x19c>)
   d563e:	492b      	ldr	r1, [pc, #172]	; (d56ec <_Z16updateStateTimerv+0x194>)
   d5640:	9301      	str	r3, [sp, #4]
  // getOrAddMember(char*)
  // getOrAddMember(const char*)
  // getOrAddMember(const __FlashStringHelper*)
  template <typename TChar>
  FORCE_INLINE VariantRef getOrAddMember(TChar* key) {
    return VariantRef(&_pool, _data.getOrAddMember(adaptString(key), &_pool));
   d5642:	4622      	mov	r2, r4
   d5644:	f104 0010 	add.w	r0, r4, #16
   d5648:	9103      	str	r1, [sp, #12]
   d564a:	9400      	str	r4, [sp, #0]
   d564c:	f8cd d008 	str.w	sp, [sp, #8]
   d5650:	f7fe ff85 	bl	d455e <_ZN19ArduinoJson6101_00011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE>
  }

  template <typename TValue>
  FORCE_INLINE typename enable_if<!is_array<TValue>::value, this_type &>::type
  operator=(const TValue &src) {
    getOrAddUpstreamMember().set(src);
   d5654:	a902      	add	r1, sp, #8
  size_t size() const {
    return variantSize(_data);
  }

 protected:
  VariantRefBase(TData *data) : _data(data) {}
   d5656:	9008      	str	r0, [sp, #32]
   d5658:	a808      	add	r0, sp, #32
  friend class VariantConstRef;

 public:
  // Intenal use only
  FORCE_INLINE VariantRef(MemoryPool *pool, VariantData *data)
      : base_type(data), _pool(pool) {}
   d565a:	9409      	str	r4, [sp, #36]	; 0x24
   d565c:	f7fe ffd0 	bl	d4600 <_ZNK19ArduinoJson6101_00010VariantRef3setINS_11MemberProxyIRKNS2_IRNS_12JsonDocumentEPKcEES6_EEEENS_9enable_ifIXsrNS_11IsVisitableIT_EE5valueEbE4typeERKSD_>
  {
    currentStateJson["state"] = currentStateJson["specificData"]["state"];
    bleFrame[1] = 0xFF;
   d5660:	23ff      	movs	r3, #255	; 0xff
   d5662:	7073      	strb	r3, [r6, #1]
  }

  currentStateJson["battery"] = fuel.getSoC();
   d5664:	4828      	ldr	r0, [pc, #160]	; (d5708 <_Z16updateStateTimerv+0x1b0>)
   d5666:	f000 ffdd 	bl	d6624 <_ZN9FuelGauge6getSoCEv>
   d566a:	4a1b      	ldr	r2, [pc, #108]	; (d56d8 <_Z16updateStateTimerv+0x180>)
   d566c:	4927      	ldr	r1, [pc, #156]	; (d570c <_Z16updateStateTimerv+0x1b4>)
   d566e:	f102 0010 	add.w	r0, r2, #16
   d5672:	eeb0 8a40 	vmov.f32	s16, s0
   d5676:	f7fe ff72 	bl	d455e <_ZN19ArduinoJson6101_00011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE>
  var->setBoolean(value);
  return true;
}

inline bool variantSetFloat(VariantData *var, Float value) {
  if (!var) return false;
   d567a:	4602      	mov	r2, r0
   d567c:	b128      	cbz	r0, d568a <_Z16updateStateTimerv+0x132>
    setType(VALUE_IS_BOOLEAN);
    _content.asInteger = static_cast<UInt>(value);
  }

  void setFloat(Float value) {
    setType(VALUE_IS_FLOAT);
   d567e:	2108      	movs	r1, #8
   d5680:	4408      	add	r0, r1
   d5682:	f7fe fd4b 	bl	d411c <_ZN19ArduinoJson6101_00011VariantData7setTypeEh.isra.16>
    _content.asFloat = value;
   d5686:	ed82 8a00 	vstr	s16, [r2]

  currentStateString = "";
   d568a:	4c21      	ldr	r4, [pc, #132]	; (d5710 <_Z16updateStateTimerv+0x1b8>)
   d568c:	4921      	ldr	r1, [pc, #132]	; (d5714 <_Z16updateStateTimerv+0x1bc>)
   d568e:	4620      	mov	r0, r4
   d5690:	f001 fb38 	bl	d6d04 <_ZN6StringaSEPKc>
  serializeJson(currentStateJson, currentStateString);
   d5694:	4621      	mov	r1, r4
   d5696:	4820      	ldr	r0, [pc, #128]	; (d5718 <_Z16updateStateTimerv+0x1c0>)
   d5698:	f7ff fed0 	bl	d543c <_ZN19ArduinoJson6101_00013serializeJsonINS_17BasicJsonDocumentINS_16DefaultAllocatorEEE6StringEEjRKT_RT0_>
  Serial.println(currentStateString);
   d569c:	f001 fcb6 	bl	d700c <_Z16_fetch_usbserialv>
   d56a0:	6821      	ldr	r1, [r4, #0]
   d56a2:	f001 fa52 	bl	d6b4a <_ZN5Print7printlnEPKc>
  // JsonVariant getMember(char*)
  // JsonVariant getMember(const char*)
  // JsonVariant getMember(const __FlashStringHelper*)
  template <typename TChar>
  FORCE_INLINE VariantRef getMember(TChar* key) {
    return VariantRef(&_pool, _data.getMember(adaptString(key)));
   d56a6:	4911      	ldr	r1, [pc, #68]	; (d56ec <_Z16updateStateTimerv+0x194>)
   d56a8:	4811      	ldr	r0, [pc, #68]	; (d56f0 <_Z16updateStateTimerv+0x198>)
   d56aa:	f7fe ff77 	bl	d459c <_ZNK19ArduinoJson6101_00011VariantData9getMemberINS_21ConstRamStringAdapterEEEPS0_T_>
  FORCE_INLINE typename enable_if<!is_same<T, ArrayRef>::value &&
                                      !is_same<T, ObjectRef>::value &&
                                      !is_same<T, VariantRef>::value,
                                  typename VariantAs<T>::type>::type
  as() const {
    return variantAs<T>(_data);
   d56ae:	f7ff fb3f 	bl	d4d30 <_ZN19ArduinoJson6101_0009variantAsIhEENS_9enable_ifIXsrNS_11is_integralIT_EE5valueES3_E4typeEPKNS_11VariantDataE>

  // BLE data
  bleFrame[0] = currentStateJson["state"];
   d56b2:	7030      	strb	r0, [r6, #0]
  time_t timestamp = Time.now();
   d56b4:	f001 fb96 	bl	d6de4 <_ZN9TimeClass3nowEv>
   d56b8:	9008      	str	r0, [sp, #32]
  memcpy(&bleFrame[2], &timestamp, sizeof(timestamp));
   d56ba:	9808      	ldr	r0, [sp, #32]
   d56bc:	f8c6 0002 	str.w	r0, [r6, #2]

  // Send BLE data to nRF52840
  Serial1.write(bleFrame, sizeof(bleFrame));
   d56c0:	f001 fc02 	bl	d6ec8 <_Z22__fetch_global_Serial1v>
   d56c4:	6803      	ldr	r3, [r0, #0]
   d56c6:	4907      	ldr	r1, [pc, #28]	; (d56e4 <_Z16updateStateTimerv+0x18c>)
   d56c8:	68db      	ldr	r3, [r3, #12]
   d56ca:	2206      	movs	r2, #6
   d56cc:	4798      	blx	r3
}
   d56ce:	b00a      	add	sp, #40	; 0x28
   d56d0:	ecbd 8b02 	vpop	{d8}
   d56d4:	bd70      	pop	{r4, r5, r6, pc}
   d56d6:	bf00      	nop
   d56d8:	2003e424 	.word	0x2003e424
   d56dc:	000d7ef7 	.word	0x000d7ef7
   d56e0:	000d7f09 	.word	0x000d7f09
   d56e4:	2003e45c 	.word	0x2003e45c
   d56e8:	000d7f11 	.word	0x000d7f11
   d56ec:	000d7f19 	.word	0x000d7f19
   d56f0:	2003e434 	.word	0x2003e434
   d56f4:	000d7efc 	.word	0x000d7efc
   d56f8:	000d7f1f 	.word	0x000d7f1f
   d56fc:	000d7f29 	.word	0x000d7f29
   d5700:	000d7f34 	.word	0x000d7f34
   d5704:	000d7f3c 	.word	0x000d7f3c
   d5708:	2003e464 	.word	0x2003e464
   d570c:	000d7f43 	.word	0x000d7f43
   d5710:	2003e46c 	.word	0x2003e46c
   d5714:	000d7ece 	.word	0x000d7ece
   d5718:	2003e420 	.word	0x2003e420

000d571c <setup>:


void setup ()
{
   d571c:	b530      	push	{r4, r5, lr}
   d571e:	ed2d 8b02 	vpush	{d8}
   d5722:	b089      	sub	sp, #36	; 0x24
    static String deviceID(void) { return SystemClass::deviceID(); }

#if HAL_PLATFORM_CLOUD_UDP
    static void keepAlive(unsigned sec)
    {
        particle::protocol::connection_properties_t conn_prop = {0};
   d5724:	2300      	movs	r3, #0
        conn_prop.size = sizeof(conn_prop);
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
   d5726:	2201      	movs	r2, #1
        CLOUD_FN(spark_set_connection_property(particle::protocol::Connection::PING,
                                               sec * 1000, &conn_prop, nullptr),
                 (void)0);
   d5728:	4618      	mov	r0, r3
   d572a:	f247 5130 	movw	r1, #30000	; 0x7530
#if HAL_PLATFORM_CLOUD_UDP
    static void keepAlive(unsigned sec)
    {
        particle::protocol::connection_properties_t conn_prop = {0};
        conn_prop.size = sizeof(conn_prop);
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
   d572e:	9207      	str	r2, [sp, #28]

#if HAL_PLATFORM_CLOUD_UDP
    static void keepAlive(unsigned sec)
    {
        particle::protocol::connection_properties_t conn_prop = {0};
        conn_prop.size = sizeof(conn_prop);
   d5730:	2408      	movs	r4, #8
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
        CLOUD_FN(spark_set_connection_property(particle::protocol::Connection::PING,
                                               sec * 1000, &conn_prop, nullptr),
                 (void)0);
   d5732:	aa06      	add	r2, sp, #24
    static String deviceID(void) { return SystemClass::deviceID(); }

#if HAL_PLATFORM_CLOUD_UDP
    static void keepAlive(unsigned sec)
    {
        particle::protocol::connection_properties_t conn_prop = {0};
   d5734:	9306      	str	r3, [sp, #24]
        conn_prop.size = sizeof(conn_prop);
   d5736:	f8ad 4018 	strh.w	r4, [sp, #24]
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
        CLOUD_FN(spark_set_connection_property(particle::protocol::Connection::PING,
                                               sec * 1000, &conn_prop, nullptr),
                 (void)0);
   d573a:	f000 fb15 	bl	d5d68 <spark_set_connection_property>
  Particle.keepAlive(30);

  Serial.begin(115200);
   d573e:	f001 fc65 	bl	d700c <_Z16_fetch_usbserialv>
   d5742:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d5746:	f001 fc55 	bl	d6ff4 <_ZN9USBSerial5beginEl>
  Serial1.begin(115200);
   d574a:	f001 fbbd 	bl	d6ec8 <_Z22__fetch_global_Serial1v>
   d574e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d5752:	f001 fbb5 	bl	d6ec0 <_ZN11USARTSerial5beginEm>

template <typename TInput>
DeserializationError deserializeJson(
    JsonDocument &doc, const TInput &input,
    NestingLimit nestingLimit = NestingLimit()) {
  return deserialize<JsonDeserializer>(doc, input, nestingLimit);
   d5756:	f04f 020a 	mov.w	r2, #10
   d575a:	493d      	ldr	r1, [pc, #244]	; (d5850 <setup+0x134>)
   d575c:	483d      	ldr	r0, [pc, #244]	; (d5854 <setup+0x138>)
   d575e:	f7ff fac1 	bl	d4ce4 <_ZN19ArduinoJson6101_00011deserializeINS_16JsonDeserializerE6StringEENS_9enable_ifIXntsrNS_8is_arrayIT0_EE5valueENS_20DeserializationErrorEE4typeERNS_12JsonDocumentERKS5_NS_12NestingLimitE>

  // Current Intelligent Traffic Light state
  deserializeJson(currentStateJson, defaultConf);
  currentStateJson["battery"] = fuel.getSoC();
   d5762:	483d      	ldr	r0, [pc, #244]	; (d5858 <setup+0x13c>)
   d5764:	f000 ff5e 	bl	d6624 <_ZN9FuelGauge6getSoCEv>
  // getOrAddMember(char*)
  // getOrAddMember(const char*)
  // getOrAddMember(const __FlashStringHelper*)
  template <typename TChar>
  FORCE_INLINE VariantRef getOrAddMember(TChar* key) {
    return VariantRef(&_pool, _data.getOrAddMember(adaptString(key), &_pool));
   d5768:	4a3a      	ldr	r2, [pc, #232]	; (d5854 <setup+0x138>)
   d576a:	493c      	ldr	r1, [pc, #240]	; (d585c <setup+0x140>)
   d576c:	f102 0010 	add.w	r0, r2, #16
   d5770:	eeb0 8a40 	vmov.f32	s16, s0
   d5774:	f7fe fef3 	bl	d455e <_ZN19ArduinoJson6101_00011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE>
   d5778:	4602      	mov	r2, r0
   d577a:	b128      	cbz	r0, d5788 <setup+0x6c>
    setType(VALUE_IS_BOOLEAN);
    _content.asInteger = static_cast<UInt>(value);
  }

  void setFloat(Float value) {
    setType(VALUE_IS_FLOAT);
   d577c:	4621      	mov	r1, r4
   d577e:	4420      	add	r0, r4
   d5780:	f7fe fccc 	bl	d411c <_ZN19ArduinoJson6101_00011VariantData7setTypeEh.isra.16>
    _content.asFloat = value;
   d5784:	ed82 8a00 	vstr	s16, [r2]
   d5788:	4c32      	ldr	r4, [pc, #200]	; (d5854 <setup+0x138>)
   d578a:	4935      	ldr	r1, [pc, #212]	; (d5860 <setup+0x144>)
  currentStateJson["state"] = 2;
  currentStateJson["timeout"] = currentStateJson["specificData"]["greenTime"];
  serializeJson(currentStateJson, currentStateString);

  // BLE data
  bleFrame[0] = currentStateJson["state"];
   d578c:	4d35      	ldr	r5, [pc, #212]	; (d5864 <setup+0x148>)
   d578e:	4622      	mov	r2, r4
   d5790:	f104 0010 	add.w	r0, r4, #16
   d5794:	f7fe fee3 	bl	d455e <_ZN19ArduinoJson6101_00011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE>
  template <typename T>
  FORCE_INLINE bool set(
      T value,
      typename enable_if<is_integral<T>::value && is_signed<T>::value>::type * =
          0) const {
    return variantSetSignedInteger(_data, value);
   d5798:	2102      	movs	r1, #2
   d579a:	f7fe fe7c 	bl	d4496 <_ZN19ArduinoJson6101_00023variantSetSignedIntegerIiEEbPNS_11VariantDataET_>
                    public Visitable {
  typedef MemberProxy<TObject, TStringRef> this_type;

 public:
  FORCE_INLINE MemberProxy(TObject variant, TStringRef key)
      : _object(variant), _key(key) {}
   d579e:	4b32      	ldr	r3, [pc, #200]	; (d5868 <setup+0x14c>)
   d57a0:	9303      	str	r3, [sp, #12]
   d57a2:	ab02      	add	r3, sp, #8
   d57a4:	4622      	mov	r2, r4
   d57a6:	9304      	str	r3, [sp, #16]
   d57a8:	4930      	ldr	r1, [pc, #192]	; (d586c <setup+0x150>)
   d57aa:	4b31      	ldr	r3, [pc, #196]	; (d5870 <setup+0x154>)
   d57ac:	9305      	str	r3, [sp, #20]
   d57ae:	f104 0010 	add.w	r0, r4, #16
   d57b2:	9402      	str	r4, [sp, #8]
   d57b4:	f7fe fed3 	bl	d455e <_ZN19ArduinoJson6101_00011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE>
  }

  template <typename TValue>
  FORCE_INLINE typename enable_if<!is_array<TValue>::value, this_type &>::type
  operator=(const TValue &src) {
    getOrAddUpstreamMember().set(src);
   d57b8:	a904      	add	r1, sp, #16
  size_t size() const {
    return variantSize(_data);
  }

 protected:
  VariantRefBase(TData *data) : _data(data) {}
   d57ba:	9006      	str	r0, [sp, #24]
   d57bc:	a806      	add	r0, sp, #24
  friend class VariantConstRef;

 public:
  // Intenal use only
  FORCE_INLINE VariantRef(MemoryPool *pool, VariantData *data)
      : base_type(data), _pool(pool) {}
   d57be:	9407      	str	r4, [sp, #28]
   d57c0:	f7fe ff1e 	bl	d4600 <_ZNK19ArduinoJson6101_00010VariantRef3setINS_11MemberProxyIRKNS2_IRNS_12JsonDocumentEPKcEES6_EEEENS_9enable_ifIXsrNS_11IsVisitableIT_EE5valueEbE4typeERKSD_>
  // Current Intelligent Traffic Light state
  deserializeJson(currentStateJson, defaultConf);
  currentStateJson["battery"] = fuel.getSoC();
  currentStateJson["state"] = 2;
  currentStateJson["timeout"] = currentStateJson["specificData"]["greenTime"];
  serializeJson(currentStateJson, currentStateString);
   d57c4:	492b      	ldr	r1, [pc, #172]	; (d5874 <setup+0x158>)
   d57c6:	1f20      	subs	r0, r4, #4
   d57c8:	f7ff fe38 	bl	d543c <_ZN19ArduinoJson6101_00013serializeJsonINS_17BasicJsonDocumentINS_16DefaultAllocatorEEE6StringEEjRKT_RT0_>
  // JsonVariant getMember(char*)
  // JsonVariant getMember(const char*)
  // JsonVariant getMember(const __FlashStringHelper*)
  template <typename TChar>
  FORCE_INLINE VariantRef getMember(TChar* key) {
    return VariantRef(&_pool, _data.getMember(adaptString(key)));
   d57cc:	4924      	ldr	r1, [pc, #144]	; (d5860 <setup+0x144>)
   d57ce:	f104 0010 	add.w	r0, r4, #16
   d57d2:	f7fe fee3 	bl	d459c <_ZNK19ArduinoJson6101_00011VariantData9getMemberINS_21ConstRamStringAdapterEEEPS0_T_>
  FORCE_INLINE typename enable_if<!is_same<T, ArrayRef>::value &&
                                      !is_same<T, ObjectRef>::value &&
                                      !is_same<T, VariantRef>::value,
                                  typename VariantAs<T>::type>::type
  as() const {
    return variantAs<T>(_data);
   d57d6:	f7ff faab 	bl	d4d30 <_ZN19ArduinoJson6101_0009variantAsIhEENS_9enable_ifIXsrNS_11is_integralIT_EE5valueES3_E4typeEPKNS_11VariantDataE>
   d57da:	4924      	ldr	r1, [pc, #144]	; (d586c <setup+0x150>)

  // BLE data
  bleFrame[0] = currentStateJson["state"];
   d57dc:	7028      	strb	r0, [r5, #0]
   d57de:	f104 0010 	add.w	r0, r4, #16
   d57e2:	f7fe fedb 	bl	d459c <_ZNK19ArduinoJson6101_00011VariantData9getMemberINS_21ConstRamStringAdapterEEEPS0_T_>
   d57e6:	f7ff faa3 	bl	d4d30 <_ZN19ArduinoJson6101_0009variantAsIhEENS_9enable_ifIXsrNS_11is_integralIT_EE5valueES3_E4typeEPKNS_11VariantDataE>
  bleFrame[1] = currentStateJson["timeout"];
   d57ea:	7068      	strb	r0, [r5, #1]
  time_t timestamp = Time.now();
   d57ec:	f001 fafa 	bl	d6de4 <_ZN9TimeClass3nowEv>
   d57f0:	9004      	str	r0, [sp, #16]
  memcpy(&bleFrame[2], &timestamp, sizeof(timestamp));
   d57f2:	9804      	ldr	r0, [sp, #16]
   d57f4:	f8c5 0002 	str.w	r0, [r5, #2]

  // Send BLE data to nRF52840
  Serial1.write(bleFrame, sizeof(bleFrame));
   d57f8:	f001 fb66 	bl	d6ec8 <_Z22__fetch_global_Serial1v>
   d57fc:	6803      	ldr	r3, [r0, #0]
    bool changePeriodFromISR(unsigned period) { return _changePeriod(period, 0, true); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d57fe:	4c1e      	ldr	r4, [pc, #120]	; (d5878 <setup+0x15c>)
   d5800:	68db      	ldr	r3, [r3, #12]
   d5802:	2206      	movs	r2, #6
   d5804:	4629      	mov	r1, r5
   d5806:	4798      	blx	r3

    template<typename T>
    static inline bool _variable(const T *varKey, const String *userVar, const CloudVariableTypeString& userVarType)
    {
        spark_variable_t extra;
        extra.size = sizeof(extra);
   d5808:	2308      	movs	r3, #8
   d580a:	f8ad 3018 	strh.w	r3, [sp, #24]
        extra.update = update_string_variable;
   d580e:	4b1b      	ldr	r3, [pc, #108]	; (d587c <setup+0x160>)
   d5810:	9307      	str	r3, [sp, #28]
        return CLOUD_FN(spark_variable(varKey, userVar, CloudVariableTypeString::value(), &extra), false);
   d5812:	2204      	movs	r2, #4
   d5814:	ab06      	add	r3, sp, #24
   d5816:	4917      	ldr	r1, [pc, #92]	; (d5874 <setup+0x158>)
   d5818:	4811      	ldr	r0, [pc, #68]	; (d5860 <setup+0x144>)
   d581a:	f000 fa75 	bl	d5d08 <spark_variable>
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return CLOUD_FN(register_function(call_raw_user_function, (void*)func, funcKey), false);
   d581e:	4a18      	ldr	r2, [pc, #96]	; (d5880 <setup+0x164>)
   d5820:	4918      	ldr	r1, [pc, #96]	; (d5884 <setup+0x168>)
   d5822:	4819      	ldr	r0, [pc, #100]	; (d5888 <setup+0x16c>)
   d5824:	f000 fbd7 	bl	d5fd6 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d5828:	2200      	movs	r2, #0
   d582a:	4611      	mov	r1, r2
   d582c:	4620      	mov	r0, r4
   d582e:	f7fe fc8b 	bl	d4148 <_ZN5Timer5_stopEjb>
    bool isActive() const { return isValid() && os_timer_is_active(handle, nullptr); }

    bool _start(unsigned block, bool fromISR=false)
    {
        stop(fromISR);
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   d5832:	68a0      	ldr	r0, [r4, #8]
   d5834:	b140      	cbz	r0, d5848 <setup+0x12c>
   d5836:	2300      	movs	r3, #0
   d5838:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   d583c:	e88d 000c 	stmia.w	sp, {r2, r3}
   d5840:	4619      	mov	r1, r3
   d5842:	461a      	mov	r2, r3
   d5844:	f000 f8ec 	bl	d5a20 <os_timer_change>

  // Cloud variables
  Particle.function("changeConf",changeConf);

  currentStateTimer.start();
}
   d5848:	b009      	add	sp, #36	; 0x24
   d584a:	ecbd 8b02 	vpop	{d8}
   d584e:	bd30      	pop	{r4, r5, pc}
   d5850:	2003e410 	.word	0x2003e410
   d5854:	2003e424 	.word	0x2003e424
   d5858:	2003e464 	.word	0x2003e464
   d585c:	000d7f43 	.word	0x000d7f43
   d5860:	000d7f19 	.word	0x000d7f19
   d5864:	2003e45c 	.word	0x2003e45c
   d5868:	000d7efc 	.word	0x000d7efc
   d586c:	000d7f11 	.word	0x000d7f11
   d5870:	000d7f1f 	.word	0x000d7f1f
   d5874:	2003e46c 	.word	0x2003e46c
   d5878:	2003e440 	.word	0x2003e440
   d587c:	000d40b3 	.word	0x000d40b3
   d5880:	000d7f4b 	.word	0x000d7f4b
   d5884:	000d546d 	.word	0x000d546d
   d5888:	000d5fab 	.word	0x000d5fab

000d588c <_GLOBAL__sub_I_currentStateString>:


void loop ()
{

   d588c:	b5f0      	push	{r4, r5, r6, r7, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d588e:	4b32      	ldr	r3, [pc, #200]	; (d5958 <_GLOBAL__sub_I_currentStateString+0xcc>)
#include "ArduinoJson.h"

// ------------ Global variables ------------

// The default state of Intelligent Traffic Light is normal cycle
static const String defaultConf = "{\"mode\":\"dynamic\", \"specificData\":{\"redTime\":30,\"yellowTime\":6,\"greenTime\":30}}";
   d5890:	4c32      	ldr	r4, [pc, #200]	; (d595c <_GLOBAL__sub_I_currentStateString+0xd0>)
   d5892:	4e33      	ldr	r6, [pc, #204]	; (d5960 <_GLOBAL__sub_I_currentStateString+0xd4>)
   d5894:	4f33      	ldr	r7, [pc, #204]	; (d5964 <_GLOBAL__sub_I_currentStateString+0xd8>)


void loop ()
{

   d5896:	b089      	sub	sp, #36	; 0x24
   d5898:	2500      	movs	r5, #0
   d589a:	701d      	strb	r5, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d589c:	f000 f900 	bl	d5aa0 <HAL_Pin_Map>
#include "ArduinoJson.h"

// ------------ Global variables ------------

// The default state of Intelligent Traffic Light is normal cycle
static const String defaultConf = "{\"mode\":\"dynamic\", \"specificData\":{\"redTime\":30,\"yellowTime\":6,\"greenTime\":30}}";
   d58a0:	4931      	ldr	r1, [pc, #196]	; (d5968 <_GLOBAL__sub_I_currentStateString+0xdc>)
   d58a2:	4620      	mov	r0, r4
   d58a4:	f001 fa01 	bl	d6caa <_ZN6StringC1EPK19__FlashStringHelper>
   d58a8:	4620      	mov	r0, r4

// DynamicJsonDocument for managing state and string for receiving/send the state
String currentStateString;
   d58aa:	4c30      	ldr	r4, [pc, #192]	; (d596c <_GLOBAL__sub_I_currentStateString+0xe0>)
#include "ArduinoJson.h"

// ------------ Global variables ------------

// The default state of Intelligent Traffic Light is normal cycle
static const String defaultConf = "{\"mode\":\"dynamic\", \"specificData\":{\"redTime\":30,\"yellowTime\":6,\"greenTime\":30}}";
   d58ac:	4632      	mov	r2, r6
   d58ae:	4639      	mov	r1, r7
   d58b0:	f001 fc7e 	bl	d71b0 <__aeabi_atexit>

// DynamicJsonDocument for managing state and string for receiving/send the state
String currentStateString;
   d58b4:	492e      	ldr	r1, [pc, #184]	; (d5970 <_GLOBAL__sub_I_currentStateString+0xe4>)
   d58b6:	4620      	mov	r0, r4
   d58b8:	f001 f9f7 	bl	d6caa <_ZN6StringC1EPK19__FlashStringHelper>
   d58bc:	4620      	mov	r0, r4
DynamicJsonDocument currentStateJson (1024);
   d58be:	4c2d      	ldr	r4, [pc, #180]	; (d5974 <_GLOBAL__sub_I_currentStateString+0xe8>)

// The default state of Intelligent Traffic Light is normal cycle
static const String defaultConf = "{\"mode\":\"dynamic\", \"specificData\":{\"redTime\":30,\"yellowTime\":6,\"greenTime\":30}}";

// DynamicJsonDocument for managing state and string for receiving/send the state
String currentStateString;
   d58c0:	4632      	mov	r2, r6
   d58c2:	4639      	mov	r1, r7
   d58c4:	f001 fc74 	bl	d71b0 <__aeabi_atexit>
DynamicJsonDocument currentStateJson (1024);
   d58c8:	f04f 0200 	mov.w	r2, #0
   d58cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
   d58d0:	4620      	mov	r0, r4
   d58d2:	f7fe fdc7 	bl	d4464 <_ZN19ArduinoJson6101_00017BasicJsonDocumentINS_16DefaultAllocatorEEC1EjS1_>
   d58d6:	4620      	mov	r0, r4

// Battery indicator
FuelGauge fuel;
   d58d8:	4c27      	ldr	r4, [pc, #156]	; (d5978 <_GLOBAL__sub_I_currentStateString+0xec>)
// The default state of Intelligent Traffic Light is normal cycle
static const String defaultConf = "{\"mode\":\"dynamic\", \"specificData\":{\"redTime\":30,\"yellowTime\":6,\"greenTime\":30}}";

// DynamicJsonDocument for managing state and string for receiving/send the state
String currentStateString;
DynamicJsonDocument currentStateJson (1024);
   d58da:	4928      	ldr	r1, [pc, #160]	; (d597c <_GLOBAL__sub_I_currentStateString+0xf0>)
   d58dc:	4632      	mov	r2, r6
   d58de:	f001 fc67 	bl	d71b0 <__aeabi_atexit>

// Battery indicator
FuelGauge fuel;
   d58e2:	4629      	mov	r1, r5
   d58e4:	4620      	mov	r0, r4
   d58e6:	f000 fe5d 	bl	d65a4 <_ZN9FuelGaugeC1Eb>
   d58ea:	4632      	mov	r2, r6
   d58ec:	4924      	ldr	r1, [pc, #144]	; (d5980 <_GLOBAL__sub_I_currentStateString+0xf4>)
   d58ee:	4620      	mov	r0, r4
   d58f0:	f001 fc5e 	bl	d71b0 <__aeabi_atexit>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d58f4:	4b23      	ldr	r3, [pc, #140]	; (d5984 <_GLOBAL__sub_I_currentStateString+0xf8>)
   d58f6:	9304      	str	r3, [sp, #16]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d58f8:	af04      	add	r7, sp, #16
{
public:

    typedef std::function<void(void)> timer_callback_fn;

    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d58fa:	4c23      	ldr	r4, [pc, #140]	; (d5988 <_GLOBAL__sub_I_currentStateString+0xfc>)
   d58fc:	4b23      	ldr	r3, [pc, #140]	; (d598c <_GLOBAL__sub_I_currentStateString+0x100>)
   d58fe:	6023      	str	r3, [r4, #0]
   d5900:	e897 0003 	ldmia.w	r7, {r0, r1}
   d5904:	aa02      	add	r2, sp, #8
      __a = _GLIBCXX_MOVE(__b);
   d5906:	f104 030c 	add.w	r3, r4, #12
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d590a:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d590e:	e893 0003 	ldmia.w	r3, {r0, r1}
   d5912:	e887 0003 	stmia.w	r7, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d5916:	e892 0003 	ldmia.w	r2, {r0, r1}
   d591a:	e883 0003 	stmia.w	r3, {r0, r1}
   d591e:	4b1c      	ldr	r3, [pc, #112]	; (d5990 <_GLOBAL__sub_I_currentStateString+0x104>)
   d5920:	6163      	str	r3, [r4, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5922:	69a3      	ldr	r3, [r4, #24]
   d5924:	9307      	str	r3, [sp, #28]
      __b = _GLIBCXX_MOVE(__tmp);
   d5926:	4b1b      	ldr	r3, [pc, #108]	; (d5994 <_GLOBAL__sub_I_currentStateString+0x108>)
   d5928:	61a3      	str	r3, [r4, #24]
   d592a:	7125      	strb	r5, [r4, #4]
   d592c:	60a5      	str	r5, [r4, #8]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d592e:	4623      	mov	r3, r4
   d5930:	4a19      	ldr	r2, [pc, #100]	; (d5998 <_GLOBAL__sub_I_currentStateString+0x10c>)
   d5932:	9501      	str	r5, [sp, #4]
   d5934:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d5938:	9500      	str	r5, [sp, #0]
   d593a:	f104 0008 	add.w	r0, r4, #8
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d593e:	9506      	str	r5, [sp, #24]
   d5940:	f000 f856 	bl	d59f0 <os_timer_create>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5944:	4638      	mov	r0, r7
   d5946:	f7fe fbf6 	bl	d4136 <_ZNSt14_Function_baseD1Ev>

// Timer for updating ITL current state
Timer currentStateTimer (1000, updateStateTimer);
   d594a:	4632      	mov	r2, r6
   d594c:	4913      	ldr	r1, [pc, #76]	; (d599c <_GLOBAL__sub_I_currentStateString+0x110>)
   d594e:	4620      	mov	r0, r4
   d5950:	f001 fc2e 	bl	d71b0 <__aeabi_atexit>


void loop ()
{

   d5954:	b009      	add	sp, #36	; 0x24
   d5956:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5958:	2003e40c 	.word	0x2003e40c
   d595c:	2003e410 	.word	0x2003e410
   d5960:	2003e408 	.word	0x2003e408
   d5964:	000d6c1d 	.word	0x000d6c1d
   d5968:	000d7f56 	.word	0x000d7f56
   d596c:	2003e46c 	.word	0x2003e46c
   d5970:	000d7ece 	.word	0x000d7ece
   d5974:	2003e420 	.word	0x2003e420
   d5978:	2003e464 	.word	0x2003e464
   d597c:	000d4129 	.word	0x000d4129
   d5980:	000d65c3 	.word	0x000d65c3
   d5984:	000d5559 	.word	0x000d5559
   d5988:	2003e440 	.word	0x2003e440
   d598c:	000d7eb4 	.word	0x000d7eb4
   d5990:	000d40bd 	.word	0x000d40bd
   d5994:	000d40b9 	.word	0x000d40b9
   d5998:	000d40e1 	.word	0x000d40e1
   d599c:	000d4169 	.word	0x000d4169

000d59a0 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d59a0:	b508      	push	{r3, lr}
   d59a2:	4b02      	ldr	r3, [pc, #8]	; (d59ac <os_thread_is_current+0xc>)
   d59a4:	681b      	ldr	r3, [r3, #0]
   d59a6:	689b      	ldr	r3, [r3, #8]
   d59a8:	9301      	str	r3, [sp, #4]
   d59aa:	bd08      	pop	{r3, pc}
   d59ac:	00030248 	.word	0x00030248

000d59b0 <os_thread_yield>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d59b0:	b508      	push	{r3, lr}
   d59b2:	4b02      	ldr	r3, [pc, #8]	; (d59bc <os_thread_yield+0xc>)
   d59b4:	681b      	ldr	r3, [r3, #0]
   d59b6:	68db      	ldr	r3, [r3, #12]
   d59b8:	9301      	str	r3, [sp, #4]
   d59ba:	bd08      	pop	{r3, pc}
   d59bc:	00030248 	.word	0x00030248

000d59c0 <os_thread_join>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d59c0:	b508      	push	{r3, lr}
   d59c2:	4b02      	ldr	r3, [pc, #8]	; (d59cc <os_thread_join+0xc>)
   d59c4:	681b      	ldr	r3, [r3, #0]
   d59c6:	691b      	ldr	r3, [r3, #16]
   d59c8:	9301      	str	r3, [sp, #4]
   d59ca:	bd08      	pop	{r3, pc}
   d59cc:	00030248 	.word	0x00030248

000d59d0 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d59d0:	b508      	push	{r3, lr}
   d59d2:	4b02      	ldr	r3, [pc, #8]	; (d59dc <os_thread_cleanup+0xc>)
   d59d4:	681b      	ldr	r3, [r3, #0]
   d59d6:	695b      	ldr	r3, [r3, #20]
   d59d8:	9301      	str	r3, [sp, #4]
   d59da:	bd08      	pop	{r3, pc}
   d59dc:	00030248 	.word	0x00030248

000d59e0 <os_thread_scheduling>:
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   d59e0:	b508      	push	{r3, lr}
   d59e2:	4b02      	ldr	r3, [pc, #8]	; (d59ec <os_thread_scheduling+0xc>)
   d59e4:	681b      	ldr	r3, [r3, #0]
   d59e6:	69db      	ldr	r3, [r3, #28]
   d59e8:	9301      	str	r3, [sp, #4]
   d59ea:	bd08      	pop	{r3, pc}
   d59ec:	00030248 	.word	0x00030248

000d59f0 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   d59f0:	b508      	push	{r3, lr}
   d59f2:	4b02      	ldr	r3, [pc, #8]	; (d59fc <os_timer_create+0xc>)
   d59f4:	681b      	ldr	r3, [r3, #0]
   d59f6:	6a1b      	ldr	r3, [r3, #32]
   d59f8:	9301      	str	r3, [sp, #4]
   d59fa:	bd08      	pop	{r3, pc}
   d59fc:	00030248 	.word	0x00030248

000d5a00 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   d5a00:	b508      	push	{r3, lr}
   d5a02:	4b02      	ldr	r3, [pc, #8]	; (d5a0c <os_timer_destroy+0xc>)
   d5a04:	681b      	ldr	r3, [r3, #0]
   d5a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5a08:	9301      	str	r3, [sp, #4]
   d5a0a:	bd08      	pop	{r3, pc}
   d5a0c:	00030248 	.word	0x00030248

000d5a10 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   d5a10:	b508      	push	{r3, lr}
   d5a12:	4b02      	ldr	r3, [pc, #8]	; (d5a1c <os_timer_get_id+0xc>)
   d5a14:	681b      	ldr	r3, [r3, #0]
   d5a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5a18:	9301      	str	r3, [sp, #4]
   d5a1a:	bd08      	pop	{r3, pc}
   d5a1c:	00030248 	.word	0x00030248

000d5a20 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   d5a20:	b508      	push	{r3, lr}
   d5a22:	4b02      	ldr	r3, [pc, #8]	; (d5a2c <os_timer_change+0xc>)
   d5a24:	681b      	ldr	r3, [r3, #0]
   d5a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5a28:	9301      	str	r3, [sp, #4]
   d5a2a:	bd08      	pop	{r3, pc}
   d5a2c:	00030248 	.word	0x00030248

000d5a30 <os_mutex_create>:

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d5a30:	b508      	push	{r3, lr}
   d5a32:	4b02      	ldr	r3, [pc, #8]	; (d5a3c <os_mutex_create+0xc>)
   d5a34:	681b      	ldr	r3, [r3, #0]
   d5a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5a38:	9301      	str	r3, [sp, #4]
   d5a3a:	bd08      	pop	{r3, pc}
   d5a3c:	00030248 	.word	0x00030248

000d5a40 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5a40:	b508      	push	{r3, lr}
   d5a42:	4b02      	ldr	r3, [pc, #8]	; (d5a4c <os_mutex_recursive_create+0xc>)
   d5a44:	681b      	ldr	r3, [r3, #0]
   d5a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5a48:	9301      	str	r3, [sp, #4]
   d5a4a:	bd08      	pop	{r3, pc}
   d5a4c:	00030248 	.word	0x00030248

000d5a50 <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   d5a50:	b508      	push	{r3, lr}
   d5a52:	4b02      	ldr	r3, [pc, #8]	; (d5a5c <os_timer_set_id+0xc>)
   d5a54:	681b      	ldr	r3, [r3, #0]
   d5a56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d5a58:	9301      	str	r3, [sp, #4]
   d5a5a:	bd08      	pop	{r3, pc}
   d5a5c:	00030248 	.word	0x00030248

000d5a60 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5a60:	b508      	push	{r3, lr}
   d5a62:	4b02      	ldr	r3, [pc, #8]	; (d5a6c <HAL_RNG_GetRandomNumber+0xc>)
   d5a64:	681b      	ldr	r3, [r3, #0]
   d5a66:	685b      	ldr	r3, [r3, #4]
   d5a68:	9301      	str	r3, [sp, #4]
   d5a6a:	bd08      	pop	{r3, pc}
   d5a6c:	00030218 	.word	0x00030218

000d5a70 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d5a70:	b508      	push	{r3, lr}
   d5a72:	4b02      	ldr	r3, [pc, #8]	; (d5a7c <HAL_Timer_Get_Milli_Seconds+0xc>)
   d5a74:	681b      	ldr	r3, [r3, #0]
   d5a76:	695b      	ldr	r3, [r3, #20]
   d5a78:	9301      	str	r3, [sp, #4]
   d5a7a:	bd08      	pop	{r3, pc}
   d5a7c:	00030218 	.word	0x00030218

000d5a80 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d5a80:	b508      	push	{r3, lr}
   d5a82:	4b02      	ldr	r3, [pc, #8]	; (d5a8c <HAL_RTC_Get_UnixTime+0xc>)
   d5a84:	681b      	ldr	r3, [r3, #0]
   d5a86:	69db      	ldr	r3, [r3, #28]
   d5a88:	9301      	str	r3, [sp, #4]
   d5a8a:	bd08      	pop	{r3, pc}
   d5a8c:	00030218 	.word	0x00030218

000d5a90 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d5a90:	b508      	push	{r3, lr}
   d5a92:	4b02      	ldr	r3, [pc, #8]	; (d5a9c <HAL_RTC_Time_Is_Valid+0xc>)
   d5a94:	681b      	ldr	r3, [r3, #0]
   d5a96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d5a98:	9301      	str	r3, [sp, #4]
   d5a9a:	bd08      	pop	{r3, pc}
   d5a9c:	00030218 	.word	0x00030218

000d5aa0 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
   d5aa0:	b508      	push	{r3, lr}
   d5aa2:	4b02      	ldr	r3, [pc, #8]	; (d5aac <HAL_Pin_Map+0xc>)
   d5aa4:	681b      	ldr	r3, [r3, #0]
   d5aa6:	681b      	ldr	r3, [r3, #0]
   d5aa8:	9301      	str	r3, [sp, #4]
   d5aaa:	bd08      	pop	{r3, pc}
   d5aac:	0003022c 	.word	0x0003022c

000d5ab0 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
   d5ab0:	b508      	push	{r3, lr}
   d5ab2:	4b02      	ldr	r3, [pc, #8]	; (d5abc <HAL_I2C_Request_Data+0xc>)
   d5ab4:	681b      	ldr	r3, [r3, #0]
   d5ab6:	695b      	ldr	r3, [r3, #20]
   d5ab8:	9301      	str	r3, [sp, #4]
   d5aba:	bd08      	pop	{r3, pc}
   d5abc:	00030228 	.word	0x00030228

000d5ac0 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
   d5ac0:	b508      	push	{r3, lr}
   d5ac2:	4b02      	ldr	r3, [pc, #8]	; (d5acc <HAL_I2C_Begin_Transmission+0xc>)
   d5ac4:	681b      	ldr	r3, [r3, #0]
   d5ac6:	699b      	ldr	r3, [r3, #24]
   d5ac8:	9301      	str	r3, [sp, #4]
   d5aca:	bd08      	pop	{r3, pc}
   d5acc:	00030228 	.word	0x00030228

000d5ad0 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d5ad0:	b508      	push	{r3, lr}
   d5ad2:	4b02      	ldr	r3, [pc, #8]	; (d5adc <HAL_I2C_End_Transmission+0xc>)
   d5ad4:	681b      	ldr	r3, [r3, #0]
   d5ad6:	69db      	ldr	r3, [r3, #28]
   d5ad8:	9301      	str	r3, [sp, #4]
   d5ada:	bd08      	pop	{r3, pc}
   d5adc:	00030228 	.word	0x00030228

000d5ae0 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d5ae0:	b508      	push	{r3, lr}
   d5ae2:	4b02      	ldr	r3, [pc, #8]	; (d5aec <HAL_I2C_Write_Data+0xc>)
   d5ae4:	681b      	ldr	r3, [r3, #0]
   d5ae6:	6a1b      	ldr	r3, [r3, #32]
   d5ae8:	9301      	str	r3, [sp, #4]
   d5aea:	bd08      	pop	{r3, pc}
   d5aec:	00030228 	.word	0x00030228

000d5af0 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d5af0:	b508      	push	{r3, lr}
   d5af2:	4b02      	ldr	r3, [pc, #8]	; (d5afc <HAL_I2C_Available_Data+0xc>)
   d5af4:	681b      	ldr	r3, [r3, #0]
   d5af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5af8:	9301      	str	r3, [sp, #4]
   d5afa:	bd08      	pop	{r3, pc}
   d5afc:	00030228 	.word	0x00030228

000d5b00 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d5b00:	b508      	push	{r3, lr}
   d5b02:	4b02      	ldr	r3, [pc, #8]	; (d5b0c <HAL_I2C_Read_Data+0xc>)
   d5b04:	681b      	ldr	r3, [r3, #0]
   d5b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5b08:	9301      	str	r3, [sp, #4]
   d5b0a:	bd08      	pop	{r3, pc}
   d5b0c:	00030228 	.word	0x00030228

000d5b10 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d5b10:	b508      	push	{r3, lr}
   d5b12:	4b02      	ldr	r3, [pc, #8]	; (d5b1c <HAL_I2C_Peek_Data+0xc>)
   d5b14:	681b      	ldr	r3, [r3, #0]
   d5b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5b18:	9301      	str	r3, [sp, #4]
   d5b1a:	bd08      	pop	{r3, pc}
   d5b1c:	00030228 	.word	0x00030228

000d5b20 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d5b20:	b508      	push	{r3, lr}
   d5b22:	4b02      	ldr	r3, [pc, #8]	; (d5b2c <HAL_I2C_Flush_Data+0xc>)
   d5b24:	681b      	ldr	r3, [r3, #0]
   d5b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5b28:	9301      	str	r3, [sp, #4]
   d5b2a:	bd08      	pop	{r3, pc}
   d5b2c:	00030228 	.word	0x00030228

000d5b30 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d5b30:	b508      	push	{r3, lr}
   d5b32:	4b02      	ldr	r3, [pc, #8]	; (d5b3c <HAL_I2C_Init+0xc>)
   d5b34:	681b      	ldr	r3, [r3, #0]
   d5b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5b38:	9301      	str	r3, [sp, #4]
   d5b3a:	bd08      	pop	{r3, pc}
   d5b3c:	00030228 	.word	0x00030228

000d5b40 <HAL_I2C_Acquire>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
   d5b40:	b508      	push	{r3, lr}
   d5b42:	4b02      	ldr	r3, [pc, #8]	; (d5b4c <HAL_I2C_Acquire+0xc>)
   d5b44:	681b      	ldr	r3, [r3, #0]
   d5b46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5b48:	9301      	str	r3, [sp, #4]
   d5b4a:	bd08      	pop	{r3, pc}
   d5b4c:	00030228 	.word	0x00030228

000d5b50 <HAL_I2C_Release>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
   d5b50:	b508      	push	{r3, lr}
   d5b52:	4b02      	ldr	r3, [pc, #8]	; (d5b5c <HAL_I2C_Release+0xc>)
   d5b54:	681b      	ldr	r3, [r3, #0]
   d5b56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5b58:	9301      	str	r3, [sp, #4]
   d5b5a:	bd08      	pop	{r3, pc}
   d5b5c:	00030228 	.word	0x00030228

000d5b60 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d5b60:	b508      	push	{r3, lr}
   d5b62:	4b02      	ldr	r3, [pc, #8]	; (d5b6c <inet_inet_ntop+0xc>)
   d5b64:	681b      	ldr	r3, [r3, #0]
   d5b66:	695b      	ldr	r3, [r3, #20]
   d5b68:	9301      	str	r3, [sp, #4]
   d5b6a:	bd08      	pop	{r3, pc}
   d5b6c:	00030264 	.word	0x00030264

000d5b70 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5b70:	b508      	push	{r3, lr}
   d5b72:	4b02      	ldr	r3, [pc, #8]	; (d5b7c <netdb_freeaddrinfo+0xc>)
   d5b74:	681b      	ldr	r3, [r3, #0]
   d5b76:	689b      	ldr	r3, [r3, #8]
   d5b78:	9301      	str	r3, [sp, #4]
   d5b7a:	bd08      	pop	{r3, pc}
   d5b7c:	00030268 	.word	0x00030268

000d5b80 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5b80:	b508      	push	{r3, lr}
   d5b82:	4b02      	ldr	r3, [pc, #8]	; (d5b8c <netdb_getaddrinfo+0xc>)
   d5b84:	681b      	ldr	r3, [r3, #0]
   d5b86:	68db      	ldr	r3, [r3, #12]
   d5b88:	9301      	str	r3, [sp, #4]
   d5b8a:	bd08      	pop	{r3, pc}
   d5b8c:	00030268 	.word	0x00030268

000d5b90 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d5b90:	b508      	push	{r3, lr}
   d5b92:	4b02      	ldr	r3, [pc, #8]	; (d5b9c <HAL_SPI_Init+0xc>)
   d5b94:	681b      	ldr	r3, [r3, #0]
   d5b96:	69db      	ldr	r3, [r3, #28]
   d5b98:	9301      	str	r3, [sp, #4]
   d5b9a:	bd08      	pop	{r3, pc}
   d5b9c:	00030230 	.word	0x00030230

000d5ba0 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d5ba0:	b508      	push	{r3, lr}
   d5ba2:	4b02      	ldr	r3, [pc, #8]	; (d5bac <HAL_USART_Init+0xc>)
   d5ba4:	681b      	ldr	r3, [r3, #0]
   d5ba6:	681b      	ldr	r3, [r3, #0]
   d5ba8:	9301      	str	r3, [sp, #4]
   d5baa:	bd08      	pop	{r3, pc}
   d5bac:	0003023c 	.word	0x0003023c

000d5bb0 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d5bb0:	b508      	push	{r3, lr}
   d5bb2:	4b02      	ldr	r3, [pc, #8]	; (d5bbc <HAL_USART_Write_Data+0xc>)
   d5bb4:	681b      	ldr	r3, [r3, #0]
   d5bb6:	68db      	ldr	r3, [r3, #12]
   d5bb8:	9301      	str	r3, [sp, #4]
   d5bba:	bd08      	pop	{r3, pc}
   d5bbc:	0003023c 	.word	0x0003023c

000d5bc0 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d5bc0:	b508      	push	{r3, lr}
   d5bc2:	4b02      	ldr	r3, [pc, #8]	; (d5bcc <HAL_USART_Available_Data+0xc>)
   d5bc4:	681b      	ldr	r3, [r3, #0]
   d5bc6:	691b      	ldr	r3, [r3, #16]
   d5bc8:	9301      	str	r3, [sp, #4]
   d5bca:	bd08      	pop	{r3, pc}
   d5bcc:	0003023c 	.word	0x0003023c

000d5bd0 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d5bd0:	b508      	push	{r3, lr}
   d5bd2:	4b02      	ldr	r3, [pc, #8]	; (d5bdc <HAL_USART_Read_Data+0xc>)
   d5bd4:	681b      	ldr	r3, [r3, #0]
   d5bd6:	695b      	ldr	r3, [r3, #20]
   d5bd8:	9301      	str	r3, [sp, #4]
   d5bda:	bd08      	pop	{r3, pc}
   d5bdc:	0003023c 	.word	0x0003023c

000d5be0 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d5be0:	b508      	push	{r3, lr}
   d5be2:	4b02      	ldr	r3, [pc, #8]	; (d5bec <HAL_USART_Peek_Data+0xc>)
   d5be4:	681b      	ldr	r3, [r3, #0]
   d5be6:	699b      	ldr	r3, [r3, #24]
   d5be8:	9301      	str	r3, [sp, #4]
   d5bea:	bd08      	pop	{r3, pc}
   d5bec:	0003023c 	.word	0x0003023c

000d5bf0 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d5bf0:	b508      	push	{r3, lr}
   d5bf2:	4b02      	ldr	r3, [pc, #8]	; (d5bfc <HAL_USART_Flush_Data+0xc>)
   d5bf4:	681b      	ldr	r3, [r3, #0]
   d5bf6:	69db      	ldr	r3, [r3, #28]
   d5bf8:	9301      	str	r3, [sp, #4]
   d5bfa:	bd08      	pop	{r3, pc}
   d5bfc:	0003023c 	.word	0x0003023c

000d5c00 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d5c00:	b508      	push	{r3, lr}
   d5c02:	4b02      	ldr	r3, [pc, #8]	; (d5c0c <HAL_USART_Available_Data_For_Write+0xc>)
   d5c04:	681b      	ldr	r3, [r3, #0]
   d5c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5c08:	9301      	str	r3, [sp, #4]
   d5c0a:	bd08      	pop	{r3, pc}
   d5c0c:	0003023c 	.word	0x0003023c

000d5c10 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
   d5c10:	b508      	push	{r3, lr}
   d5c12:	4b02      	ldr	r3, [pc, #8]	; (d5c1c <HAL_USART_BeginConfig+0xc>)
   d5c14:	681b      	ldr	r3, [r3, #0]
   d5c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5c18:	9301      	str	r3, [sp, #4]
   d5c1a:	bd08      	pop	{r3, pc}
   d5c1c:	0003023c 	.word	0x0003023c

000d5c20 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5c20:	b508      	push	{r3, lr}
   d5c22:	4b02      	ldr	r3, [pc, #8]	; (d5c2c <HAL_USB_USART_Init+0xc>)
   d5c24:	681b      	ldr	r3, [r3, #0]
   d5c26:	681b      	ldr	r3, [r3, #0]
   d5c28:	9301      	str	r3, [sp, #4]
   d5c2a:	bd08      	pop	{r3, pc}
   d5c2c:	0003024c 	.word	0x0003024c

000d5c30 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d5c30:	b508      	push	{r3, lr}
   d5c32:	4b02      	ldr	r3, [pc, #8]	; (d5c3c <HAL_USB_USART_Begin+0xc>)
   d5c34:	681b      	ldr	r3, [r3, #0]
   d5c36:	685b      	ldr	r3, [r3, #4]
   d5c38:	9301      	str	r3, [sp, #4]
   d5c3a:	bd08      	pop	{r3, pc}
   d5c3c:	0003024c 	.word	0x0003024c

000d5c40 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5c40:	b508      	push	{r3, lr}
   d5c42:	4b02      	ldr	r3, [pc, #8]	; (d5c4c <HAL_USB_USART_Available_Data+0xc>)
   d5c44:	681b      	ldr	r3, [r3, #0]
   d5c46:	691b      	ldr	r3, [r3, #16]
   d5c48:	9301      	str	r3, [sp, #4]
   d5c4a:	bd08      	pop	{r3, pc}
   d5c4c:	0003024c 	.word	0x0003024c

000d5c50 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5c50:	b508      	push	{r3, lr}
   d5c52:	4b02      	ldr	r3, [pc, #8]	; (d5c5c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5c54:	681b      	ldr	r3, [r3, #0]
   d5c56:	695b      	ldr	r3, [r3, #20]
   d5c58:	9301      	str	r3, [sp, #4]
   d5c5a:	bd08      	pop	{r3, pc}
   d5c5c:	0003024c 	.word	0x0003024c

000d5c60 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5c60:	b508      	push	{r3, lr}
   d5c62:	4b02      	ldr	r3, [pc, #8]	; (d5c6c <HAL_USB_USART_Receive_Data+0xc>)
   d5c64:	681b      	ldr	r3, [r3, #0]
   d5c66:	699b      	ldr	r3, [r3, #24]
   d5c68:	9301      	str	r3, [sp, #4]
   d5c6a:	bd08      	pop	{r3, pc}
   d5c6c:	0003024c 	.word	0x0003024c

000d5c70 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5c70:	b508      	push	{r3, lr}
   d5c72:	4b02      	ldr	r3, [pc, #8]	; (d5c7c <HAL_USB_USART_Send_Data+0xc>)
   d5c74:	681b      	ldr	r3, [r3, #0]
   d5c76:	69db      	ldr	r3, [r3, #28]
   d5c78:	9301      	str	r3, [sp, #4]
   d5c7a:	bd08      	pop	{r3, pc}
   d5c7c:	0003024c 	.word	0x0003024c

000d5c80 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5c80:	b508      	push	{r3, lr}
   d5c82:	4b02      	ldr	r3, [pc, #8]	; (d5c8c <HAL_USB_USART_Flush_Data+0xc>)
   d5c84:	681b      	ldr	r3, [r3, #0]
   d5c86:	6a1b      	ldr	r3, [r3, #32]
   d5c88:	9301      	str	r3, [sp, #4]
   d5c8a:	bd08      	pop	{r3, pc}
   d5c8c:	0003024c 	.word	0x0003024c

000d5c90 <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d5c90:	b508      	push	{r3, lr}
   d5c92:	4b02      	ldr	r3, [pc, #8]	; (d5c9c <system_mode+0xc>)
   d5c94:	681b      	ldr	r3, [r3, #0]
   d5c96:	681b      	ldr	r3, [r3, #0]
   d5c98:	9301      	str	r3, [sp, #4]
   d5c9a:	bd08      	pop	{r3, pc}
   d5c9c:	00030220 	.word	0x00030220

000d5ca0 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5ca0:	b508      	push	{r3, lr}
   d5ca2:	4b02      	ldr	r3, [pc, #8]	; (d5cac <set_system_mode+0xc>)
   d5ca4:	681b      	ldr	r3, [r3, #0]
   d5ca6:	685b      	ldr	r3, [r3, #4]
   d5ca8:	9301      	str	r3, [sp, #4]
   d5caa:	bd08      	pop	{r3, pc}
   d5cac:	00030220 	.word	0x00030220

000d5cb0 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d5cb0:	b508      	push	{r3, lr}
   d5cb2:	4b02      	ldr	r3, [pc, #8]	; (d5cbc <application_thread_current+0xc>)
   d5cb4:	681b      	ldr	r3, [r3, #0]
   d5cb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5cb8:	9301      	str	r3, [sp, #4]
   d5cba:	bd08      	pop	{r3, pc}
   d5cbc:	00030220 	.word	0x00030220

000d5cc0 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d5cc0:	b508      	push	{r3, lr}
   d5cc2:	4b02      	ldr	r3, [pc, #8]	; (d5ccc <application_thread_invoke+0xc>)
   d5cc4:	681b      	ldr	r3, [r3, #0]
   d5cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d5cc8:	9301      	str	r3, [sp, #4]
   d5cca:	bd08      	pop	{r3, pc}
   d5ccc:	00030220 	.word	0x00030220

000d5cd0 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d5cd0:	b508      	push	{r3, lr}
   d5cd2:	4b02      	ldr	r3, [pc, #8]	; (d5cdc <system_thread_get_state+0xc>)
   d5cd4:	681b      	ldr	r3, [r3, #0]
   d5cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d5cd8:	9301      	str	r3, [sp, #4]
   d5cda:	bd08      	pop	{r3, pc}
   d5cdc:	00030220 	.word	0x00030220

000d5ce0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5ce0:	b508      	push	{r3, lr}
   d5ce2:	4b03      	ldr	r3, [pc, #12]	; (d5cf0 <system_ctrl_set_app_request_handler+0x10>)
   d5ce4:	681b      	ldr	r3, [r3, #0]
   d5ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d5cea:	9301      	str	r3, [sp, #4]
   d5cec:	bd08      	pop	{r3, pc}
   d5cee:	0000      	.short	0x0000
   d5cf0:	00030220 	.word	0x00030220

000d5cf4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5cf4:	b508      	push	{r3, lr}
   d5cf6:	4b03      	ldr	r3, [pc, #12]	; (d5d04 <system_ctrl_set_result+0x10>)
   d5cf8:	681b      	ldr	r3, [r3, #0]
   d5cfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d5cfe:	9301      	str	r3, [sp, #4]
   d5d00:	bd08      	pop	{r3, pc}
   d5d02:	0000      	.short	0x0000
   d5d04:	00030220 	.word	0x00030220

000d5d08 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d5d08:	b508      	push	{r3, lr}
   d5d0a:	4b02      	ldr	r3, [pc, #8]	; (d5d14 <spark_variable+0xc>)
   d5d0c:	681b      	ldr	r3, [r3, #0]
   d5d0e:	681b      	ldr	r3, [r3, #0]
   d5d10:	9301      	str	r3, [sp, #4]
   d5d12:	bd08      	pop	{r3, pc}
   d5d14:	00030244 	.word	0x00030244

000d5d18 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d5d18:	b508      	push	{r3, lr}
   d5d1a:	4b02      	ldr	r3, [pc, #8]	; (d5d24 <spark_function+0xc>)
   d5d1c:	681b      	ldr	r3, [r3, #0]
   d5d1e:	685b      	ldr	r3, [r3, #4]
   d5d20:	9301      	str	r3, [sp, #4]
   d5d22:	bd08      	pop	{r3, pc}
   d5d24:	00030244 	.word	0x00030244

000d5d28 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d5d28:	b508      	push	{r3, lr}
   d5d2a:	4b02      	ldr	r3, [pc, #8]	; (d5d34 <spark_process+0xc>)
   d5d2c:	681b      	ldr	r3, [r3, #0]
   d5d2e:	689b      	ldr	r3, [r3, #8]
   d5d30:	9301      	str	r3, [sp, #4]
   d5d32:	bd08      	pop	{r3, pc}
   d5d34:	00030244 	.word	0x00030244

000d5d38 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d5d38:	b508      	push	{r3, lr}
   d5d3a:	4b02      	ldr	r3, [pc, #8]	; (d5d44 <spark_cloud_flag_connected+0xc>)
   d5d3c:	681b      	ldr	r3, [r3, #0]
   d5d3e:	695b      	ldr	r3, [r3, #20]
   d5d40:	9301      	str	r3, [sp, #4]
   d5d42:	bd08      	pop	{r3, pc}
   d5d44:	00030244 	.word	0x00030244

000d5d48 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d5d48:	b508      	push	{r3, lr}
   d5d4a:	4b02      	ldr	r3, [pc, #8]	; (d5d54 <spark_send_event+0xc>)
   d5d4c:	681b      	ldr	r3, [r3, #0]
   d5d4e:	6a1b      	ldr	r3, [r3, #32]
   d5d50:	9301      	str	r3, [sp, #4]
   d5d52:	bd08      	pop	{r3, pc}
   d5d54:	00030244 	.word	0x00030244

000d5d58 <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d5d58:	b508      	push	{r3, lr}
   d5d5a:	4b02      	ldr	r3, [pc, #8]	; (d5d64 <spark_sync_time_pending+0xc>)
   d5d5c:	681b      	ldr	r3, [r3, #0]
   d5d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5d60:	9301      	str	r3, [sp, #4]
   d5d62:	bd08      	pop	{r3, pc}
   d5d64:	00030244 	.word	0x00030244

000d5d68 <spark_set_connection_property>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
   d5d68:	b508      	push	{r3, lr}
   d5d6a:	4b02      	ldr	r3, [pc, #8]	; (d5d74 <spark_set_connection_property+0xc>)
   d5d6c:	681b      	ldr	r3, [r3, #0]
   d5d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d5d70:	9301      	str	r3, [sp, #4]
   d5d72:	bd08      	pop	{r3, pc}
   d5d74:	00030244 	.word	0x00030244

000d5d78 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5d78:	b508      	push	{r3, lr}
   d5d7a:	4b02      	ldr	r3, [pc, #8]	; (d5d84 <spark_set_random_seed_from_cloud_handler+0xc>)
   d5d7c:	681b      	ldr	r3, [r3, #0]
   d5d7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5d80:	9301      	str	r3, [sp, #4]
   d5d82:	bd08      	pop	{r3, pc}
   d5d84:	00030244 	.word	0x00030244

000d5d88 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5d88:	b508      	push	{r3, lr}
   d5d8a:	4b02      	ldr	r3, [pc, #8]	; (d5d94 <network_connect+0xc>)
   d5d8c:	681b      	ldr	r3, [r3, #0]
   d5d8e:	685b      	ldr	r3, [r3, #4]
   d5d90:	9301      	str	r3, [sp, #4]
   d5d92:	bd08      	pop	{r3, pc}
   d5d94:	00030240 	.word	0x00030240

000d5d98 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5d98:	b508      	push	{r3, lr}
   d5d9a:	4b02      	ldr	r3, [pc, #8]	; (d5da4 <network_connecting+0xc>)
   d5d9c:	681b      	ldr	r3, [r3, #0]
   d5d9e:	689b      	ldr	r3, [r3, #8]
   d5da0:	9301      	str	r3, [sp, #4]
   d5da2:	bd08      	pop	{r3, pc}
   d5da4:	00030240 	.word	0x00030240

000d5da8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5da8:	b508      	push	{r3, lr}
   d5daa:	4b02      	ldr	r3, [pc, #8]	; (d5db4 <network_disconnect+0xc>)
   d5dac:	681b      	ldr	r3, [r3, #0]
   d5dae:	68db      	ldr	r3, [r3, #12]
   d5db0:	9301      	str	r3, [sp, #4]
   d5db2:	bd08      	pop	{r3, pc}
   d5db4:	00030240 	.word	0x00030240

000d5db8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5db8:	b508      	push	{r3, lr}
   d5dba:	4b02      	ldr	r3, [pc, #8]	; (d5dc4 <network_ready+0xc>)
   d5dbc:	681b      	ldr	r3, [r3, #0]
   d5dbe:	691b      	ldr	r3, [r3, #16]
   d5dc0:	9301      	str	r3, [sp, #4]
   d5dc2:	bd08      	pop	{r3, pc}
   d5dc4:	00030240 	.word	0x00030240

000d5dc8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5dc8:	b508      	push	{r3, lr}
   d5dca:	4b02      	ldr	r3, [pc, #8]	; (d5dd4 <network_on+0xc>)
   d5dcc:	681b      	ldr	r3, [r3, #0]
   d5dce:	695b      	ldr	r3, [r3, #20]
   d5dd0:	9301      	str	r3, [sp, #4]
   d5dd2:	bd08      	pop	{r3, pc}
   d5dd4:	00030240 	.word	0x00030240

000d5dd8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5dd8:	b508      	push	{r3, lr}
   d5dda:	4b02      	ldr	r3, [pc, #8]	; (d5de4 <network_off+0xc>)
   d5ddc:	681b      	ldr	r3, [r3, #0]
   d5dde:	699b      	ldr	r3, [r3, #24]
   d5de0:	9301      	str	r3, [sp, #4]
   d5de2:	bd08      	pop	{r3, pc}
   d5de4:	00030240 	.word	0x00030240

000d5de8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5de8:	b508      	push	{r3, lr}
   d5dea:	4b02      	ldr	r3, [pc, #8]	; (d5df4 <network_listen+0xc>)
   d5dec:	681b      	ldr	r3, [r3, #0]
   d5dee:	69db      	ldr	r3, [r3, #28]
   d5df0:	9301      	str	r3, [sp, #4]
   d5df2:	bd08      	pop	{r3, pc}
   d5df4:	00030240 	.word	0x00030240

000d5df8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5df8:	b508      	push	{r3, lr}
   d5dfa:	4b02      	ldr	r3, [pc, #8]	; (d5e04 <network_listening+0xc>)
   d5dfc:	681b      	ldr	r3, [r3, #0]
   d5dfe:	6a1b      	ldr	r3, [r3, #32]
   d5e00:	9301      	str	r3, [sp, #4]
   d5e02:	bd08      	pop	{r3, pc}
   d5e04:	00030240 	.word	0x00030240

000d5e08 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5e08:	b508      	push	{r3, lr}
   d5e0a:	4b02      	ldr	r3, [pc, #8]	; (d5e14 <network_set_listen_timeout+0xc>)
   d5e0c:	681b      	ldr	r3, [r3, #0]
   d5e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5e10:	9301      	str	r3, [sp, #4]
   d5e12:	bd08      	pop	{r3, pc}
   d5e14:	00030240 	.word	0x00030240

000d5e18 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5e18:	b508      	push	{r3, lr}
   d5e1a:	4b02      	ldr	r3, [pc, #8]	; (d5e24 <network_get_listen_timeout+0xc>)
   d5e1c:	681b      	ldr	r3, [r3, #0]
   d5e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5e20:	9301      	str	r3, [sp, #4]
   d5e22:	bd08      	pop	{r3, pc}
   d5e24:	00030240 	.word	0x00030240

000d5e28 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5e28:	b508      	push	{r3, lr}
   d5e2a:	4b02      	ldr	r3, [pc, #8]	; (d5e34 <malloc+0xc>)
   d5e2c:	681b      	ldr	r3, [r3, #0]
   d5e2e:	681b      	ldr	r3, [r3, #0]
   d5e30:	9301      	str	r3, [sp, #4]
   d5e32:	bd08      	pop	{r3, pc}
   d5e34:	0003021c 	.word	0x0003021c

000d5e38 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5e38:	b508      	push	{r3, lr}
   d5e3a:	4b02      	ldr	r3, [pc, #8]	; (d5e44 <free+0xc>)
   d5e3c:	681b      	ldr	r3, [r3, #0]
   d5e3e:	685b      	ldr	r3, [r3, #4]
   d5e40:	9301      	str	r3, [sp, #4]
   d5e42:	bd08      	pop	{r3, pc}
   d5e44:	0003021c 	.word	0x0003021c

000d5e48 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d5e48:	b508      	push	{r3, lr}
   d5e4a:	4b02      	ldr	r3, [pc, #8]	; (d5e54 <realloc+0xc>)
   d5e4c:	681b      	ldr	r3, [r3, #0]
   d5e4e:	689b      	ldr	r3, [r3, #8]
   d5e50:	9301      	str	r3, [sp, #4]
   d5e52:	bd08      	pop	{r3, pc}
   d5e54:	0003021c 	.word	0x0003021c

000d5e58 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d5e58:	b508      	push	{r3, lr}
   d5e5a:	4b02      	ldr	r3, [pc, #8]	; (d5e64 <abort+0xc>)
   d5e5c:	681b      	ldr	r3, [r3, #0]
   d5e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5e60:	9301      	str	r3, [sp, #4]
   d5e62:	bd08      	pop	{r3, pc}
   d5e64:	0003021c 	.word	0x0003021c

000d5e68 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d5e68:	b508      	push	{r3, lr}
   d5e6a:	4b02      	ldr	r3, [pc, #8]	; (d5e74 <_malloc_r+0xc>)
   d5e6c:	681b      	ldr	r3, [r3, #0]
   d5e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5e70:	9301      	str	r3, [sp, #4]
   d5e72:	bd08      	pop	{r3, pc}
   d5e74:	0003021c 	.word	0x0003021c

000d5e78 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d5e78:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5e7a:	6883      	ldr	r3, [r0, #8]
   d5e7c:	4604      	mov	r4, r0
   d5e7e:	b90b      	cbnz	r3, d5e84 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d5e80:	f001 f99d 	bl	d71be <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5e84:	68c3      	ldr	r3, [r0, #12]
   d5e86:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d5e88:	68a3      	ldr	r3, [r4, #8]
   d5e8a:	b11b      	cbz	r3, d5e94 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5e8c:	2203      	movs	r2, #3
   d5e8e:	4621      	mov	r1, r4
   d5e90:	4620      	mov	r0, r4
   d5e92:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d5e94:	4620      	mov	r0, r4
   d5e96:	2110      	movs	r1, #16
}
   d5e98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d5e9c:	f001 b98d 	b.w	d71ba <_ZdlPvj>

000d5ea0 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d5ea0:	2200      	movs	r2, #0
   d5ea2:	4611      	mov	r1, r2
   d5ea4:	6840      	ldr	r0, [r0, #4]
   d5ea6:	f7ff bf87 	b.w	d5db8 <network_ready>

000d5eaa <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5eaa:	2200      	movs	r2, #0
   d5eac:	4611      	mov	r1, r2
   d5eae:	6840      	ldr	r0, [r0, #4]
   d5eb0:	f7ff bfa2 	b.w	d5df8 <network_listening>

000d5eb4 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5eb4:	2200      	movs	r2, #0
   d5eb6:	4611      	mov	r1, r2
   d5eb8:	6840      	ldr	r0, [r0, #4]
   d5eba:	f7ff bfad 	b.w	d5e18 <network_get_listen_timeout>

000d5ebe <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5ebe:	2200      	movs	r2, #0
   d5ec0:	6840      	ldr	r0, [r0, #4]
   d5ec2:	f7ff bfa1 	b.w	d5e08 <network_set_listen_timeout>

000d5ec6 <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5ec6:	2200      	movs	r2, #0
   d5ec8:	f081 0101 	eor.w	r1, r1, #1
   d5ecc:	6840      	ldr	r0, [r0, #4]
   d5ece:	f7ff bf8b 	b.w	d5de8 <network_listen>

000d5ed2 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d5ed2:	2300      	movs	r3, #0
   d5ed4:	461a      	mov	r2, r3
   d5ed6:	4619      	mov	r1, r3
   d5ed8:	6840      	ldr	r0, [r0, #4]
   d5eda:	f7ff bf7d 	b.w	d5dd8 <network_off>

000d5ede <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d5ede:	2300      	movs	r3, #0
   d5ee0:	461a      	mov	r2, r3
   d5ee2:	4619      	mov	r1, r3
   d5ee4:	6840      	ldr	r0, [r0, #4]
   d5ee6:	f7ff bf6f 	b.w	d5dc8 <network_on>

000d5eea <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5eea:	2200      	movs	r2, #0
   d5eec:	4611      	mov	r1, r2
   d5eee:	6840      	ldr	r0, [r0, #4]
   d5ef0:	f7ff bf52 	b.w	d5d98 <network_connecting>

000d5ef4 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5ef4:	2200      	movs	r2, #0
   d5ef6:	2102      	movs	r1, #2
   d5ef8:	6840      	ldr	r0, [r0, #4]
   d5efa:	f7ff bf55 	b.w	d5da8 <network_disconnect>

000d5efe <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5efe:	2300      	movs	r3, #0
   d5f00:	461a      	mov	r2, r3
   d5f02:	6840      	ldr	r0, [r0, #4]
   d5f04:	f7ff bf40 	b.w	d5d88 <network_connect>

000d5f08 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d5f08:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d5f0a:	4c0c      	ldr	r4, [pc, #48]	; (d5f3c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x34>)
   d5f0c:	2528      	movs	r5, #40	; 0x28
   d5f0e:	462a      	mov	r2, r5
   d5f10:	2100      	movs	r1, #0
   d5f12:	4620      	mov	r0, r4
   d5f14:	f001 ff59 	bl	d7dca <memset>
        cid = -1;
   d5f18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d5f1c:	6063      	str	r3, [r4, #4]
        size = sizeof(*this);
   d5f1e:	8025      	strh	r5, [r4, #0]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5f20:	4c07      	ldr	r4, [pc, #28]	; (d5f40 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x38>)
   d5f22:	2304      	movs	r3, #4
{
    CellularDevice device;

public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d5f24:	4620      	mov	r0, r4
   d5f26:	6063      	str	r3, [r4, #4]
    char imei[16];
    int dev;

    CellularDevice()
    {
        memset(this, 0, sizeof(*this));
   d5f28:	252c      	movs	r5, #44	; 0x2c
   d5f2a:	4b06      	ldr	r3, [pc, #24]	; (d5f44 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x3c>)
   d5f2c:	f840 3b08 	str.w	r3, [r0], #8
   d5f30:	462a      	mov	r2, r5
   d5f32:	2100      	movs	r1, #0
   d5f34:	f001 ff49 	bl	d7dca <memset>
        size = sizeof(*this);
   d5f38:	8125      	strh	r5, [r4, #8]
   d5f3a:	bd38      	pop	{r3, r4, r5, pc}
   d5f3c:	2003e4b0 	.word	0x2003e4b0
   d5f40:	2003e47c 	.word	0x2003e47c
   d5f44:	000d7fb0 	.word	0x000d7fb0

000d5f48 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5f48:	4770      	bx	lr

000d5f4a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d5f4a:	2000      	movs	r0, #0
   d5f4c:	4770      	bx	lr

000d5f4e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5f4e:	b510      	push	{r4, lr}
   d5f50:	2110      	movs	r1, #16
   d5f52:	4604      	mov	r4, r0
   d5f54:	f001 f931 	bl	d71ba <_ZdlPvj>
   d5f58:	4620      	mov	r0, r4
   d5f5a:	bd10      	pop	{r4, pc}

000d5f5c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d5f5c:	b508      	push	{r3, lr}
      { delete this; }
   d5f5e:	b108      	cbz	r0, d5f64 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d5f60:	f7ff fff5 	bl	d5f4e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d5f64:	bd08      	pop	{r3, pc}

000d5f66 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d5f66:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d5f68:	68c4      	ldr	r4, [r0, #12]
   d5f6a:	b1ec      	cbz	r4, d5fa8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x42>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d5f6c:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d5f6e:	2b02      	cmp	r3, #2
   d5f70:	d102      	bne.n	d5f78 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x12>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d5f72:	68e0      	ldr	r0, [r4, #12]
   d5f74:	f7ff ff60 	bl	d5e38 <free>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d5f78:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d5f7a:	b135      	cbz	r5, d5f8a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x24>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5f7c:	4628      	mov	r0, r5
   d5f7e:	f7fe f8da 	bl	d4136 <_ZNSt14_Function_baseD1Ev>
   d5f82:	2110      	movs	r1, #16
   d5f84:	4628      	mov	r0, r5
   d5f86:	f001 f918 	bl	d71ba <_ZdlPvj>
   d5f8a:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d5f8c:	b135      	cbz	r5, d5f9c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x36>
   d5f8e:	4628      	mov	r0, r5
   d5f90:	f7fe f8d1 	bl	d4136 <_ZNSt14_Function_baseD1Ev>
   d5f94:	2110      	movs	r1, #16
   d5f96:	4628      	mov	r0, r5
   d5f98:	f001 f90f 	bl	d71ba <_ZdlPvj>
   d5f9c:	4620      	mov	r0, r4
   d5f9e:	2114      	movs	r1, #20
   d5fa0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d5fa4:	f001 b909 	b.w	d71ba <_ZdlPvj>
   d5fa8:	bd38      	pop	{r3, r4, r5, pc}

000d5faa <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
#endif

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d5faa:	b510      	push	{r4, lr}
   d5fac:	b088      	sub	sp, #32
   d5fae:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d5fb0:	4668      	mov	r0, sp
   d5fb2:	f000 fe7a 	bl	d6caa <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   d5fb6:	4669      	mov	r1, sp
   d5fb8:	a804      	add	r0, sp, #16
   d5fba:	f000 fe98 	bl	d6cee <_ZN6StringC1ERKS_>
   d5fbe:	a804      	add	r0, sp, #16
   d5fc0:	47a0      	blx	r4
   d5fc2:	4604      	mov	r4, r0
   d5fc4:	a804      	add	r0, sp, #16
   d5fc6:	f000 fe29 	bl	d6c1c <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d5fca:	4668      	mov	r0, sp
   d5fcc:	f000 fe26 	bl	d6c1c <_ZN6StringD1Ev>
    return (*fn)(p);
}
   d5fd0:	4620      	mov	r0, r4
   d5fd2:	b008      	add	sp, #32
   d5fd4:	bd10      	pop	{r4, pc}

000d5fd6 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d5fd6:	b5f0      	push	{r4, r5, r6, r7, lr}
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
   d5fd8:	2410      	movs	r4, #16
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d5fda:	b085      	sub	sp, #20
   d5fdc:	4607      	mov	r7, r0
   d5fde:	460e      	mov	r6, r1
   d5fe0:	4615      	mov	r5, r2
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
   d5fe2:	2100      	movs	r1, #0
   d5fe4:	4622      	mov	r2, r4
   d5fe6:	4668      	mov	r0, sp
   d5fe8:	f001 feef 	bl	d7dca <memset>
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d5fec:	2200      	movs	r2, #0
   d5fee:	4669      	mov	r1, sp
   d5ff0:	4610      	mov	r0, r2

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
    desc.size = sizeof(desc);
   d5ff2:	f8ad 4000 	strh.w	r4, [sp]
    desc.fn = fn;
   d5ff6:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
   d5ff8:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
   d5ffa:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d5ffc:	f7ff fe8c 	bl	d5d18 <spark_function>
}
   d6000:	b005      	add	sp, #20
   d6002:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6004 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d6004:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d6006:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d6008:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d600a:	b17c      	cbz	r4, d602c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d600c:	6863      	ldr	r3, [r4, #4]
   d600e:	3b01      	subs	r3, #1
   d6010:	6063      	str	r3, [r4, #4]
   d6012:	b95b      	cbnz	r3, d602c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d6014:	6823      	ldr	r3, [r4, #0]
   d6016:	4620      	mov	r0, r4
   d6018:	689b      	ldr	r3, [r3, #8]
   d601a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d601c:	68a3      	ldr	r3, [r4, #8]
   d601e:	3b01      	subs	r3, #1
   d6020:	60a3      	str	r3, [r4, #8]
   d6022:	b91b      	cbnz	r3, d602c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d6024:	6823      	ldr	r3, [r4, #0]
   d6026:	4620      	mov	r0, r4
   d6028:	68db      	ldr	r3, [r3, #12]
   d602a:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d602c:	4628      	mov	r0, r5
   d602e:	bd38      	pop	{r3, r4, r5, pc}

000d6030 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d6030:	b513      	push	{r0, r1, r4, lr}
   d6032:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6034:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d6038:	2300      	movs	r3, #0
   d603a:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d603c:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d603e:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d6040:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6042:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d6044:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d6046:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6048:	f7ff ffdc 	bl	d6004 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d604c:	4620      	mov	r0, r4
   d604e:	b002      	add	sp, #8
   d6050:	bd10      	pop	{r4, pc}

000d6052 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d6052:	680b      	ldr	r3, [r1, #0]
   d6054:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d6056:	b113      	cbz	r3, d605e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d6058:	685a      	ldr	r2, [r3, #4]
   d605a:	3201      	adds	r2, #1
   d605c:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d605e:	4770      	bx	lr

000d6060 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d6060:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6062:	460c      	mov	r4, r1
   d6064:	ad02      	add	r5, sp, #8
   d6066:	f854 3b04 	ldr.w	r3, [r4], #4
   d606a:	f845 3d08 	str.w	r3, [r5, #-8]!
   d606e:	4606      	mov	r6, r0
   d6070:	460f      	mov	r7, r1
   d6072:	a801      	add	r0, sp, #4
   d6074:	4621      	mov	r1, r4
   d6076:	f7ff ffec 	bl	d6052 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d607a:	4629      	mov	r1, r5
   d607c:	4630      	mov	r0, r6
   d607e:	f7ff ffd7 	bl	d6030 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6082:	a801      	add	r0, sp, #4
   d6084:	f7ff ffbe 	bl	d6004 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6088:	4620      	mov	r0, r4
   d608a:	f7ff ffbb 	bl	d6004 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d608e:	4638      	mov	r0, r7
   d6090:	2108      	movs	r1, #8
   d6092:	f001 f892 	bl	d71ba <_ZdlPvj>
        return p;
    }
   d6096:	4630      	mov	r0, r6
   d6098:	b003      	add	sp, #12
   d609a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d609c <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d609c:	b513      	push	{r0, r1, r4, lr}
   d609e:	460b      	mov	r3, r1
   d60a0:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d60a2:	c803      	ldmia	r0, {r0, r1}
   d60a4:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d60a8:	e893 0003 	ldmia.w	r3, {r0, r1}
   d60ac:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d60b0:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d60b4:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d60b8:	b002      	add	sp, #8
   d60ba:	bd10      	pop	{r4, pc}

000d60bc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d60bc:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d60be:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d60c0:	b90a      	cbnz	r2, d60c6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d60c2:	f001 f87c 	bl	d71be <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d60c6:	68c3      	ldr	r3, [r0, #12]
    }
   d60c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d60cc:	4718      	bx	r3

000d60ce <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d60ce:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d60d0:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d60d2:	f100 0110 	add.w	r1, r0, #16
   d60d6:	f7ff fff1 	bl	d60bc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d60da:	bd08      	pop	{r3, pc}

000d60dc <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d60dc:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d60de:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d60e0:	b90a      	cbnz	r2, d60e6 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d60e2:	f001 f86c 	bl	d71be <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d60e6:	68c3      	ldr	r3, [r0, #12]
    }
   d60e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d60ec:	4718      	bx	r3

000d60ee <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d60ee:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d60f0:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d60f2:	f100 0110 	add.w	r1, r0, #16
   d60f6:	f7ff fff1 	bl	d60dc <_ZNKSt8functionIFvRKbEEclES1_>
   d60fa:	bd08      	pop	{r3, pc}

000d60fc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d60fc:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d60fe:	2300      	movs	r3, #0
   d6100:	6083      	str	r3, [r0, #8]
   d6102:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d6104:	4604      	mov	r4, r0
   d6106:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d6108:	b12b      	cbz	r3, d6116 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d610a:	2202      	movs	r2, #2
   d610c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d610e:	68eb      	ldr	r3, [r5, #12]
   d6110:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d6112:	68ab      	ldr	r3, [r5, #8]
   d6114:	60a3      	str	r3, [r4, #8]
	}
    }
   d6116:	4620      	mov	r0, r4
   d6118:	bd38      	pop	{r3, r4, r5, pc}
	...

000d611c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d611c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
   d6120:	f64f 739c 	movw	r3, #65436	; 0xff9c
   d6124:	b086      	sub	sp, #24
   d6126:	6804      	ldr	r4, [r0, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d6128:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d612c:	808b      	strh	r3, [r1, #4]
   d612e:	2300      	movs	r3, #0
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d6130:	680f      	ldr	r7, [r1, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d6132:	f88d 3000 	strb.w	r3, [sp]
      __b = _GLIBCXX_MOVE(__tmp);
   d6136:	600b      	str	r3, [r1, #0]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d6138:	f04f 0002 	mov.w	r0, #2
   d613c:	e8d4 1f4f 	ldrexb	r1, [r4]
   d6140:	4299      	cmp	r1, r3
   d6142:	d103      	bne.n	d614c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x30>
   d6144:	e8c4 0f45 	strexb	r5, r0, [r4]
   d6148:	2d00      	cmp	r5, #0
   d614a:	d1f7      	bne.n	d613c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d614c:	d002      	beq.n	d6154 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x38>
   d614e:	f88d 1000 	strb.w	r1, [sp]
   d6152:	e06b      	b.n	d622c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d6154:	f114 050c 	adds.w	r5, r4, #12
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d6158:	bf1e      	ittt	ne
   d615a:	60e7      	strne	r7, [r4, #12]
   d615c:	8222      	strhne	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d615e:	461f      	movne	r7, r3
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d6160:	2301      	movs	r3, #1
   d6162:	f3bf 8f5f 	dmb	sy

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d6166:	2000      	movs	r0, #0
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d6168:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d616a:	f104 0308 	add.w	r3, r4, #8
   d616e:	f3bf 8f5f 	dmb	sy
   d6172:	e853 6f00 	ldrex	r6, [r3]
   d6176:	e843 0200 	strex	r2, r0, [r3]
   d617a:	2a00      	cmp	r2, #0
   d617c:	d1f9      	bne.n	d6172 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x56>
   d617e:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d6182:	2e00      	cmp	r6, #0
   d6184:	d052      	beq.n	d622c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d6186:	f7ff fd93 	bl	d5cb0 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d618a:	b120      	cbz	r0, d6196 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x7a>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d618c:	4629      	mov	r1, r5
   d618e:	4630      	mov	r0, r6
   d6190:	f7ff ff94 	bl	d60bc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d6194:	e043      	b.n	d621e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x102>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d6196:	4631      	mov	r1, r6
   d6198:	4668      	mov	r0, sp
   d619a:	f7ff ffaf 	bl	d60fc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d619e:	68e0      	ldr	r0, [r4, #12]
   d61a0:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d61a4:	b108      	cbz	r0, d61aa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8e>
   d61a6:	f001 fe53 	bl	d7e50 <strdup>
   d61aa:	9004      	str	r0, [sp, #16]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d61ac:	2010      	movs	r0, #16
   d61ae:	f8ad 5014 	strh.w	r5, [sp, #20]
   d61b2:	f7fd ff70 	bl	d4096 <_Znwj>
   d61b6:	4605      	mov	r5, r0
   d61b8:	b330      	cbz	r0, d6208 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xec>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d61ba:	f04f 0800 	mov.w	r8, #0
   d61be:	f8c0 8008 	str.w	r8, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d61c2:	2018      	movs	r0, #24
   d61c4:	f7fd ff67 	bl	d4096 <_Znwj>
   d61c8:	4604      	mov	r4, r0
   d61ca:	b1c0      	cbz	r0, d61fe <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d61cc:	f8c0 8008 	str.w	r8, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d61d0:	4601      	mov	r1, r0
   d61d2:	4668      	mov	r0, sp
   d61d4:	f7ff ff62 	bl	d609c <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d61d8:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   d61da:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d61dc:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d61de:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d61e0:	9202      	str	r2, [sp, #8]
   d61e2:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d61e4:	60e3      	str	r3, [r4, #12]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d61e6:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   d61ea:	82a3      	strh	r3, [r4, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   d61ec:	f64f 739c 	movw	r3, #65436	; 0xff9c
   d61f0:	f8ad 3014 	strh.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d61f4:	9b04      	ldr	r3, [sp, #16]
   d61f6:	9203      	str	r2, [sp, #12]
   d61f8:	6123      	str	r3, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d61fa:	f8cd 8010 	str.w	r8, [sp, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d61fe:	4b0e      	ldr	r3, [pc, #56]	; (d6238 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x11c>)
   d6200:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6202:	4b0e      	ldr	r3, [pc, #56]	; (d623c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x120>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6204:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d6206:	60ab      	str	r3, [r5, #8]
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d6208:	9804      	ldr	r0, [sp, #16]
   d620a:	f7ff fe15 	bl	d5e38 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d620e:	4668      	mov	r0, sp
   d6210:	f7fd ff91 	bl	d4136 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d6214:	2200      	movs	r2, #0
   d6216:	4629      	mov	r1, r5
   d6218:	4809      	ldr	r0, [pc, #36]	; (d6240 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x124>)
   d621a:	f7ff fd51 	bl	d5cc0 <application_thread_invoke>
   d621e:	4630      	mov	r0, r6
   d6220:	f7fd ff89 	bl	d4136 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d6224:	2110      	movs	r1, #16
   d6226:	4630      	mov	r0, r6
   d6228:	f000 ffc7 	bl	d71ba <_ZdlPvj>
   d622c:	4638      	mov	r0, r7
   d622e:	f7ff fe03 	bl	d5e38 <free>
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
    }
   d6232:	b006      	add	sp, #24
   d6234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6238:	000d60cf 	.word	0x000d60cf
   d623c:	000d632d 	.word	0x000d632d
   d6240:	000d5e79 	.word	0x000d5e79

000d6244 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d6244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6248:	b08b      	sub	sp, #44	; 0x2c
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d624a:	ad07      	add	r5, sp, #28
   d624c:	f04f 0b00 	mov.w	fp, #0
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d6250:	4606      	mov	r6, r0
   d6252:	4699      	mov	r9, r3
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d6254:	2014      	movs	r0, #20
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d6256:	230c      	movs	r3, #12
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d6258:	460f      	mov	r7, r1
   d625a:	4690      	mov	r8, r2
   d625c:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d6260:	f8c5 b004 	str.w	fp, [r5, #4]
   d6264:	f8c5 b008 	str.w	fp, [r5, #8]
   d6268:	9307      	str	r3, [sp, #28]
   d626a:	f7fd ff14 	bl	d4096 <_Znwj>
   d626e:	4604      	mov	r4, r0
   d6270:	b138      	cbz	r0, d6282 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x3e>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d6272:	f880 b000 	strb.w	fp, [r0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6276:	f880 b001 	strb.w	fp, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d627a:	f8c0 b004 	str.w	fp, [r0, #4]
   d627e:	f8c0 b008 	str.w	fp, [r0, #8]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d6282:	2300      	movs	r3, #0
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6284:	2010      	movs	r0, #16
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d6286:	9403      	str	r4, [sp, #12]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d6288:	9304      	str	r3, [sp, #16]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d628a:	f7fd ff04 	bl	d4096 <_Znwj>
   d628e:	b128      	cbz	r0, d629c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x58>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d6290:	2301      	movs	r3, #1
   d6292:	6043      	str	r3, [r0, #4]
   d6294:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d6296:	4b23      	ldr	r3, [pc, #140]	; (d6324 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe0>)
   d6298:	6003      	str	r3, [r0, #0]
   d629a:	60c4      	str	r4, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d629c:	9004      	str	r0, [sp, #16]

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d629e:	4b22      	ldr	r3, [pc, #136]	; (d6328 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe4>)
   d62a0:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d62a2:	2008      	movs	r0, #8
   d62a4:	f7fd fef7 	bl	d4096 <_Znwj>
   d62a8:	4604      	mov	r4, r0
   d62aa:	b128      	cbz	r0, d62b8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x74>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d62ac:	9b03      	ldr	r3, [sp, #12]
   d62ae:	f840 3b04 	str.w	r3, [r0], #4
   d62b2:	a904      	add	r1, sp, #16
   d62b4:	f7ff fecd 	bl	d6052 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d62b8:	9500      	str	r5, [sp, #0]
   d62ba:	fa5f f38a 	uxtb.w	r3, sl
   d62be:	464a      	mov	r2, r9
   d62c0:	4641      	mov	r1, r8
   d62c2:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d62c4:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d62c6:	f7ff fd3f 	bl	d5d48 <spark_send_event>
   d62ca:	b9b8      	cbnz	r0, d62fc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d62cc:	9b03      	ldr	r3, [sp, #12]
   d62ce:	785b      	ldrb	r3, [r3, #1]
   d62d0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d62d4:	b993      	cbnz	r3, d62fc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d62d6:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d62da:	a905      	add	r1, sp, #20
   d62dc:	a803      	add	r0, sp, #12
   d62de:	9205      	str	r2, [sp, #20]
   d62e0:	f8ad 3018 	strh.w	r3, [sp, #24]
   d62e4:	f7ff ff1a 	bl	d611c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d62e8:	9805      	ldr	r0, [sp, #20]
   d62ea:	f7ff fda5 	bl	d5e38 <free>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d62ee:	a805      	add	r0, sp, #20
   d62f0:	9909      	ldr	r1, [sp, #36]	; 0x24
   d62f2:	f7ff feb5 	bl	d6060 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d62f6:	a806      	add	r0, sp, #24
   d62f8:	f7ff fe84 	bl	d6004 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d62fc:	9b03      	ldr	r3, [sp, #12]
   d62fe:	9305      	str	r3, [sp, #20]
   d6300:	a904      	add	r1, sp, #16
   d6302:	a806      	add	r0, sp, #24
   d6304:	f7ff fea5 	bl	d6052 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d6308:	a905      	add	r1, sp, #20
   d630a:	4630      	mov	r0, r6
   d630c:	f7ff fe90 	bl	d6030 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6310:	a806      	add	r0, sp, #24
   d6312:	f7ff fe77 	bl	d6004 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6316:	a804      	add	r0, sp, #16
   d6318:	f7ff fe74 	bl	d6004 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
   d631c:	4630      	mov	r0, r6
   d631e:	b00b      	add	sp, #44	; 0x2c
   d6320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6324:	000d7fe4 	.word	0x000d7fe4
   d6328:	000d6499 	.word	0x000d6499

000d632c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d632c:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d632e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6330:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d6332:	d006      	beq.n	d6342 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d6334:	2a03      	cmp	r2, #3
   d6336:	d017      	beq.n	d6368 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d6338:	2a01      	cmp	r2, #1
   d633a:	d121      	bne.n	d6380 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d633c:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d633e:	6003      	str	r3, [r0, #0]
	      break;
   d6340:	e01e      	b.n	d6380 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d6342:	2018      	movs	r0, #24
   d6344:	680e      	ldr	r6, [r1, #0]
   d6346:	f7fd fea6 	bl	d4096 <_Znwj>
   d634a:	4605      	mov	r5, r0
   d634c:	b150      	cbz	r0, d6364 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d634e:	4631      	mov	r1, r6
   d6350:	f7ff fed4 	bl	d60fc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d6354:	6930      	ldr	r0, [r6, #16]
   d6356:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d635a:	b108      	cbz	r0, d6360 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d635c:	f001 fd78 	bl	d7e50 <strdup>
   d6360:	6128      	str	r0, [r5, #16]
   d6362:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d6364:	6025      	str	r5, [r4, #0]
   d6366:	e00b      	b.n	d6380 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d6368:	6804      	ldr	r4, [r0, #0]
   d636a:	b14c      	cbz	r4, d6380 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d636c:	6920      	ldr	r0, [r4, #16]
   d636e:	f7ff fd63 	bl	d5e38 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6372:	4620      	mov	r0, r4
   d6374:	f7fd fedf 	bl	d4136 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d6378:	2118      	movs	r1, #24
   d637a:	4620      	mov	r0, r4
   d637c:	f000 ff1d 	bl	d71ba <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d6380:	2000      	movs	r0, #0
   d6382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6384 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d6384:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6386:	2300      	movs	r3, #0
   d6388:	6083      	str	r3, [r0, #8]
   d638a:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d638c:	4604      	mov	r4, r0
   d638e:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d6390:	b12b      	cbz	r3, d639e <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d6392:	2202      	movs	r2, #2
   d6394:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d6396:	68eb      	ldr	r3, [r5, #12]
   d6398:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d639a:	68ab      	ldr	r3, [r5, #8]
   d639c:	60a3      	str	r3, [r4, #8]
	}
    }
   d639e:	4620      	mov	r0, r4
   d63a0:	bd38      	pop	{r3, r4, r5, pc}

000d63a2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d63a2:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d63a4:	b570      	push	{r4, r5, r6, lr}
   d63a6:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d63a8:	d006      	beq.n	d63b8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d63aa:	2a03      	cmp	r2, #3
   d63ac:	d011      	beq.n	d63d2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d63ae:	2a01      	cmp	r2, #1
   d63b0:	d118      	bne.n	d63e4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d63b2:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d63b4:	6003      	str	r3, [r0, #0]
	      break;
   d63b6:	e015      	b.n	d63e4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d63b8:	2014      	movs	r0, #20
   d63ba:	680e      	ldr	r6, [r1, #0]
   d63bc:	f7fd fe6b 	bl	d4096 <_Znwj>
   d63c0:	4605      	mov	r5, r0
   d63c2:	b120      	cbz	r0, d63ce <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d63c4:	4631      	mov	r1, r6
   d63c6:	f7ff ffdd 	bl	d6384 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d63ca:	7c33      	ldrb	r3, [r6, #16]
   d63cc:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d63ce:	6025      	str	r5, [r4, #0]
   d63d0:	e008      	b.n	d63e4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d63d2:	6804      	ldr	r4, [r0, #0]
   d63d4:	b134      	cbz	r4, d63e4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d63d6:	4620      	mov	r0, r4
   d63d8:	f7fd fead 	bl	d4136 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d63dc:	2114      	movs	r1, #20
   d63de:	4620      	mov	r0, r4
   d63e0:	f000 feeb 	bl	d71ba <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d63e4:	2000      	movs	r0, #0
   d63e6:	bd70      	pop	{r4, r5, r6, pc}

000d63e8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d63e8:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d63ea:	2300      	movs	r3, #0
   d63ec:	b087      	sub	sp, #28
   d63ee:	460c      	mov	r4, r1
   d63f0:	f3bf 8f5f 	dmb	sy
   d63f4:	e850 6f00 	ldrex	r6, [r0]
   d63f8:	e840 3200 	strex	r2, r3, [r0]
   d63fc:	2a00      	cmp	r2, #0
   d63fe:	d1f9      	bne.n	d63f4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d6400:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d6404:	2e00      	cmp	r6, #0
   d6406:	d03f      	beq.n	d6488 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d6408:	4618      	mov	r0, r3
   d640a:	f7ff fc51 	bl	d5cb0 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d640e:	4607      	mov	r7, r0
   d6410:	b120      	cbz	r0, d641c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d6412:	4621      	mov	r1, r4
   d6414:	4630      	mov	r0, r6
   d6416:	f7ff fe61 	bl	d60dc <_ZNKSt8functionIFvRKbEEclES1_>
   d641a:	e02e      	b.n	d647a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d641c:	4631      	mov	r1, r6
   d641e:	a801      	add	r0, sp, #4
   d6420:	f7ff ffb0 	bl	d6384 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d6424:	7823      	ldrb	r3, [r4, #0]
   d6426:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d642a:	2010      	movs	r0, #16
   d642c:	f7fd fe33 	bl	d4096 <_Znwj>
   d6430:	4605      	mov	r5, r0
   d6432:	b1d0      	cbz	r0, d646a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6434:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6436:	2014      	movs	r0, #20
   d6438:	f7fd fe2d 	bl	d4096 <_Znwj>
   d643c:	4604      	mov	r4, r0
   d643e:	b178      	cbz	r0, d6460 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6440:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d6442:	4601      	mov	r1, r0
   d6444:	a801      	add	r0, sp, #4
   d6446:	f7ff fe29 	bl	d609c <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d644a:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d644c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d644e:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6450:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d6452:	9203      	str	r2, [sp, #12]
   d6454:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6456:	60e3      	str	r3, [r4, #12]
   d6458:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d645c:	9204      	str	r2, [sp, #16]
   d645e:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d6460:	4b0a      	ldr	r3, [pc, #40]	; (d648c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d6462:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6464:	4b0a      	ldr	r3, [pc, #40]	; (d6490 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6466:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d6468:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d646a:	a801      	add	r0, sp, #4
   d646c:	f7fd fe63 	bl	d4136 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d6470:	2200      	movs	r2, #0
   d6472:	4629      	mov	r1, r5
   d6474:	4807      	ldr	r0, [pc, #28]	; (d6494 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d6476:	f7ff fc23 	bl	d5cc0 <application_thread_invoke>
   d647a:	4630      	mov	r0, r6
   d647c:	f7fd fe5b 	bl	d4136 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d6480:	2110      	movs	r1, #16
   d6482:	4630      	mov	r0, r6
   d6484:	f000 fe99 	bl	d71ba <_ZdlPvj>
        }
    }
   d6488:	b007      	add	sp, #28
   d648a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d648c:	000d60ef 	.word	0x000d60ef
   d6490:	000d63a3 	.word	0x000d63a3
   d6494:	000d5e79 	.word	0x000d5e79

000d6498 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d6498:	b530      	push	{r4, r5, lr}
   d649a:	b085      	sub	sp, #20
   d649c:	4604      	mov	r4, r0
   d649e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d64a0:	4668      	mov	r0, sp
   d64a2:	4611      	mov	r1, r2
   d64a4:	f7ff fddc 	bl	d6060 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d64a8:	b17c      	cbz	r4, d64ca <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d64aa:	b224      	sxth	r4, r4
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d64ac:	4628      	mov	r0, r5
   d64ae:	b10d      	cbz	r5, d64b4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d64b0:	f001 fcce 	bl	d7e50 <strdup>
   d64b4:	9002      	str	r0, [sp, #8]
   d64b6:	a902      	add	r1, sp, #8
   d64b8:	4668      	mov	r0, sp
   d64ba:	f8ad 400c 	strh.w	r4, [sp, #12]
   d64be:	f7ff fe2d 	bl	d611c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d64c2:	9802      	ldr	r0, [sp, #8]
   d64c4:	f7ff fcb8 	bl	d5e38 <free>
   d64c8:	e01d      	b.n	d6506 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d64ca:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d64cc:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d64d0:	f04f 0201 	mov.w	r2, #1
   d64d4:	e8d0 3f4f 	ldrexb	r3, [r0]
   d64d8:	42a3      	cmp	r3, r4
   d64da:	d103      	bne.n	d64e4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d64dc:	e8c0 2f41 	strexb	r1, r2, [r0]
   d64e0:	2900      	cmp	r1, #0
   d64e2:	d1f7      	bne.n	d64d4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d64e4:	d002      	beq.n	d64ec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d64e6:	f88d 3008 	strb.w	r3, [sp, #8]
   d64ea:	e00c      	b.n	d6506 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d64ec:	f110 010c 	adds.w	r1, r0, #12
   d64f0:	f04f 0301 	mov.w	r3, #1
   d64f4:	bf18      	it	ne
   d64f6:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d64f8:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d64fc:	3004      	adds	r0, #4
   d64fe:	f800 3c03 	strb.w	r3, [r0, #-3]
   d6502:	f7ff ff71 	bl	d63e8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d6506:	a801      	add	r0, sp, #4
   d6508:	f7ff fd7c 	bl	d6004 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d650c:	b005      	add	sp, #20
   d650e:	bd30      	pop	{r4, r5, pc}

000d6510 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6510:	2200      	movs	r2, #0
   d6512:	4611      	mov	r1, r2
   d6514:	6840      	ldr	r0, [r0, #4]
   d6516:	f7ff bc6f 	b.w	d5df8 <network_listening>

000d651a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d651a:	2200      	movs	r2, #0
   d651c:	4611      	mov	r1, r2
   d651e:	6840      	ldr	r0, [r0, #4]
   d6520:	f7ff bc7a 	b.w	d5e18 <network_get_listen_timeout>

000d6524 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6524:	2200      	movs	r2, #0
   d6526:	6840      	ldr	r0, [r0, #4]
   d6528:	f7ff bc6e 	b.w	d5e08 <network_set_listen_timeout>

000d652c <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d652c:	2200      	movs	r2, #0
   d652e:	f081 0101 	eor.w	r1, r1, #1
   d6532:	6840      	ldr	r0, [r0, #4]
   d6534:	f7ff bc58 	b.w	d5de8 <network_listen>

000d6538 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d6538:	2300      	movs	r3, #0
   d653a:	461a      	mov	r2, r3
   d653c:	4619      	mov	r1, r3
   d653e:	6840      	ldr	r0, [r0, #4]
   d6540:	f7ff bc4a 	b.w	d5dd8 <network_off>

000d6544 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d6544:	2300      	movs	r3, #0
   d6546:	461a      	mov	r2, r3
   d6548:	4619      	mov	r1, r3
   d654a:	6840      	ldr	r0, [r0, #4]
   d654c:	f7ff bc3c 	b.w	d5dc8 <network_on>

000d6550 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6550:	2200      	movs	r2, #0
   d6552:	4611      	mov	r1, r2
   d6554:	6840      	ldr	r0, [r0, #4]
   d6556:	f7ff bc2f 	b.w	d5db8 <network_ready>

000d655a <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d655a:	2200      	movs	r2, #0
   d655c:	4611      	mov	r1, r2
   d655e:	6840      	ldr	r0, [r0, #4]
   d6560:	f7ff bc1a 	b.w	d5d98 <network_connecting>

000d6564 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6564:	2200      	movs	r2, #0
   d6566:	2102      	movs	r1, #2
   d6568:	6840      	ldr	r0, [r0, #4]
   d656a:	f7ff bc1d 	b.w	d5da8 <network_disconnect>

000d656e <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d656e:	2300      	movs	r3, #0
   d6570:	461a      	mov	r2, r3
   d6572:	6840      	ldr	r0, [r0, #4]
   d6574:	f7ff bc08 	b.w	d5d88 <network_connect>

000d6578 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d6578:	4b02      	ldr	r3, [pc, #8]	; (d6584 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d657a:	2203      	movs	r2, #3
   d657c:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d657e:	4a02      	ldr	r2, [pc, #8]	; (d6588 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d6580:	601a      	str	r2, [r3, #0]
   d6582:	4770      	bx	lr
   d6584:	2003e4d8 	.word	0x2003e4d8
   d6588:	000d8000 	.word	0x000d8000

000d658c <_ZN9FuelGauge4lockEv>:
    i2c_.write(LSB);
    i2c_.endTransmission(true);
}

bool FuelGauge::lock() {
    return i2c_.lock();
   d658c:	6800      	ldr	r0, [r0, #0]
   d658e:	f000 b8c6 	b.w	d671e <_ZN7TwoWire4lockEv>

000d6592 <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
{
}

FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   d6592:	b510      	push	{r4, lr}
   d6594:	4604      	mov	r4, r0
    : i2c_(i2c),
      lock_(_lock) {
   d6596:	6001      	str	r1, [r0, #0]
   d6598:	7102      	strb	r2, [r0, #4]

    if (lock_) {
   d659a:	b10a      	cbz	r2, d65a0 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   d659c:	f7ff fff6 	bl	d658c <_ZN9FuelGauge4lockEv>
    }
}
   d65a0:	4620      	mov	r0, r4
   d65a2:	bd10      	pop	{r4, pc}

000d65a4 <_ZN9FuelGaugeC1Eb>:
    return &Wire;
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
   d65a4:	b538      	push	{r3, r4, r5, lr}
   d65a6:	4604      	mov	r4, r0
   d65a8:	460d      	mov	r5, r1
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d65aa:	f000 fdbf 	bl	d712c <_Z20__fetch_global_Wire1v>
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
   d65ae:	462a      	mov	r2, r5
   d65b0:	4601      	mov	r1, r0
   d65b2:	4620      	mov	r0, r4
   d65b4:	f7ff ffed 	bl	d6592 <_ZN9FuelGaugeC1ER7TwoWireb>
{
}
   d65b8:	4620      	mov	r0, r4
   d65ba:	bd38      	pop	{r3, r4, r5, pc}

000d65bc <_ZN9FuelGauge6unlockEv>:
bool FuelGauge::lock() {
    return i2c_.lock();
}

bool FuelGauge::unlock() {
	return i2c_.unlock();
   d65bc:	6800      	ldr	r0, [r0, #0]
   d65be:	f000 b8b7 	b.w	d6730 <_ZN7TwoWire6unlockEv>

000d65c2 <_ZN9FuelGaugeD1Ev>:
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
   d65c2:	b510      	push	{r4, lr}
{
    if (lock_) {
   d65c4:	7903      	ldrb	r3, [r0, #4]
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
   d65c6:	4604      	mov	r4, r0
{
    if (lock_) {
   d65c8:	b10b      	cbz	r3, d65ce <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
   d65ca:	f7ff fff7 	bl	d65bc <_ZN9FuelGauge6unlockEv>
    }
}
   d65ce:	4620      	mov	r0, r4
   d65d0:	bd10      	pop	{r4, pc}

000d65d2 <_ZN9FuelGauge12readRegisterEhRhS0_>:
void FuelGauge::readConfigRegister(byte &MSB, byte &LSB) {
	readRegister(CONFIG_REGISTER, MSB, LSB);
}


void FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
   d65d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d65d4:	4604      	mov	r4, r0
   d65d6:	4616      	mov	r6, r2
   d65d8:	461d      	mov	r5, r3
   d65da:	460f      	mov	r7, r1
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   d65dc:	f7ff ffd6 	bl	d658c <_ZN9FuelGauge4lockEv>
    std::lock_guard<FuelGauge> l(*this);
    i2c_.beginTransmission(MAX17043_ADDRESS);
   d65e0:	6820      	ldr	r0, [r4, #0]
   d65e2:	2136      	movs	r1, #54	; 0x36
   d65e4:	f000 f894 	bl	d6710 <_ZN7TwoWire17beginTransmissionEi>
    i2c_.write(startAddress);
   d65e8:	6820      	ldr	r0, [r4, #0]
   d65ea:	6803      	ldr	r3, [r0, #0]
   d65ec:	4639      	mov	r1, r7
   d65ee:	689b      	ldr	r3, [r3, #8]
   d65f0:	4798      	blx	r3
    i2c_.endTransmission(true);
   d65f2:	2101      	movs	r1, #1
   d65f4:	6820      	ldr	r0, [r4, #0]
   d65f6:	f000 f88e 	bl	d6716 <_ZN7TwoWire15endTransmissionEh>

    i2c_.requestFrom(MAX17043_ADDRESS, 2, true);
   d65fa:	2202      	movs	r2, #2
   d65fc:	2136      	movs	r1, #54	; 0x36
   d65fe:	2301      	movs	r3, #1
   d6600:	6820      	ldr	r0, [r4, #0]
   d6602:	f000 f87c 	bl	d66fe <_ZN7TwoWire11requestFromEiii>
    MSB = i2c_.read();
   d6606:	6820      	ldr	r0, [r4, #0]
   d6608:	6803      	ldr	r3, [r0, #0]
   d660a:	695b      	ldr	r3, [r3, #20]
   d660c:	4798      	blx	r3
   d660e:	7030      	strb	r0, [r6, #0]
    LSB = i2c_.read();
   d6610:	6820      	ldr	r0, [r4, #0]
   d6612:	6803      	ldr	r3, [r0, #0]
   d6614:	695b      	ldr	r3, [r3, #20]
   d6616:	4798      	blx	r3
   d6618:	7028      	strb	r0, [r5, #0]

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
   d661a:	4620      	mov	r0, r4
}
   d661c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   d6620:	f7ff bfcc 	b.w	d65bc <_ZN9FuelGauge6unlockEv>

000d6624 <_ZN9FuelGauge6getSoCEv>:
	readRegister(VCELL_REGISTER, MSB, LSB);
	return detail::_getVCell(MSB, LSB);
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {
   d6624:	b507      	push	{r0, r1, r2, lr}

	byte MSB = 0;
	byte LSB = 0;
   d6626:	ab02      	add	r3, sp, #8
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {

	byte MSB = 0;
   d6628:	2200      	movs	r2, #0
	byte LSB = 0;
   d662a:	f803 2d01 	strb.w	r2, [r3, #-1]!
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {

	byte MSB = 0;
   d662e:	f88d 2006 	strb.w	r2, [sp, #6]
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
   d6632:	2104      	movs	r1, #4
   d6634:	f10d 0206 	add.w	r2, sp, #6
   d6638:	f7ff ffcb 	bl	d65d2 <_ZN9FuelGauge12readRegisterEhRhS0_>
	// Converts SOC_REGISTER reading to state of charge of the cell as a percentage
	float _getSoC(byte MSB, byte LSB) {
		// MSB is the whole number
		// LSB is the decimal, resolution in units 1/256%
		float decimal = LSB / 256.0;
		return MSB + decimal;
   d663c:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d6640:	f001 f85a 	bl	d76f8 <__aeabi_i2d>
   d6644:	2200      	movs	r2, #0
   d6646:	4b09      	ldr	r3, [pc, #36]	; (d666c <_ZN9FuelGauge6getSoCEv+0x48>)
   d6648:	f001 f8bc 	bl	d77c4 <__aeabi_dmul>
   d664c:	f001 fb54 	bl	d7cf8 <__aeabi_d2f>
   d6650:	f89d 3006 	ldrb.w	r3, [sp, #6]
   d6654:	ee00 3a10 	vmov	s0, r3
	byte MSB = 0;
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
	return detail::_getSoC(MSB, LSB);
}
   d6658:	ee07 0a90 	vmov	s15, r0
	// Converts SOC_REGISTER reading to state of charge of the cell as a percentage
	float _getSoC(byte MSB, byte LSB) {
		// MSB is the whole number
		// LSB is the decimal, resolution in units 1/256%
		float decimal = LSB / 256.0;
		return MSB + decimal;
   d665c:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
	byte MSB = 0;
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
	return detail::_getSoC(MSB, LSB);
}
   d6660:	ee37 0a80 	vadd.f32	s0, s15, s0
   d6664:	b003      	add	sp, #12
   d6666:	f85d fb04 	ldr.w	pc, [sp], #4
   d666a:	bf00      	nop
   d666c:	3f700000 	.word	0x3f700000

000d6670 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d6670:	4770      	bx	lr

000d6672 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d6672:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6674:	4606      	mov	r6, r0
   d6676:	4615      	mov	r5, r2
   d6678:	460c      	mov	r4, r1
   d667a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d667c:	42bc      	cmp	r4, r7
   d667e:	d006      	beq.n	d668e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d6680:	6833      	ldr	r3, [r6, #0]
   d6682:	f814 1b01 	ldrb.w	r1, [r4], #1
   d6686:	689b      	ldr	r3, [r3, #8]
   d6688:	4630      	mov	r0, r6
   d668a:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d668c:	e7f6      	b.n	d667c <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d668e:	4628      	mov	r0, r5
   d6690:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6692 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d6692:	2200      	movs	r2, #0
   d6694:	7c00      	ldrb	r0, [r0, #16]
   d6696:	f7ff ba23 	b.w	d5ae0 <HAL_I2C_Write_Data>

000d669a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d669a:	2100      	movs	r1, #0
   d669c:	7c00      	ldrb	r0, [r0, #16]
   d669e:	f7ff ba27 	b.w	d5af0 <HAL_I2C_Available_Data>

000d66a2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d66a2:	2100      	movs	r1, #0
   d66a4:	7c00      	ldrb	r0, [r0, #16]
   d66a6:	f7ff ba2b 	b.w	d5b00 <HAL_I2C_Read_Data>

000d66aa <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d66aa:	2100      	movs	r1, #0
   d66ac:	7c00      	ldrb	r0, [r0, #16]
   d66ae:	f7ff ba2f 	b.w	d5b10 <HAL_I2C_Peek_Data>

000d66b2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d66b2:	2100      	movs	r1, #0
   d66b4:	7c00      	ldrb	r0, [r0, #16]
   d66b6:	f7ff ba33 	b.w	d5b20 <HAL_I2C_Flush_Data>

000d66ba <_ZN7TwoWireD0Ev>:
   d66ba:	b510      	push	{r4, lr}
   d66bc:	2114      	movs	r1, #20
   d66be:	4604      	mov	r4, r0
   d66c0:	f000 fd7b 	bl	d71ba <_ZdlPvj>
   d66c4:	4620      	mov	r0, r4
   d66c6:	bd10      	pop	{r4, pc}

000d66c8 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d66c8:	b510      	push	{r4, lr}
   d66ca:	4604      	mov	r4, r0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d66cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d66d0:	4608      	mov	r0, r1
   d66d2:	60a3      	str	r3, [r4, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d66d4:	2100      	movs	r1, #0
   d66d6:	4b04      	ldr	r3, [pc, #16]	; (d66e8 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d66d8:	7420      	strb	r0, [r4, #16]
   d66da:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d66dc:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d66de:	f7ff fa27 	bl	d5b30 <HAL_I2C_Init>

}
   d66e2:	4620      	mov	r0, r4
   d66e4:	bd10      	pop	{r4, pc}
   d66e6:	bf00      	nop
   d66e8:	000d8034 	.word	0x000d8034

000d66ec <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
   d66ec:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
   d66ee:	2400      	movs	r4, #0
   d66f0:	7c00      	ldrb	r0, [r0, #16]
   d66f2:	9400      	str	r4, [sp, #0]
   d66f4:	f7ff f9dc 	bl	d5ab0 <HAL_I2C_Request_Data>
  return result;
}
   d66f8:	b2c0      	uxtb	r0, r0
   d66fa:	b002      	add	sp, #8
   d66fc:	bd10      	pop	{r4, pc}

000d66fe <_ZN7TwoWire11requestFromEiii>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity, int sendStop)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
   d66fe:	b2db      	uxtb	r3, r3
   d6700:	b2d2      	uxtb	r2, r2
   d6702:	b2c9      	uxtb	r1, r1
   d6704:	f7ff bff2 	b.w	d66ec <_ZN7TwoWire11requestFromEhhh>

000d6708 <_ZN7TwoWire17beginTransmissionEh>:
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d6708:	2200      	movs	r2, #0
   d670a:	7c00      	ldrb	r0, [r0, #16]
   d670c:	f7ff b9d8 	b.w	d5ac0 <HAL_I2C_Begin_Transmission>

000d6710 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d6710:	b2c9      	uxtb	r1, r1
   d6712:	f7ff bff9 	b.w	d6708 <_ZN7TwoWire17beginTransmissionEh>

000d6716 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d6716:	2200      	movs	r2, #0
   d6718:	7c00      	ldrb	r0, [r0, #16]
   d671a:	f7ff b9d9 	b.w	d5ad0 <HAL_I2C_End_Transmission>

000d671e <_ZN7TwoWire4lockEv>:
{
  HAL_I2C_Reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   d671e:	b508      	push	{r3, lr}
  return HAL_I2C_Acquire(_i2c, NULL) == 0;
   d6720:	2100      	movs	r1, #0
   d6722:	7c00      	ldrb	r0, [r0, #16]
   d6724:	f7ff fa0c 	bl	d5b40 <HAL_I2C_Acquire>
}
   d6728:	fab0 f080 	clz	r0, r0
   d672c:	0940      	lsrs	r0, r0, #5
   d672e:	bd08      	pop	{r3, pc}

000d6730 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   d6730:	b508      	push	{r3, lr}
  return HAL_I2C_Release(_i2c, NULL) == 0;
   d6732:	2100      	movs	r1, #0
   d6734:	7c00      	ldrb	r0, [r0, #16]
   d6736:	f7ff fa0b 	bl	d5b50 <HAL_I2C_Release>
}
   d673a:	fab0 f080 	clz	r0, r0
   d673e:	0940      	lsrs	r0, r0, #5
   d6740:	bd08      	pop	{r3, pc}

000d6742 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d6742:	4770      	bx	lr

000d6744 <_ZN9IPAddressD0Ev>:
   d6744:	b510      	push	{r4, lr}
   d6746:	2118      	movs	r1, #24
   d6748:	4604      	mov	r4, r0
   d674a:	f000 fd36 	bl	d71ba <_ZdlPvj>
   d674e:	4620      	mov	r0, r4
   d6750:	bd10      	pop	{r4, pc}

000d6752 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6752:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6754:	7d03      	ldrb	r3, [r0, #20]
   d6756:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6758:	b08d      	sub	sp, #52	; 0x34
   d675a:	460e      	mov	r6, r1
   d675c:	f100 0704 	add.w	r7, r0, #4
   d6760:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6764:	d002      	beq.n	d676c <_ZNK9IPAddress7printToER5Print+0x1a>
   d6766:	f100 0508 	add.w	r5, r0, #8
   d676a:	e018      	b.n	d679e <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d676c:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d676e:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d6770:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6774:	232f      	movs	r3, #47	; 0x2f
   d6776:	462a      	mov	r2, r5
   d6778:	200a      	movs	r0, #10
   d677a:	f7ff f9f1 	bl	d5b60 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d677e:	4628      	mov	r0, r5
   d6780:	f001 fb81 	bl	d7e86 <strlen>
   d6784:	6833      	ldr	r3, [r6, #0]
   d6786:	4602      	mov	r2, r0
   d6788:	68db      	ldr	r3, [r3, #12]
   d678a:	4629      	mov	r1, r5
   d678c:	4630      	mov	r0, r6
   d678e:	4798      	blx	r3
   d6790:	e00f      	b.n	d67b2 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d6792:	b124      	cbz	r4, d679e <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d6794:	212e      	movs	r1, #46	; 0x2e
   d6796:	4630      	mov	r0, r6
   d6798:	f000 f9c8 	bl	d6b2c <_ZN5Print5printEc>
   d679c:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d679e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d67a2:	220a      	movs	r2, #10
   d67a4:	4630      	mov	r0, r6
   d67a6:	f000 fa07 	bl	d6bb8 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d67aa:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d67ac:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d67ae:	d1f0      	bne.n	d6792 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d67b0:	4620      	mov	r0, r4
    }
    return n;
}
   d67b2:	b00d      	add	sp, #52	; 0x34
   d67b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d67b8 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d67b8:	b510      	push	{r4, lr}
   d67ba:	4b05      	ldr	r3, [pc, #20]	; (d67d0 <_ZN9IPAddressC1Ev+0x18>)
   d67bc:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d67be:	2211      	movs	r2, #17
   d67c0:	f840 3b04 	str.w	r3, [r0], #4
   d67c4:	2100      	movs	r1, #0
   d67c6:	f001 fb00 	bl	d7dca <memset>
{
    clear();
}
   d67ca:	4620      	mov	r0, r4
   d67cc:	bd10      	pop	{r4, pc}
   d67ce:	bf00      	nop
   d67d0:	000d805c 	.word	0x000d805c

000d67d4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d67d4:	4603      	mov	r3, r0
   d67d6:	4a07      	ldr	r2, [pc, #28]	; (d67f4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d67d8:	b510      	push	{r4, lr}
   d67da:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d67de:	f101 0210 	add.w	r2, r1, #16
   d67e2:	f851 4b04 	ldr.w	r4, [r1], #4
   d67e6:	f843 4b04 	str.w	r4, [r3], #4
   d67ea:	4291      	cmp	r1, r2
   d67ec:	d1f9      	bne.n	d67e2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d67ee:	780a      	ldrb	r2, [r1, #0]
   d67f0:	701a      	strb	r2, [r3, #0]
}
   d67f2:	bd10      	pop	{r4, pc}
   d67f4:	000d805c 	.word	0x000d805c

000d67f8 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d67f8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d67fa:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d67fe:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d6802:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d6806:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d680a:	2304      	movs	r3, #4
   d680c:	6041      	str	r1, [r0, #4]
   d680e:	7503      	strb	r3, [r0, #20]
   d6810:	bd10      	pop	{r4, pc}

000d6812 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d6812:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d6814:	780d      	ldrb	r5, [r1, #0]
   d6816:	788b      	ldrb	r3, [r1, #2]
   d6818:	784a      	ldrb	r2, [r1, #1]
   d681a:	78c9      	ldrb	r1, [r1, #3]
   d681c:	9100      	str	r1, [sp, #0]
   d681e:	4629      	mov	r1, r5
   d6820:	f7ff ffea 	bl	d67f8 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d6824:	b003      	add	sp, #12
   d6826:	bd30      	pop	{r4, r5, pc}

000d6828 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d6828:	4b01      	ldr	r3, [pc, #4]	; (d6830 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d682a:	4a02      	ldr	r2, [pc, #8]	; (d6834 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d682c:	601a      	str	r2, [r3, #0]
   d682e:	4770      	bx	lr
   d6830:	2003e4e0 	.word	0x2003e4e0
   d6834:	000d811e 	.word	0x000d811e

000d6838 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6838:	2200      	movs	r2, #0
   d683a:	4611      	mov	r1, r2
   d683c:	6840      	ldr	r0, [r0, #4]
   d683e:	f7ff badb 	b.w	d5df8 <network_listening>

000d6842 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6842:	2200      	movs	r2, #0
   d6844:	4611      	mov	r1, r2
   d6846:	6840      	ldr	r0, [r0, #4]
   d6848:	f7ff bae6 	b.w	d5e18 <network_get_listen_timeout>

000d684c <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d684c:	2200      	movs	r2, #0
   d684e:	6840      	ldr	r0, [r0, #4]
   d6850:	f7ff bada 	b.w	d5e08 <network_set_listen_timeout>

000d6854 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6854:	2200      	movs	r2, #0
   d6856:	f081 0101 	eor.w	r1, r1, #1
   d685a:	6840      	ldr	r0, [r0, #4]
   d685c:	f7ff bac4 	b.w	d5de8 <network_listen>

000d6860 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d6860:	2300      	movs	r3, #0
   d6862:	461a      	mov	r2, r3
   d6864:	4619      	mov	r1, r3
   d6866:	6840      	ldr	r0, [r0, #4]
   d6868:	f7ff bab6 	b.w	d5dd8 <network_off>

000d686c <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d686c:	2300      	movs	r3, #0
   d686e:	461a      	mov	r2, r3
   d6870:	4619      	mov	r1, r3
   d6872:	6840      	ldr	r0, [r0, #4]
   d6874:	f7ff baa8 	b.w	d5dc8 <network_on>

000d6878 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6878:	2200      	movs	r2, #0
   d687a:	4611      	mov	r1, r2
   d687c:	6840      	ldr	r0, [r0, #4]
   d687e:	f7ff ba9b 	b.w	d5db8 <network_ready>

000d6882 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6882:	2200      	movs	r2, #0
   d6884:	4611      	mov	r1, r2
   d6886:	6840      	ldr	r0, [r0, #4]
   d6888:	f7ff ba86 	b.w	d5d98 <network_connecting>

000d688c <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d688c:	2200      	movs	r2, #0
   d688e:	2102      	movs	r1, #2
   d6890:	6840      	ldr	r0, [r0, #4]
   d6892:	f7ff ba89 	b.w	d5da8 <network_disconnect>

000d6896 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6896:	2300      	movs	r3, #0
   d6898:	461a      	mov	r2, r3
   d689a:	6840      	ldr	r0, [r0, #4]
   d689c:	f7ff ba74 	b.w	d5d88 <network_connect>

000d68a0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d68a0:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d68a2:	4605      	mov	r5, r0
   d68a4:	b188      	cbz	r0, d68ca <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d68a6:	6804      	ldr	r4, [r0, #0]
   d68a8:	b14c      	cbz	r4, d68be <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d68aa:	68a3      	ldr	r3, [r4, #8]
   d68ac:	b11b      	cbz	r3, d68b6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d68ae:	2203      	movs	r2, #3
   d68b0:	4621      	mov	r1, r4
   d68b2:	4620      	mov	r0, r4
   d68b4:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d68b6:	2110      	movs	r1, #16
   d68b8:	4620      	mov	r0, r4
   d68ba:	f000 fc7e 	bl	d71ba <_ZdlPvj>
   d68be:	4628      	mov	r0, r5
   d68c0:	2114      	movs	r1, #20
      }
   d68c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d68c6:	f000 bc78 	b.w	d71ba <_ZdlPvj>
   d68ca:	bd38      	pop	{r3, r4, r5, pc}

000d68cc <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>:
   d68cc:	b110      	cbz	r0, d68d4 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15+0x8>
   d68ce:	6803      	ldr	r3, [r0, #0]
   d68d0:	685b      	ldr	r3, [r3, #4]
   d68d2:	4718      	bx	r3
   d68d4:	4770      	bx	lr

000d68d6 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d68d6:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d68d8:	6803      	ldr	r3, [r0, #0]
   d68da:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d68dc:	b1bb      	cbz	r3, d690e <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d68de:	6858      	ldr	r0, [r3, #4]
   d68e0:	f7ff f85e 	bl	d59a0 <os_thread_is_current>
   d68e4:	b978      	cbnz	r0, d6906 <_ZN6ThreadD1Ev+0x30>
   d68e6:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d68e8:	7c5a      	ldrb	r2, [r3, #17]
   d68ea:	b912      	cbnz	r2, d68f2 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d68ec:	6858      	ldr	r0, [r3, #4]
   d68ee:	f7ff f867 	bl	d59c0 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d68f2:	6823      	ldr	r3, [r4, #0]
   d68f4:	6858      	ldr	r0, [r3, #4]
   d68f6:	f7ff f86b 	bl	d59d0 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d68fa:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d68fc:	2300      	movs	r3, #0
   d68fe:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d6900:	b128      	cbz	r0, d690e <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d6902:	f7ff ffcd 	bl	d68a0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6906:	6820      	ldr	r0, [r4, #0]
   d6908:	b108      	cbz	r0, d690e <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d690a:	f7ff ffc9 	bl	d68a0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>
    }

    ~Thread()
    {
        dispose();
    }
   d690e:	4620      	mov	r0, r4
   d6910:	bd10      	pop	{r4, pc}
	...

000d6914 <_ZN5spark9MeshClassD1Ev>:
     * Pull data from the socket and handle as required.
     */
    int poll();
};

class MeshClass : public NetworkClass, public MeshPublish {
   d6914:	b538      	push	{r3, r4, r5, lr}
   d6916:	4b0c      	ldr	r3, [pc, #48]	; (d6948 <_ZN5spark9MeshClassD1Ev+0x34>)
   d6918:	6003      	str	r3, [r0, #0]
   d691a:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d691c:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d6920:	b108      	cbz	r0, d6926 <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d6922:	f7fd fbbc 	bl	d409e <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6926:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d692a:	b135      	cbz	r5, d693a <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d692c:	4628      	mov	r0, r5
   d692e:	f7ff ffd2 	bl	d68d6 <_ZN6ThreadD1Ev>
   d6932:	2104      	movs	r1, #4
   d6934:	4628      	mov	r0, r5
   d6936:	f000 fc40 	bl	d71ba <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d693a:	68a0      	ldr	r0, [r4, #8]
   d693c:	b108      	cbz	r0, d6942 <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d693e:	f7ff ffc5 	bl	d68cc <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
   d6942:	4620      	mov	r0, r4
   d6944:	bd38      	pop	{r3, r4, r5, pc}
   d6946:	bf00      	nop
   d6948:	000d8150 	.word	0x000d8150

000d694c <_GLOBAL__sub_I__ZN5spark9mesh_loopEv>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d694c:	b538      	push	{r3, r4, r5, lr}
   d694e:	4c0d      	ldr	r4, [pc, #52]	; (d6984 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x38>)
   d6950:	4b0d      	ldr	r3, [pc, #52]	; (d6988 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x3c>)
   d6952:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d6954:	2500      	movs	r5, #0
   d6956:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d6958:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d695c:	6063      	str	r3, [r4, #4]
   d695e:	60a5      	str	r5, [r4, #8]
   d6960:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6964:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d6968:	f7ff f86a 	bl	d5a40 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d696c:	4b07      	ldr	r3, [pc, #28]	; (d698c <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x40>)
   d696e:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   d6972:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d6974:	4620      	mov	r0, r4
   d6976:	4a06      	ldr	r2, [pc, #24]	; (d6990 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x44>)
   d6978:	4906      	ldr	r1, [pc, #24]	; (d6994 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x48>)
} // namespace spark
   d697a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d697e:	f000 bc17 	b.w	d71b0 <__aeabi_atexit>
   d6982:	bf00      	nop
   d6984:	2003e4e4 	.word	0x2003e4e4
   d6988:	000d8184 	.word	0x000d8184
   d698c:	000d8150 	.word	0x000d8150
   d6990:	2003e408 	.word	0x2003e408
   d6994:	000d6915 	.word	0x000d6915

000d6998 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d6998:	2300      	movs	r3, #0
   d699a:	461a      	mov	r2, r3
   d699c:	6840      	ldr	r0, [r0, #4]
   d699e:	f7ff b9f3 	b.w	d5d88 <network_connect>

000d69a2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d69a2:	2200      	movs	r2, #0
   d69a4:	2102      	movs	r1, #2
   d69a6:	6840      	ldr	r0, [r0, #4]
   d69a8:	f7ff b9fe 	b.w	d5da8 <network_disconnect>

000d69ac <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d69ac:	2200      	movs	r2, #0
   d69ae:	4611      	mov	r1, r2
   d69b0:	6840      	ldr	r0, [r0, #4]
   d69b2:	f7ff b9f1 	b.w	d5d98 <network_connecting>

000d69b6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d69b6:	2200      	movs	r2, #0
   d69b8:	4611      	mov	r1, r2
   d69ba:	6840      	ldr	r0, [r0, #4]
   d69bc:	f7ff b9fc 	b.w	d5db8 <network_ready>

000d69c0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d69c0:	2300      	movs	r3, #0
   d69c2:	461a      	mov	r2, r3
   d69c4:	4619      	mov	r1, r3
   d69c6:	6840      	ldr	r0, [r0, #4]
   d69c8:	f7ff b9fe 	b.w	d5dc8 <network_on>

000d69cc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d69cc:	2300      	movs	r3, #0
   d69ce:	461a      	mov	r2, r3
   d69d0:	4619      	mov	r1, r3
   d69d2:	6840      	ldr	r0, [r0, #4]
   d69d4:	f7ff ba00 	b.w	d5dd8 <network_off>

000d69d8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d69d8:	2200      	movs	r2, #0
   d69da:	f081 0101 	eor.w	r1, r1, #1
   d69de:	6840      	ldr	r0, [r0, #4]
   d69e0:	f7ff ba02 	b.w	d5de8 <network_listen>

000d69e4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d69e4:	2200      	movs	r2, #0
   d69e6:	6840      	ldr	r0, [r0, #4]
   d69e8:	f7ff ba0e 	b.w	d5e08 <network_set_listen_timeout>

000d69ec <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d69ec:	2200      	movs	r2, #0
   d69ee:	4611      	mov	r1, r2
   d69f0:	6840      	ldr	r0, [r0, #4]
   d69f2:	f7ff ba11 	b.w	d5e18 <network_get_listen_timeout>

000d69f6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d69f6:	2200      	movs	r2, #0
   d69f8:	4611      	mov	r1, r2
   d69fa:	6840      	ldr	r0, [r0, #4]
   d69fc:	f7ff b9fc 	b.w	d5df8 <network_listening>

000d6a00 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d6a00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6a04:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d6a06:	b095      	sub	sp, #84	; 0x54
   d6a08:	4616      	mov	r6, r2
   d6a0a:	460d      	mov	r5, r1
   d6a0c:	4607      	mov	r7, r0
    IPAddress addr;
   d6a0e:	f7ff fed3 	bl	d67b8 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d6a12:	4621      	mov	r1, r4
   d6a14:	2220      	movs	r2, #32
   d6a16:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6a18:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d6a1a:	f001 f9d6 	bl	d7dca <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d6a1e:	2340      	movs	r3, #64	; 0x40
   d6a20:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d6a22:	4621      	mov	r1, r4
   d6a24:	466b      	mov	r3, sp
   d6a26:	aa0c      	add	r2, sp, #48	; 0x30
   d6a28:	4630      	mov	r0, r6
   d6a2a:	f7ff f8a9 	bl	d5b80 <netdb_getaddrinfo>
    if (!r) {
   d6a2e:	4604      	mov	r4, r0
   d6a30:	2800      	cmp	r0, #0
   d6a32:	d144      	bne.n	d6abe <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6a34:	4602      	mov	r2, r0
   d6a36:	2101      	movs	r1, #1
   d6a38:	6868      	ldr	r0, [r5, #4]
   d6a3a:	f7ff f9bd 	bl	d5db8 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6a3e:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6a40:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6a42:	4622      	mov	r2, r4
   d6a44:	6868      	ldr	r0, [r5, #4]
   d6a46:	f7ff f9b7 	bl	d5db8 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6a4a:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6a4c:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d6a4e:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6a50:	2e00      	cmp	r6, #0
   d6a52:	d034      	beq.n	d6abe <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d6a54:	2900      	cmp	r1, #0
   d6a56:	d132      	bne.n	d6abe <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d6a58:	6873      	ldr	r3, [r6, #4]
   d6a5a:	2b02      	cmp	r3, #2
   d6a5c:	d002      	beq.n	d6a64 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d6a5e:	2b0a      	cmp	r3, #10
   d6a60:	d009      	beq.n	d6a76 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d6a62:	e02a      	b.n	d6aba <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d6a64:	f1b8 0f00 	cmp.w	r8, #0
   d6a68:	d027      	beq.n	d6aba <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d6a6a:	6971      	ldr	r1, [r6, #20]
   d6a6c:	4638      	mov	r0, r7
   d6a6e:	3104      	adds	r1, #4
   d6a70:	f7ff fecf 	bl	d6812 <_ZN9IPAddressaSEPKh>
   d6a74:	e020      	b.n	d6ab8 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d6a76:	f1b9 0f00 	cmp.w	r9, #0
   d6a7a:	d01e      	beq.n	d6aba <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d6a7c:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d6a7e:	2211      	movs	r2, #17
   d6a80:	a801      	add	r0, sp, #4
   d6a82:	f001 f9a2 	bl	d7dca <memset>
                    a.v = 6;
   d6a86:	2306      	movs	r3, #6
   d6a88:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6a8c:	ad01      	add	r5, sp, #4
   d6a8e:	f104 0308 	add.w	r3, r4, #8
   d6a92:	3418      	adds	r4, #24
   d6a94:	6818      	ldr	r0, [r3, #0]
   d6a96:	6859      	ldr	r1, [r3, #4]
   d6a98:	462a      	mov	r2, r5
   d6a9a:	c203      	stmia	r2!, {r0, r1}
   d6a9c:	3308      	adds	r3, #8
   d6a9e:	42a3      	cmp	r3, r4
   d6aa0:	4615      	mov	r5, r2
   d6aa2:	d1f7      	bne.n	d6a94 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d6aa4:	a901      	add	r1, sp, #4
   d6aa6:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d6aa8:	ad07      	add	r5, sp, #28
   d6aaa:	f7ff fe93 	bl	d67d4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6aae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6ab0:	1d3c      	adds	r4, r7, #4
   d6ab2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6ab4:	682b      	ldr	r3, [r5, #0]
   d6ab6:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d6ab8:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6aba:	69f6      	ldr	r6, [r6, #28]
   d6abc:	e7c8      	b.n	d6a50 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d6abe:	9800      	ldr	r0, [sp, #0]
   d6ac0:	f7ff f856 	bl	d5b70 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d6ac4:	4638      	mov	r0, r7
   d6ac6:	b015      	add	sp, #84	; 0x54
   d6ac8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d6acc <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d6acc:	4b02      	ldr	r3, [pc, #8]	; (d6ad8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d6ace:	4a03      	ldr	r2, [pc, #12]	; (d6adc <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6ad0:	601a      	str	r2, [r3, #0]
   d6ad2:	2200      	movs	r2, #0
   d6ad4:	605a      	str	r2, [r3, #4]
   d6ad6:	4770      	bx	lr
   d6ad8:	2003e6b4 	.word	0x2003e6b4
   d6adc:	000d8184 	.word	0x000d8184

000d6ae0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d6ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6ae2:	4606      	mov	r6, r0
   d6ae4:	460d      	mov	r5, r1
   d6ae6:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d6ae8:	2400      	movs	r4, #0
  while (size--) {
   d6aea:	42bd      	cmp	r5, r7
   d6aec:	d00c      	beq.n	d6b08 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d6aee:	6833      	ldr	r3, [r6, #0]
   d6af0:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6af4:	689b      	ldr	r3, [r3, #8]
   d6af6:	4630      	mov	r0, r6
   d6af8:	4798      	blx	r3
     if (chunk>=0)
   d6afa:	2800      	cmp	r0, #0
   d6afc:	db01      	blt.n	d6b02 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d6afe:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d6b00:	e7f3      	b.n	d6aea <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d6b02:	2c00      	cmp	r4, #0
   d6b04:	bf08      	it	eq
   d6b06:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d6b08:	4620      	mov	r0, r4
   d6b0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6b0c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d6b0c:	b570      	push	{r4, r5, r6, lr}
   d6b0e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d6b10:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d6b12:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d6b14:	b149      	cbz	r1, d6b2a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d6b16:	f001 f9b6 	bl	d7e86 <strlen>
   d6b1a:	682b      	ldr	r3, [r5, #0]
   d6b1c:	4602      	mov	r2, r0
   d6b1e:	4621      	mov	r1, r4
   d6b20:	4628      	mov	r0, r5
   d6b22:	68db      	ldr	r3, [r3, #12]
    }
   d6b24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d6b28:	4718      	bx	r3
    }
   d6b2a:	bd70      	pop	{r4, r5, r6, pc}

000d6b2c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d6b2c:	6803      	ldr	r3, [r0, #0]
   d6b2e:	689b      	ldr	r3, [r3, #8]
   d6b30:	4718      	bx	r3

000d6b32 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d6b32:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d6b34:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d6b36:	4605      	mov	r5, r0
  size_t n = print('\r');
   d6b38:	f7ff fff8 	bl	d6b2c <_ZN5Print5printEc>
  n += print('\n');
   d6b3c:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d6b3e:	4604      	mov	r4, r0
  n += print('\n');
   d6b40:	4628      	mov	r0, r5
   d6b42:	f7ff fff3 	bl	d6b2c <_ZN5Print5printEc>
  return n;
}
   d6b46:	4420      	add	r0, r4
   d6b48:	bd38      	pop	{r3, r4, r5, pc}

000d6b4a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d6b4a:	b538      	push	{r3, r4, r5, lr}
   d6b4c:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6b4e:	f7ff ffdd 	bl	d6b0c <_ZN5Print5writeEPKc>
   d6b52:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d6b54:	4628      	mov	r0, r5
   d6b56:	f7ff ffec 	bl	d6b32 <_ZN5Print7printlnEv>
  return n;
}
   d6b5a:	4420      	add	r0, r4
   d6b5c:	bd38      	pop	{r3, r4, r5, pc}

000d6b5e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d6b5e:	b530      	push	{r4, r5, lr}
   d6b60:	b08b      	sub	sp, #44	; 0x2c
   d6b62:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d6b64:	2100      	movs	r1, #0
   d6b66:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d6b6a:	2a01      	cmp	r2, #1
   d6b6c:	bf98      	it	ls
   d6b6e:	220a      	movls	r2, #10
   d6b70:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d6b74:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d6b78:	fb05 3312 	mls	r3, r5, r2, r3
   d6b7c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d6b80:	2b09      	cmp	r3, #9
   d6b82:	bf94      	ite	ls
   d6b84:	3330      	addls	r3, #48	; 0x30
   d6b86:	3337      	addhi	r3, #55	; 0x37
   d6b88:	b2db      	uxtb	r3, r3
   d6b8a:	4621      	mov	r1, r4
   d6b8c:	f804 3901 	strb.w	r3, [r4], #-1
   d6b90:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d6b92:	2d00      	cmp	r5, #0
   d6b94:	d1ee      	bne.n	d6b74 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d6b96:	f7ff ffb9 	bl	d6b0c <_ZN5Print5writeEPKc>
}
   d6b9a:	b00b      	add	sp, #44	; 0x2c
   d6b9c:	bd30      	pop	{r4, r5, pc}

000d6b9e <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d6b9e:	b410      	push	{r4}
  if (base == 0) return write(n);
   d6ba0:	b92a      	cbnz	r2, d6bae <_ZN5Print5printEmi+0x10>
   d6ba2:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d6ba4:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d6ba8:	689b      	ldr	r3, [r3, #8]
   d6baa:	b2c9      	uxtb	r1, r1
   d6bac:	4718      	bx	r3
  else return printNumber(n, base);
   d6bae:	b2d2      	uxtb	r2, r2
}
   d6bb0:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d6bb4:	f7ff bfd3 	b.w	d6b5e <_ZN5Print11printNumberEmh>

000d6bb8 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d6bb8:	f7ff bff1 	b.w	d6b9e <_ZN5Print5printEmi>

000d6bbc <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d6bbc:	b510      	push	{r4, lr}
   d6bbe:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6bc0:	f7fd fab9 	bl	d4136 <_ZNSt14_Function_baseD1Ev>
   d6bc4:	4620      	mov	r0, r4
   d6bc6:	bd10      	pop	{r4, pc}

000d6bc8 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6bc8:	4803      	ldr	r0, [pc, #12]	; (d6bd8 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d6bca:	4a04      	ldr	r2, [pc, #16]	; (d6bdc <_GLOBAL__sub_I_RGB+0x14>)
   d6bcc:	4904      	ldr	r1, [pc, #16]	; (d6be0 <_GLOBAL__sub_I_RGB+0x18>)
   d6bce:	2300      	movs	r3, #0
   d6bd0:	6083      	str	r3, [r0, #8]
   d6bd2:	f000 baed 	b.w	d71b0 <__aeabi_atexit>
   d6bd6:	bf00      	nop
   d6bd8:	2003e6bc 	.word	0x2003e6bc
   d6bdc:	2003e408 	.word	0x2003e408
   d6be0:	000d6bbd 	.word	0x000d6bbd

000d6be4 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d6be4:	4770      	bx	lr

000d6be6 <_ZN8SPIClassD0Ev>:
   d6be6:	b510      	push	{r4, lr}
   d6be8:	2110      	movs	r1, #16
   d6bea:	4604      	mov	r4, r0
   d6bec:	f000 fae5 	bl	d71ba <_ZdlPvj>
   d6bf0:	4620      	mov	r0, r4
   d6bf2:	bd10      	pop	{r4, pc}

000d6bf4 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d6bf4:	b570      	push	{r4, r5, r6, lr}
   d6bf6:	4b08      	ldr	r3, [pc, #32]	; (d6c18 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d6bf8:	6003      	str	r3, [r0, #0]
   d6bfa:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d6bfc:	2500      	movs	r5, #0
   d6bfe:	460e      	mov	r6, r1
   d6c00:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d6c04:	f7fe ff14 	bl	d5a30 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d6c08:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d6c0a:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d6c0c:	f7fe ffc0 	bl	d5b90 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d6c10:	60a5      	str	r5, [r4, #8]
}
   d6c12:	4620      	mov	r0, r4
   d6c14:	bd70      	pop	{r4, r5, r6, pc}
   d6c16:	bf00      	nop
   d6c18:	000d81b8 	.word	0x000d81b8

000d6c1c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d6c1c:	b510      	push	{r4, lr}
   d6c1e:	4604      	mov	r4, r0
{
	free(buffer);
   d6c20:	6800      	ldr	r0, [r0, #0]
   d6c22:	f7ff f909 	bl	d5e38 <free>
}
   d6c26:	4620      	mov	r0, r4
   d6c28:	bd10      	pop	{r4, pc}

000d6c2a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d6c2a:	b510      	push	{r4, lr}
   d6c2c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d6c2e:	6800      	ldr	r0, [r0, #0]
   d6c30:	b108      	cbz	r0, d6c36 <_ZN6String10invalidateEv+0xc>
   d6c32:	f7ff f901 	bl	d5e38 <free>
	buffer = NULL;
   d6c36:	2300      	movs	r3, #0
   d6c38:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d6c3a:	60a3      	str	r3, [r4, #8]
   d6c3c:	6063      	str	r3, [r4, #4]
   d6c3e:	bd10      	pop	{r4, pc}

000d6c40 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d6c40:	b538      	push	{r3, r4, r5, lr}
   d6c42:	4604      	mov	r4, r0
   d6c44:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d6c46:	6800      	ldr	r0, [r0, #0]
   d6c48:	3101      	adds	r1, #1
   d6c4a:	f7ff f8fd 	bl	d5e48 <realloc>
	if (newbuffer) {
   d6c4e:	b110      	cbz	r0, d6c56 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d6c50:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d6c54:	2001      	movs	r0, #1
	}
	return 0;
}
   d6c56:	bd38      	pop	{r3, r4, r5, pc}

000d6c58 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d6c58:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d6c5a:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d6c5c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d6c5e:	b113      	cbz	r3, d6c66 <_ZN6String7reserveEj+0xe>
   d6c60:	6843      	ldr	r3, [r0, #4]
   d6c62:	428b      	cmp	r3, r1
   d6c64:	d207      	bcs.n	d6c76 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d6c66:	4620      	mov	r0, r4
   d6c68:	f7ff ffea 	bl	d6c40 <_ZN6String12changeBufferEj>
   d6c6c:	b120      	cbz	r0, d6c78 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d6c6e:	68a3      	ldr	r3, [r4, #8]
   d6c70:	b90b      	cbnz	r3, d6c76 <_ZN6String7reserveEj+0x1e>
   d6c72:	6822      	ldr	r2, [r4, #0]
   d6c74:	7013      	strb	r3, [r2, #0]
   d6c76:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d6c78:	bd10      	pop	{r4, pc}

000d6c7a <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d6c7a:	b570      	push	{r4, r5, r6, lr}
   d6c7c:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d6c7e:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d6c80:	4604      	mov	r4, r0
   d6c82:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d6c84:	f7ff ffe8 	bl	d6c58 <_ZN6String7reserveEj>
   d6c88:	b918      	cbnz	r0, d6c92 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d6c8a:	4620      	mov	r0, r4
   d6c8c:	f7ff ffcd 	bl	d6c2a <_ZN6String10invalidateEv>
		return *this;
   d6c90:	e009      	b.n	d6ca6 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d6c92:	462a      	mov	r2, r5
   d6c94:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d6c96:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d6c98:	6820      	ldr	r0, [r4, #0]
   d6c9a:	f001 f88b 	bl	d7db4 <memcpy>
	buffer[len] = 0;
   d6c9e:	6822      	ldr	r2, [r4, #0]
   d6ca0:	68a3      	ldr	r3, [r4, #8]
   d6ca2:	2100      	movs	r1, #0
   d6ca4:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d6ca6:	4620      	mov	r0, r4
   d6ca8:	bd70      	pop	{r4, r5, r6, pc}

000d6caa <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d6caa:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6cac:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d6cae:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6cb0:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d6cb2:	6043      	str	r3, [r0, #4]
	len = 0;
   d6cb4:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6cb6:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d6cb8:	460d      	mov	r5, r1
   d6cba:	b139      	cbz	r1, d6ccc <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d6cbc:	4608      	mov	r0, r1
   d6cbe:	f001 f8e2 	bl	d7e86 <strlen>
   d6cc2:	4629      	mov	r1, r5
   d6cc4:	4602      	mov	r2, r0
   d6cc6:	4620      	mov	r0, r4
   d6cc8:	f7ff ffd7 	bl	d6c7a <_ZN6String4copyEPKcj>
}
   d6ccc:	4620      	mov	r0, r4
   d6cce:	bd38      	pop	{r3, r4, r5, pc}

000d6cd0 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d6cd0:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d6cd2:	b510      	push	{r4, lr}
   d6cd4:	460b      	mov	r3, r1
   d6cd6:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d6cd8:	d007      	beq.n	d6cea <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d6cda:	6809      	ldr	r1, [r1, #0]
   d6cdc:	b119      	cbz	r1, d6ce6 <_ZN6StringaSERKS_+0x16>
   d6cde:	689a      	ldr	r2, [r3, #8]
   d6ce0:	f7ff ffcb 	bl	d6c7a <_ZN6String4copyEPKcj>
   d6ce4:	e001      	b.n	d6cea <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d6ce6:	f7ff ffa0 	bl	d6c2a <_ZN6String10invalidateEv>

	return *this;
}
   d6cea:	4620      	mov	r0, r4
   d6cec:	bd10      	pop	{r4, pc}

000d6cee <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d6cee:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6cf0:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d6cf2:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6cf4:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d6cf6:	6043      	str	r3, [r0, #4]
	len = 0;
   d6cf8:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6cfa:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d6cfc:	f7ff ffe8 	bl	d6cd0 <_ZN6StringaSERKS_>
}
   d6d00:	4620      	mov	r0, r4
   d6d02:	bd10      	pop	{r4, pc}

000d6d04 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d6d04:	b538      	push	{r3, r4, r5, lr}
   d6d06:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d6d08:	460c      	mov	r4, r1
   d6d0a:	b141      	cbz	r1, d6d1e <_ZN6StringaSEPKc+0x1a>
   d6d0c:	4608      	mov	r0, r1
   d6d0e:	f001 f8ba 	bl	d7e86 <strlen>
   d6d12:	4621      	mov	r1, r4
   d6d14:	4602      	mov	r2, r0
   d6d16:	4628      	mov	r0, r5
   d6d18:	f7ff ffaf 	bl	d6c7a <_ZN6String4copyEPKcj>
   d6d1c:	e001      	b.n	d6d22 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d6d1e:	f7ff ff84 	bl	d6c2a <_ZN6String10invalidateEv>

	return *this;
}
   d6d22:	4628      	mov	r0, r5
   d6d24:	bd38      	pop	{r3, r4, r5, pc}

000d6d26 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d6d26:	b570      	push	{r4, r5, r6, lr}
   d6d28:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d6d2a:	460e      	mov	r6, r1
   d6d2c:	b909      	cbnz	r1, d6d32 <_ZN6String6concatEPKcj+0xc>
   d6d2e:	2000      	movs	r0, #0
   d6d30:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d6d32:	b16a      	cbz	r2, d6d50 <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
   d6d34:	6883      	ldr	r3, [r0, #8]
   d6d36:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
   d6d38:	4629      	mov	r1, r5
   d6d3a:	f7ff ff8d 	bl	d6c58 <_ZN6String7reserveEj>
   d6d3e:	2800      	cmp	r0, #0
   d6d40:	d0f5      	beq.n	d6d2e <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d6d42:	6820      	ldr	r0, [r4, #0]
   d6d44:	68a3      	ldr	r3, [r4, #8]
   d6d46:	4631      	mov	r1, r6
   d6d48:	4418      	add	r0, r3
   d6d4a:	f001 f879 	bl	d7e40 <strcpy>
	len = newlen;
   d6d4e:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
   d6d50:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d6d52:	bd70      	pop	{r4, r5, r6, pc}

000d6d54 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   d6d54:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d6d56:	2300      	movs	r3, #0
}

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
   d6d58:	f88d 1004 	strb.w	r1, [sp, #4]
	buf[1] = 0;
	return concat(buf, 1);
   d6d5c:	2201      	movs	r2, #1
   d6d5e:	a901      	add	r1, sp, #4

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d6d60:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   d6d64:	f7ff ffdf 	bl	d6d26 <_ZN6String6concatEPKcj>
}
   d6d68:	b003      	add	sp, #12
   d6d6a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6d70 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d6d70:	4b04      	ldr	r3, [pc, #16]	; (d6d84 <_GLOBAL__sub_I_System+0x14>)
   d6d72:	2000      	movs	r0, #0
   d6d74:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d6d78:	7018      	strb	r0, [r3, #0]
   d6d7a:	8058      	strh	r0, [r3, #2]
   d6d7c:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d6d7e:	f7fe bf8f 	b.w	d5ca0 <set_system_mode>
   d6d82:	bf00      	nop
   d6d84:	2003e6cc 	.word	0x2003e6cc

000d6d88 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
   d6d88:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d6d8a:	2000      	movs	r0, #0
   d6d8c:	f7fe ffe4 	bl	d5d58 <spark_sync_time_pending>
   d6d90:	b128      	cbz	r0, d6d9e <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d6d92:	f7fe ffd1 	bl	d5d38 <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d6d96:	f080 0001 	eor.w	r0, r0, #1
   d6d9a:	b2c0      	uxtb	r0, r0
   d6d9c:	bd08      	pop	{r3, pc}
   d6d9e:	2001      	movs	r0, #1
    }
   d6da0:	bd08      	pop	{r3, pc}

000d6da2 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d6da2:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d6da4:	2000      	movs	r0, #0
   d6da6:	f7fe fe73 	bl	d5a90 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d6daa:	4604      	mov	r4, r0
   d6dac:	b968      	cbnz	r0, d6dca <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d6dae:	f7fe ff6f 	bl	d5c90 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d6db2:	2801      	cmp	r0, #1
   d6db4:	d10b      	bne.n	d6dce <_ZN9TimeClass7isValidEv+0x2c>
   d6db6:	4620      	mov	r0, r4
   d6db8:	f7fe ff8a 	bl	d5cd0 <system_thread_get_state>
   d6dbc:	b938      	cbnz	r0, d6dce <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d6dbe:	f7ff ffe3 	bl	d6d88 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d6dc2:	b930      	cbnz	r0, d6dd2 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d6dc4:	f7fe ffb0 	bl	d5d28 <spark_process>
   d6dc8:	e7f9      	b.n	d6dbe <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d6dca:	2001      	movs	r0, #1
   d6dcc:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d6dce:	2000      	movs	r0, #0
   d6dd0:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d6dd2:	f7ff ffd9 	bl	d6d88 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d6dd6:	2000      	movs	r0, #0
   d6dd8:	f7fe fe5a 	bl	d5a90 <HAL_RTC_Time_Is_Valid>
   d6ddc:	3000      	adds	r0, #0
   d6dde:	bf18      	it	ne
   d6de0:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d6de2:	bd10      	pop	{r4, pc}

000d6de4 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d6de4:	b508      	push	{r3, lr}
    (void)isValid();
   d6de6:	f7ff ffdc 	bl	d6da2 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d6dea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d6dee:	f7fe be47 	b.w	d5a80 <HAL_RTC_Get_UnixTime>
	...

000d6df4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d6df4:	4b02      	ldr	r3, [pc, #8]	; (d6e00 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d6df6:	681a      	ldr	r2, [r3, #0]
   d6df8:	4b02      	ldr	r3, [pc, #8]	; (d6e04 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d6dfa:	601a      	str	r2, [r3, #0]
   d6dfc:	4770      	bx	lr
   d6dfe:	bf00      	nop
   d6e00:	2003e3a0 	.word	0x2003e3a0
   d6e04:	2003e6d4 	.word	0x2003e6d4

000d6e08 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d6e08:	4770      	bx	lr

000d6e0a <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6e0a:	7441      	strb	r1, [r0, #17]
   d6e0c:	4770      	bx	lr

000d6e0e <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d6e0e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d6e10:	7c00      	ldrb	r0, [r0, #16]
   d6e12:	f7fe fef5 	bl	d5c00 <HAL_USART_Available_Data_For_Write>
}
   d6e16:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6e1a:	bd08      	pop	{r3, pc}

000d6e1c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d6e1c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d6e1e:	7c00      	ldrb	r0, [r0, #16]
   d6e20:	f7fe fece 	bl	d5bc0 <HAL_USART_Available_Data>
}
   d6e24:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6e28:	bd08      	pop	{r3, pc}

000d6e2a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d6e2a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d6e2c:	7c00      	ldrb	r0, [r0, #16]
   d6e2e:	f7fe fed7 	bl	d5be0 <HAL_USART_Peek_Data>
}
   d6e32:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6e36:	bf28      	it	cs
   d6e38:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d6e3c:	bd08      	pop	{r3, pc}

000d6e3e <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d6e3e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d6e40:	7c00      	ldrb	r0, [r0, #16]
   d6e42:	f7fe fec5 	bl	d5bd0 <HAL_USART_Read_Data>
}
   d6e46:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6e4a:	bf28      	it	cs
   d6e4c:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d6e50:	bd08      	pop	{r3, pc}

000d6e52 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d6e52:	7c00      	ldrb	r0, [r0, #16]
   d6e54:	f7fe becc 	b.w	d5bf0 <HAL_USART_Flush_Data>

000d6e58 <_ZN11USARTSerialD0Ev>:
   d6e58:	b510      	push	{r4, lr}
   d6e5a:	2114      	movs	r1, #20
   d6e5c:	4604      	mov	r4, r0
   d6e5e:	f000 f9ac 	bl	d71ba <_ZdlPvj>
   d6e62:	4620      	mov	r0, r4
   d6e64:	bd10      	pop	{r4, pc}

000d6e66 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d6e66:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6e68:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d6e6a:	4604      	mov	r4, r0
   d6e6c:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6e6e:	b925      	cbnz	r5, d6e7a <_ZN11USARTSerial5writeEh+0x14>
   d6e70:	7c00      	ldrb	r0, [r0, #16]
   d6e72:	f7fe fec5 	bl	d5c00 <HAL_USART_Available_Data_For_Write>
   d6e76:	2800      	cmp	r0, #0
   d6e78:	dd05      	ble.n	d6e86 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d6e7a:	4631      	mov	r1, r6
   d6e7c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d6e7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d6e82:	f7fe be95 	b.w	d5bb0 <HAL_USART_Write_Data>
  }
  return 0;
}
   d6e86:	4628      	mov	r0, r5
   d6e88:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6e8c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d6e8c:	b510      	push	{r4, lr}
   d6e8e:	4604      	mov	r4, r0
   d6e90:	4608      	mov	r0, r1
   d6e92:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d6e94:	2200      	movs	r2, #0
   d6e96:	6062      	str	r2, [r4, #4]
   d6e98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6e9c:	60a2      	str	r2, [r4, #8]
   d6e9e:	4a05      	ldr	r2, [pc, #20]	; (d6eb4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d6ea0:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d6ea2:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d6ea4:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d6ea6:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d6ea8:	461a      	mov	r2, r3
   d6eaa:	f7fe fe79 	bl	d5ba0 <HAL_USART_Init>
}
   d6eae:	4620      	mov	r0, r4
   d6eb0:	bd10      	pop	{r4, pc}
   d6eb2:	bf00      	nop
   d6eb4:	000d81f4 	.word	0x000d81f4

000d6eb8 <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
   d6eb8:	2300      	movs	r3, #0
   d6eba:	7c00      	ldrb	r0, [r0, #16]
   d6ebc:	f7fe bea8 	b.w	d5c10 <HAL_USART_BeginConfig>

000d6ec0 <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
   d6ec0:	2200      	movs	r2, #0
   d6ec2:	f7ff bff9 	b.w	d6eb8 <_ZN11USARTSerial5beginEmm>
	...

000d6ec8 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d6ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
   d6eca:	4c19      	ldr	r4, [pc, #100]	; (d6f30 <_Z22__fetch_global_Serial1v+0x68>)
   d6ecc:	6825      	ldr	r5, [r4, #0]
   d6ece:	b94d      	cbnz	r5, d6ee4 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new Ring_Buffer();
   d6ed0:	2084      	movs	r0, #132	; 0x84
   d6ed2:	f7fd f8e0 	bl	d4096 <_Znwj>
   d6ed6:	4606      	mov	r6, r0
   d6ed8:	b118      	cbz	r0, d6ee2 <_Z22__fetch_global_Serial1v+0x1a>
   d6eda:	2284      	movs	r2, #132	; 0x84
   d6edc:	4629      	mov	r1, r5
   d6ede:	f000 ff74 	bl	d7dca <memset>
   d6ee2:	6026      	str	r6, [r4, #0]
  }
  if (!serial1_tx_buffer) {
   d6ee4:	4d13      	ldr	r5, [pc, #76]	; (d6f34 <_Z22__fetch_global_Serial1v+0x6c>)
   d6ee6:	682e      	ldr	r6, [r5, #0]
   d6ee8:	b94e      	cbnz	r6, d6efe <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new Ring_Buffer();
   d6eea:	2084      	movs	r0, #132	; 0x84
   d6eec:	f7fd f8d3 	bl	d4096 <_Znwj>
   d6ef0:	4607      	mov	r7, r0
   d6ef2:	b118      	cbz	r0, d6efc <_Z22__fetch_global_Serial1v+0x34>
   d6ef4:	2284      	movs	r2, #132	; 0x84
   d6ef6:	4631      	mov	r1, r6
   d6ef8:	f000 ff67 	bl	d7dca <memset>
   d6efc:	602f      	str	r7, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
   d6efe:	4f0e      	ldr	r7, [pc, #56]	; (d6f38 <_Z22__fetch_global_Serial1v+0x70>)
   d6f00:	6839      	ldr	r1, [r7, #0]
   d6f02:	f011 0601 	ands.w	r6, r1, #1
   d6f06:	d111      	bne.n	d6f2c <_Z22__fetch_global_Serial1v+0x64>
   d6f08:	4638      	mov	r0, r7
   d6f0a:	f7fd f8ca 	bl	d40a2 <__cxa_guard_acquire>
   d6f0e:	b168      	cbz	r0, d6f2c <_Z22__fetch_global_Serial1v+0x64>
   d6f10:	6822      	ldr	r2, [r4, #0]
   d6f12:	682b      	ldr	r3, [r5, #0]
   d6f14:	4809      	ldr	r0, [pc, #36]	; (d6f3c <_Z22__fetch_global_Serial1v+0x74>)
   d6f16:	4631      	mov	r1, r6
   d6f18:	f7ff ffb8 	bl	d6e8c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d6f1c:	4638      	mov	r0, r7
   d6f1e:	f7fd f8c5 	bl	d40ac <__cxa_guard_release>
   d6f22:	4a07      	ldr	r2, [pc, #28]	; (d6f40 <_Z22__fetch_global_Serial1v+0x78>)
   d6f24:	4907      	ldr	r1, [pc, #28]	; (d6f44 <_Z22__fetch_global_Serial1v+0x7c>)
   d6f26:	4805      	ldr	r0, [pc, #20]	; (d6f3c <_Z22__fetch_global_Serial1v+0x74>)
   d6f28:	f000 f942 	bl	d71b0 <__aeabi_atexit>
#endif
	return serial1;
}
   d6f2c:	4803      	ldr	r0, [pc, #12]	; (d6f3c <_Z22__fetch_global_Serial1v+0x74>)
   d6f2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d6f30:	2003e6f4 	.word	0x2003e6f4
   d6f34:	2003e6ec 	.word	0x2003e6ec
   d6f38:	2003e6f0 	.word	0x2003e6f0
   d6f3c:	2003e6d8 	.word	0x2003e6d8
   d6f40:	2003e408 	.word	0x2003e408
   d6f44:	000d6e09 	.word	0x000d6e09

000d6f48 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6f48:	7441      	strb	r1, [r0, #17]
   d6f4a:	4770      	bx	lr

000d6f4c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d6f4c:	4770      	bx	lr

000d6f4e <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d6f4e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d6f50:	2100      	movs	r1, #0
   d6f52:	7c00      	ldrb	r0, [r0, #16]
   d6f54:	f7fe fe84 	bl	d5c60 <HAL_USB_USART_Receive_Data>
}
   d6f58:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6f5c:	bf28      	it	cs
   d6f5e:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d6f62:	bd08      	pop	{r3, pc}

000d6f64 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d6f64:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d6f66:	2101      	movs	r1, #1
   d6f68:	7c00      	ldrb	r0, [r0, #16]
   d6f6a:	f7fe fe79 	bl	d5c60 <HAL_USB_USART_Receive_Data>
}
   d6f6e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6f72:	bf28      	it	cs
   d6f74:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d6f78:	bd08      	pop	{r3, pc}

000d6f7a <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d6f7a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d6f7c:	7c00      	ldrb	r0, [r0, #16]
   d6f7e:	f7fe fe67 	bl	d5c50 <HAL_USB_USART_Available_Data_For_Write>
}
   d6f82:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6f86:	bd08      	pop	{r3, pc}

000d6f88 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d6f88:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d6f8a:	7c00      	ldrb	r0, [r0, #16]
   d6f8c:	f7fe fe58 	bl	d5c40 <HAL_USB_USART_Available_Data>
}
   d6f90:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6f94:	bd08      	pop	{r3, pc}

000d6f96 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d6f96:	7c00      	ldrb	r0, [r0, #16]
   d6f98:	f7fe be72 	b.w	d5c80 <HAL_USB_USART_Flush_Data>

000d6f9c <_ZN9USBSerialD0Ev>:
   d6f9c:	b510      	push	{r4, lr}
   d6f9e:	2114      	movs	r1, #20
   d6fa0:	4604      	mov	r4, r0
   d6fa2:	f000 f90a 	bl	d71ba <_ZdlPvj>
   d6fa6:	4620      	mov	r0, r4
   d6fa8:	bd10      	pop	{r4, pc}

000d6faa <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6faa:	b538      	push	{r3, r4, r5, lr}
   d6fac:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6fae:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6fb0:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6fb2:	f7fe fe4d 	bl	d5c50 <HAL_USB_USART_Available_Data_For_Write>
   d6fb6:	2800      	cmp	r0, #0
   d6fb8:	dc01      	bgt.n	d6fbe <_ZN9USBSerial5writeEh+0x14>
   d6fba:	7c60      	ldrb	r0, [r4, #17]
   d6fbc:	b128      	cbz	r0, d6fca <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d6fbe:	4629      	mov	r1, r5
   d6fc0:	7c20      	ldrb	r0, [r4, #16]
   d6fc2:	f7fe fe55 	bl	d5c70 <HAL_USB_USART_Send_Data>
   d6fc6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d6fca:	bd38      	pop	{r3, r4, r5, pc}

000d6fcc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6fcc:	b510      	push	{r4, lr}
   d6fce:	4604      	mov	r4, r0
   d6fd0:	2300      	movs	r3, #0
   d6fd2:	6063      	str	r3, [r4, #4]
   d6fd4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6fd8:	60a3      	str	r3, [r4, #8]
   d6fda:	4b05      	ldr	r3, [pc, #20]	; (d6ff0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d6fdc:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d6fde:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6fe0:	4608      	mov	r0, r1
{
  _serial = serial;
   d6fe2:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d6fe4:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d6fe6:	4611      	mov	r1, r2
   d6fe8:	f7fe fe1a 	bl	d5c20 <HAL_USB_USART_Init>
}
   d6fec:	4620      	mov	r0, r4
   d6fee:	bd10      	pop	{r4, pc}
   d6ff0:	000d8224 	.word	0x000d8224

000d6ff4 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d6ff4:	2200      	movs	r2, #0
   d6ff6:	7c00      	ldrb	r0, [r0, #16]
   d6ff8:	f7fe be1a 	b.w	d5c30 <HAL_USB_USART_Begin>

000d6ffc <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6ffc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d6ffe:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d7000:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d7002:	2100      	movs	r1, #0
   d7004:	f000 fee1 	bl	d7dca <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d7008:	4620      	mov	r0, r4
   d700a:	bd10      	pop	{r4, pc}

000d700c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d700c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d700e:	4d0e      	ldr	r5, [pc, #56]	; (d7048 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d7010:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d7012:	a801      	add	r0, sp, #4
   d7014:	f7ff fff2 	bl	d6ffc <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7018:	6829      	ldr	r1, [r5, #0]
   d701a:	f011 0401 	ands.w	r4, r1, #1
   d701e:	d110      	bne.n	d7042 <_Z16_fetch_usbserialv+0x36>
   d7020:	4628      	mov	r0, r5
   d7022:	f7fd f83e 	bl	d40a2 <__cxa_guard_acquire>
   d7026:	b160      	cbz	r0, d7042 <_Z16_fetch_usbserialv+0x36>
   d7028:	aa01      	add	r2, sp, #4
   d702a:	4621      	mov	r1, r4
   d702c:	4807      	ldr	r0, [pc, #28]	; (d704c <_Z16_fetch_usbserialv+0x40>)
   d702e:	f7ff ffcd 	bl	d6fcc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d7032:	4628      	mov	r0, r5
   d7034:	f7fd f83a 	bl	d40ac <__cxa_guard_release>
   d7038:	4a05      	ldr	r2, [pc, #20]	; (d7050 <_Z16_fetch_usbserialv+0x44>)
   d703a:	4906      	ldr	r1, [pc, #24]	; (d7054 <_Z16_fetch_usbserialv+0x48>)
   d703c:	4803      	ldr	r0, [pc, #12]	; (d704c <_Z16_fetch_usbserialv+0x40>)
   d703e:	f000 f8b7 	bl	d71b0 <__aeabi_atexit>
	return _usbserial;
}
   d7042:	4802      	ldr	r0, [pc, #8]	; (d704c <_Z16_fetch_usbserialv+0x40>)
   d7044:	b007      	add	sp, #28
   d7046:	bd30      	pop	{r4, r5, pc}
   d7048:	2003e6f8 	.word	0x2003e6f8
   d704c:	2003e6fc 	.word	0x2003e6fc
   d7050:	2003e408 	.word	0x2003e408
   d7054:	000d6f4d 	.word	0x000d6f4d

000d7058 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d7058:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d705a:	4b0c      	ldr	r3, [pc, #48]	; (d708c <serialEventRun+0x34>)
   d705c:	b133      	cbz	r3, d706c <serialEventRun+0x14>
   d705e:	f7ff ffd5 	bl	d700c <_Z16_fetch_usbserialv>
   d7062:	6803      	ldr	r3, [r0, #0]
   d7064:	691b      	ldr	r3, [r3, #16]
   d7066:	4798      	blx	r3
   d7068:	2800      	cmp	r0, #0
   d706a:	dc09      	bgt.n	d7080 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d706c:	4b08      	ldr	r3, [pc, #32]	; (d7090 <serialEventRun+0x38>)
   d706e:	b163      	cbz	r3, d708a <serialEventRun+0x32>
   d7070:	f7ff ff2a 	bl	d6ec8 <_Z22__fetch_global_Serial1v>
   d7074:	6803      	ldr	r3, [r0, #0]
   d7076:	691b      	ldr	r3, [r3, #16]
   d7078:	4798      	blx	r3
   d707a:	2800      	cmp	r0, #0
   d707c:	dc03      	bgt.n	d7086 <serialEventRun+0x2e>
   d707e:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d7080:	f3af 8000 	nop.w
   d7084:	e7f2      	b.n	d706c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d7086:	f3af 8000 	nop.w
   d708a:	bd08      	pop	{r3, pc}
	...

000d7094 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d7094:	b508      	push	{r3, lr}
	serialEventRun();
   d7096:	f7ff ffdf 	bl	d7058 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d709a:	f7fe fce9 	bl	d5a70 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d709e:	4b01      	ldr	r3, [pc, #4]	; (d70a4 <_post_loop+0x10>)
   d70a0:	6018      	str	r0, [r3, #0]
   d70a2:	bd08      	pop	{r3, pc}
   d70a4:	2003e714 	.word	0x2003e714

000d70a8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d70a8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d70aa:	2300      	movs	r3, #0
   d70ac:	9300      	str	r3, [sp, #0]
   d70ae:	461a      	mov	r2, r3
   d70b0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d70b4:	f7fe fe1e 	bl	d5cf4 <system_ctrl_set_result>
}
   d70b8:	b003      	add	sp, #12
   d70ba:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d70c0 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d70c0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d70c2:	8843      	ldrh	r3, [r0, #2]
   d70c4:	2b0a      	cmp	r3, #10
   d70c6:	d008      	beq.n	d70da <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d70c8:	2b50      	cmp	r3, #80	; 0x50
   d70ca:	d109      	bne.n	d70e0 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d70cc:	4b09      	ldr	r3, [pc, #36]	; (d70f4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d70ce:	681b      	ldr	r3, [r3, #0]
   d70d0:	b13b      	cbz	r3, d70e2 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d70d2:	b003      	add	sp, #12
   d70d4:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d70d8:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d70da:	f7ff ffe5 	bl	d70a8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d70de:	e006      	b.n	d70ee <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d70e0:	2300      	movs	r3, #0
   d70e2:	9300      	str	r3, [sp, #0]
   d70e4:	461a      	mov	r2, r3
   d70e6:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d70ea:	f7fe fe03 	bl	d5cf4 <system_ctrl_set_result>
        break;
    }
}
   d70ee:	b003      	add	sp, #12
   d70f0:	f85d fb04 	ldr.w	pc, [sp], #4
   d70f4:	2003e710 	.word	0x2003e710

000d70f8 <module_user_init_hook>:

void module_user_init_hook()
{
   d70f8:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d70fa:	f7fe fcb1 	bl	d5a60 <HAL_RNG_GetRandomNumber>
   d70fe:	4604      	mov	r4, r0
    srand(seed);
   d7100:	f000 fe6c 	bl	d7ddc <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d7104:	4b07      	ldr	r3, [pc, #28]	; (d7124 <module_user_init_hook+0x2c>)
   d7106:	b113      	cbz	r3, d710e <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d7108:	4620      	mov	r0, r4
   d710a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d710e:	2100      	movs	r1, #0
   d7110:	4804      	ldr	r0, [pc, #16]	; (d7124 <module_user_init_hook+0x2c>)
   d7112:	f7fe fe31 	bl	d5d78 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7116:	2100      	movs	r1, #0
   d7118:	4803      	ldr	r0, [pc, #12]	; (d7128 <module_user_init_hook+0x30>)
}
   d711a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d711e:	f7fe bddf 	b.w	d5ce0 <system_ctrl_set_app_request_handler>
   d7122:	bf00      	nop
   d7124:	00000000 	.word	0x00000000
   d7128:	000d70c1 	.word	0x000d70c1

000d712c <_Z20__fetch_global_Wire1v>:
	return wire;
}

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   d712c:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2);
   d712e:	4c0b      	ldr	r4, [pc, #44]	; (d715c <_Z20__fetch_global_Wire1v+0x30>)
   d7130:	6823      	ldr	r3, [r4, #0]
   d7132:	07db      	lsls	r3, r3, #31
   d7134:	d40f      	bmi.n	d7156 <_Z20__fetch_global_Wire1v+0x2a>
   d7136:	4620      	mov	r0, r4
   d7138:	f7fc ffb3 	bl	d40a2 <__cxa_guard_acquire>
   d713c:	b158      	cbz	r0, d7156 <_Z20__fetch_global_Wire1v+0x2a>
   d713e:	2101      	movs	r1, #1
   d7140:	4807      	ldr	r0, [pc, #28]	; (d7160 <_Z20__fetch_global_Wire1v+0x34>)
   d7142:	f7ff fac1 	bl	d66c8 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d7146:	4620      	mov	r0, r4
   d7148:	f7fc ffb0 	bl	d40ac <__cxa_guard_release>
   d714c:	4a05      	ldr	r2, [pc, #20]	; (d7164 <_Z20__fetch_global_Wire1v+0x38>)
   d714e:	4906      	ldr	r1, [pc, #24]	; (d7168 <_Z20__fetch_global_Wire1v+0x3c>)
   d7150:	4803      	ldr	r0, [pc, #12]	; (d7160 <_Z20__fetch_global_Wire1v+0x34>)
   d7152:	f000 f82d 	bl	d71b0 <__aeabi_atexit>
	return wire;
}
   d7156:	4802      	ldr	r0, [pc, #8]	; (d7160 <_Z20__fetch_global_Wire1v+0x34>)
   d7158:	bd10      	pop	{r4, pc}
   d715a:	bf00      	nop
   d715c:	2003e72c 	.word	0x2003e72c
   d7160:	2003e718 	.word	0x2003e718
   d7164:	2003e408 	.word	0x2003e408
   d7168:	000d6671 	.word	0x000d6671

000d716c <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d716c:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d716e:	4c0c      	ldr	r4, [pc, #48]	; (d71a0 <_GLOBAL__sub_I_SPI+0x34>)
   d7170:	4e0c      	ldr	r6, [pc, #48]	; (d71a4 <_GLOBAL__sub_I_SPI+0x38>)
   d7172:	4d0d      	ldr	r5, [pc, #52]	; (d71a8 <_GLOBAL__sub_I_SPI+0x3c>)
   d7174:	2100      	movs	r1, #0
   d7176:	4620      	mov	r0, r4
   d7178:	f7ff fd3c 	bl	d6bf4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d717c:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d717e:	4c0b      	ldr	r4, [pc, #44]	; (d71ac <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d7180:	4632      	mov	r2, r6
   d7182:	4629      	mov	r1, r5
   d7184:	f000 f814 	bl	d71b0 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d7188:	2101      	movs	r1, #1
   d718a:	4620      	mov	r0, r4
   d718c:	f7ff fd32 	bl	d6bf4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d7190:	4632      	mov	r2, r6
   d7192:	4629      	mov	r1, r5
   d7194:	4620      	mov	r0, r4
   d7196:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d719a:	f000 b809 	b.w	d71b0 <__aeabi_atexit>
   d719e:	bf00      	nop
   d71a0:	2003e730 	.word	0x2003e730
   d71a4:	2003e408 	.word	0x2003e408
   d71a8:	000d6be5 	.word	0x000d6be5
   d71ac:	2003e740 	.word	0x2003e740

000d71b0 <__aeabi_atexit>:
   d71b0:	460b      	mov	r3, r1
   d71b2:	4601      	mov	r1, r0
   d71b4:	4618      	mov	r0, r3
   d71b6:	f000 bdef 	b.w	d7d98 <__cxa_atexit>

000d71ba <_ZdlPvj>:
   d71ba:	f7fc bf6e 	b.w	d409a <_ZdlPv>

000d71be <_ZSt25__throw_bad_function_callv>:
   d71be:	b508      	push	{r3, lr}
   d71c0:	f7fe fe4a 	bl	d5e58 <abort>

000d71c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d71c4:	4b24      	ldr	r3, [pc, #144]	; (d7258 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d71c6:	681a      	ldr	r2, [r3, #0]
   d71c8:	07d0      	lsls	r0, r2, #31
   d71ca:	bf5c      	itt	pl
   d71cc:	2201      	movpl	r2, #1
   d71ce:	601a      	strpl	r2, [r3, #0]
   d71d0:	4b22      	ldr	r3, [pc, #136]	; (d725c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d71d2:	681a      	ldr	r2, [r3, #0]
   d71d4:	07d1      	lsls	r1, r2, #31
   d71d6:	bf5c      	itt	pl
   d71d8:	2201      	movpl	r2, #1
   d71da:	601a      	strpl	r2, [r3, #0]
   d71dc:	4b20      	ldr	r3, [pc, #128]	; (d7260 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d71de:	681a      	ldr	r2, [r3, #0]
   d71e0:	07d2      	lsls	r2, r2, #31
   d71e2:	bf5c      	itt	pl
   d71e4:	2201      	movpl	r2, #1
   d71e6:	601a      	strpl	r2, [r3, #0]
   d71e8:	4b1e      	ldr	r3, [pc, #120]	; (d7264 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d71ea:	681a      	ldr	r2, [r3, #0]
   d71ec:	07d0      	lsls	r0, r2, #31
   d71ee:	bf5c      	itt	pl
   d71f0:	2201      	movpl	r2, #1
   d71f2:	601a      	strpl	r2, [r3, #0]
   d71f4:	4b1c      	ldr	r3, [pc, #112]	; (d7268 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d71f6:	681a      	ldr	r2, [r3, #0]
   d71f8:	07d1      	lsls	r1, r2, #31
   d71fa:	bf5c      	itt	pl
   d71fc:	2201      	movpl	r2, #1
   d71fe:	601a      	strpl	r2, [r3, #0]
   d7200:	4b1a      	ldr	r3, [pc, #104]	; (d726c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d7202:	681a      	ldr	r2, [r3, #0]
   d7204:	07d2      	lsls	r2, r2, #31
   d7206:	bf5c      	itt	pl
   d7208:	2201      	movpl	r2, #1
   d720a:	601a      	strpl	r2, [r3, #0]
   d720c:	4b18      	ldr	r3, [pc, #96]	; (d7270 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d720e:	681a      	ldr	r2, [r3, #0]
   d7210:	07d0      	lsls	r0, r2, #31
   d7212:	bf5c      	itt	pl
   d7214:	2201      	movpl	r2, #1
   d7216:	601a      	strpl	r2, [r3, #0]
   d7218:	4b16      	ldr	r3, [pc, #88]	; (d7274 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d721a:	681a      	ldr	r2, [r3, #0]
   d721c:	07d1      	lsls	r1, r2, #31
   d721e:	bf5c      	itt	pl
   d7220:	2201      	movpl	r2, #1
   d7222:	601a      	strpl	r2, [r3, #0]
   d7224:	4b14      	ldr	r3, [pc, #80]	; (d7278 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d7226:	681a      	ldr	r2, [r3, #0]
   d7228:	07d2      	lsls	r2, r2, #31
   d722a:	bf5c      	itt	pl
   d722c:	2201      	movpl	r2, #1
   d722e:	601a      	strpl	r2, [r3, #0]
   d7230:	4b12      	ldr	r3, [pc, #72]	; (d727c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d7232:	681a      	ldr	r2, [r3, #0]
   d7234:	07d0      	lsls	r0, r2, #31
   d7236:	bf5c      	itt	pl
   d7238:	2201      	movpl	r2, #1
   d723a:	601a      	strpl	r2, [r3, #0]
   d723c:	4b10      	ldr	r3, [pc, #64]	; (d7280 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d723e:	681a      	ldr	r2, [r3, #0]
   d7240:	07d1      	lsls	r1, r2, #31
   d7242:	bf5c      	itt	pl
   d7244:	2201      	movpl	r2, #1
   d7246:	601a      	strpl	r2, [r3, #0]
   d7248:	4b0e      	ldr	r3, [pc, #56]	; (d7284 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d724a:	681a      	ldr	r2, [r3, #0]
   d724c:	07d2      	lsls	r2, r2, #31
   d724e:	bf5c      	itt	pl
   d7250:	2201      	movpl	r2, #1
   d7252:	601a      	strpl	r2, [r3, #0]
   d7254:	4770      	bx	lr
   d7256:	bf00      	nop
   d7258:	2003e77c 	.word	0x2003e77c
   d725c:	2003e778 	.word	0x2003e778
   d7260:	2003e774 	.word	0x2003e774
   d7264:	2003e770 	.word	0x2003e770
   d7268:	2003e76c 	.word	0x2003e76c
   d726c:	2003e768 	.word	0x2003e768
   d7270:	2003e764 	.word	0x2003e764
   d7274:	2003e760 	.word	0x2003e760
   d7278:	2003e75c 	.word	0x2003e75c
   d727c:	2003e758 	.word	0x2003e758
   d7280:	2003e754 	.word	0x2003e754
   d7284:	2003e750 	.word	0x2003e750

000d7288 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d7288:	4b18      	ldr	r3, [pc, #96]	; (d72ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d728a:	681a      	ldr	r2, [r3, #0]
   d728c:	07d1      	lsls	r1, r2, #31
   d728e:	bf5c      	itt	pl
   d7290:	2201      	movpl	r2, #1
   d7292:	601a      	strpl	r2, [r3, #0]
   d7294:	4b16      	ldr	r3, [pc, #88]	; (d72f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d7296:	681a      	ldr	r2, [r3, #0]
   d7298:	07d2      	lsls	r2, r2, #31
   d729a:	bf5c      	itt	pl
   d729c:	2201      	movpl	r2, #1
   d729e:	601a      	strpl	r2, [r3, #0]
   d72a0:	4b14      	ldr	r3, [pc, #80]	; (d72f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d72a2:	681a      	ldr	r2, [r3, #0]
   d72a4:	07d0      	lsls	r0, r2, #31
   d72a6:	bf5c      	itt	pl
   d72a8:	2201      	movpl	r2, #1
   d72aa:	601a      	strpl	r2, [r3, #0]
   d72ac:	4b12      	ldr	r3, [pc, #72]	; (d72f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d72ae:	681a      	ldr	r2, [r3, #0]
   d72b0:	07d1      	lsls	r1, r2, #31
   d72b2:	bf5c      	itt	pl
   d72b4:	2201      	movpl	r2, #1
   d72b6:	601a      	strpl	r2, [r3, #0]
   d72b8:	4b10      	ldr	r3, [pc, #64]	; (d72fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d72ba:	681a      	ldr	r2, [r3, #0]
   d72bc:	07d2      	lsls	r2, r2, #31
   d72be:	bf5c      	itt	pl
   d72c0:	2201      	movpl	r2, #1
   d72c2:	601a      	strpl	r2, [r3, #0]
   d72c4:	4b0e      	ldr	r3, [pc, #56]	; (d7300 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d72c6:	681a      	ldr	r2, [r3, #0]
   d72c8:	07d0      	lsls	r0, r2, #31
   d72ca:	bf5c      	itt	pl
   d72cc:	2201      	movpl	r2, #1
   d72ce:	601a      	strpl	r2, [r3, #0]
   d72d0:	4b0c      	ldr	r3, [pc, #48]	; (d7304 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d72d2:	681a      	ldr	r2, [r3, #0]
   d72d4:	07d1      	lsls	r1, r2, #31
   d72d6:	bf5c      	itt	pl
   d72d8:	2201      	movpl	r2, #1
   d72da:	601a      	strpl	r2, [r3, #0]
   d72dc:	4b0a      	ldr	r3, [pc, #40]	; (d7308 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d72de:	681a      	ldr	r2, [r3, #0]
   d72e0:	07d2      	lsls	r2, r2, #31
   d72e2:	bf5c      	itt	pl
   d72e4:	2201      	movpl	r2, #1
   d72e6:	601a      	strpl	r2, [r3, #0]
   d72e8:	4770      	bx	lr
   d72ea:	bf00      	nop
   d72ec:	2003e79c 	.word	0x2003e79c
   d72f0:	2003e798 	.word	0x2003e798
   d72f4:	2003e794 	.word	0x2003e794
   d72f8:	2003e790 	.word	0x2003e790
   d72fc:	2003e78c 	.word	0x2003e78c
   d7300:	2003e788 	.word	0x2003e788
   d7304:	2003e784 	.word	0x2003e784
   d7308:	2003e780 	.word	0x2003e780

000d730c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d730c:	4b18      	ldr	r3, [pc, #96]	; (d7370 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d730e:	681a      	ldr	r2, [r3, #0]
   d7310:	07d1      	lsls	r1, r2, #31
   d7312:	bf5c      	itt	pl
   d7314:	2201      	movpl	r2, #1
   d7316:	601a      	strpl	r2, [r3, #0]
   d7318:	4b16      	ldr	r3, [pc, #88]	; (d7374 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d731a:	681a      	ldr	r2, [r3, #0]
   d731c:	07d2      	lsls	r2, r2, #31
   d731e:	bf5c      	itt	pl
   d7320:	2201      	movpl	r2, #1
   d7322:	601a      	strpl	r2, [r3, #0]
   d7324:	4b14      	ldr	r3, [pc, #80]	; (d7378 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d7326:	681a      	ldr	r2, [r3, #0]
   d7328:	07d0      	lsls	r0, r2, #31
   d732a:	bf5c      	itt	pl
   d732c:	2201      	movpl	r2, #1
   d732e:	601a      	strpl	r2, [r3, #0]
   d7330:	4b12      	ldr	r3, [pc, #72]	; (d737c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d7332:	681a      	ldr	r2, [r3, #0]
   d7334:	07d1      	lsls	r1, r2, #31
   d7336:	bf5c      	itt	pl
   d7338:	2201      	movpl	r2, #1
   d733a:	601a      	strpl	r2, [r3, #0]
   d733c:	4b10      	ldr	r3, [pc, #64]	; (d7380 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d733e:	681a      	ldr	r2, [r3, #0]
   d7340:	07d2      	lsls	r2, r2, #31
   d7342:	bf5c      	itt	pl
   d7344:	2201      	movpl	r2, #1
   d7346:	601a      	strpl	r2, [r3, #0]
   d7348:	4b0e      	ldr	r3, [pc, #56]	; (d7384 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d734a:	681a      	ldr	r2, [r3, #0]
   d734c:	07d0      	lsls	r0, r2, #31
   d734e:	bf5c      	itt	pl
   d7350:	2201      	movpl	r2, #1
   d7352:	601a      	strpl	r2, [r3, #0]
   d7354:	4b0c      	ldr	r3, [pc, #48]	; (d7388 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d7356:	681a      	ldr	r2, [r3, #0]
   d7358:	07d1      	lsls	r1, r2, #31
   d735a:	bf5c      	itt	pl
   d735c:	2201      	movpl	r2, #1
   d735e:	601a      	strpl	r2, [r3, #0]
   d7360:	4b0a      	ldr	r3, [pc, #40]	; (d738c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d7362:	681a      	ldr	r2, [r3, #0]
   d7364:	07d2      	lsls	r2, r2, #31
   d7366:	bf5c      	itt	pl
   d7368:	2201      	movpl	r2, #1
   d736a:	601a      	strpl	r2, [r3, #0]
   d736c:	4770      	bx	lr
   d736e:	bf00      	nop
   d7370:	2003e7bc 	.word	0x2003e7bc
   d7374:	2003e7b8 	.word	0x2003e7b8
   d7378:	2003e7b4 	.word	0x2003e7b4
   d737c:	2003e7b0 	.word	0x2003e7b0
   d7380:	2003e7ac 	.word	0x2003e7ac
   d7384:	2003e7a8 	.word	0x2003e7a8
   d7388:	2003e7a4 	.word	0x2003e7a4
   d738c:	2003e7a0 	.word	0x2003e7a0

000d7390 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d7390:	4b24      	ldr	r3, [pc, #144]	; (d7424 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d7392:	681a      	ldr	r2, [r3, #0]
   d7394:	07d0      	lsls	r0, r2, #31
   d7396:	bf5c      	itt	pl
   d7398:	2201      	movpl	r2, #1
   d739a:	601a      	strpl	r2, [r3, #0]
   d739c:	4b22      	ldr	r3, [pc, #136]	; (d7428 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d739e:	681a      	ldr	r2, [r3, #0]
   d73a0:	07d1      	lsls	r1, r2, #31
   d73a2:	bf5c      	itt	pl
   d73a4:	2201      	movpl	r2, #1
   d73a6:	601a      	strpl	r2, [r3, #0]
   d73a8:	4b20      	ldr	r3, [pc, #128]	; (d742c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d73aa:	681a      	ldr	r2, [r3, #0]
   d73ac:	07d2      	lsls	r2, r2, #31
   d73ae:	bf5c      	itt	pl
   d73b0:	2201      	movpl	r2, #1
   d73b2:	601a      	strpl	r2, [r3, #0]
   d73b4:	4b1e      	ldr	r3, [pc, #120]	; (d7430 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d73b6:	681a      	ldr	r2, [r3, #0]
   d73b8:	07d0      	lsls	r0, r2, #31
   d73ba:	bf5c      	itt	pl
   d73bc:	2201      	movpl	r2, #1
   d73be:	601a      	strpl	r2, [r3, #0]
   d73c0:	4b1c      	ldr	r3, [pc, #112]	; (d7434 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d73c2:	681a      	ldr	r2, [r3, #0]
   d73c4:	07d1      	lsls	r1, r2, #31
   d73c6:	bf5c      	itt	pl
   d73c8:	2201      	movpl	r2, #1
   d73ca:	601a      	strpl	r2, [r3, #0]
   d73cc:	4b1a      	ldr	r3, [pc, #104]	; (d7438 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d73ce:	681a      	ldr	r2, [r3, #0]
   d73d0:	07d2      	lsls	r2, r2, #31
   d73d2:	bf5c      	itt	pl
   d73d4:	2201      	movpl	r2, #1
   d73d6:	601a      	strpl	r2, [r3, #0]
   d73d8:	4b18      	ldr	r3, [pc, #96]	; (d743c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d73da:	681a      	ldr	r2, [r3, #0]
   d73dc:	07d0      	lsls	r0, r2, #31
   d73de:	bf5c      	itt	pl
   d73e0:	2201      	movpl	r2, #1
   d73e2:	601a      	strpl	r2, [r3, #0]
   d73e4:	4b16      	ldr	r3, [pc, #88]	; (d7440 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d73e6:	681a      	ldr	r2, [r3, #0]
   d73e8:	07d1      	lsls	r1, r2, #31
   d73ea:	bf5c      	itt	pl
   d73ec:	2201      	movpl	r2, #1
   d73ee:	601a      	strpl	r2, [r3, #0]
   d73f0:	4b14      	ldr	r3, [pc, #80]	; (d7444 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d73f2:	681a      	ldr	r2, [r3, #0]
   d73f4:	07d2      	lsls	r2, r2, #31
   d73f6:	bf5c      	itt	pl
   d73f8:	2201      	movpl	r2, #1
   d73fa:	601a      	strpl	r2, [r3, #0]
   d73fc:	4b12      	ldr	r3, [pc, #72]	; (d7448 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d73fe:	681a      	ldr	r2, [r3, #0]
   d7400:	07d0      	lsls	r0, r2, #31
   d7402:	bf5c      	itt	pl
   d7404:	2201      	movpl	r2, #1
   d7406:	601a      	strpl	r2, [r3, #0]
   d7408:	4b10      	ldr	r3, [pc, #64]	; (d744c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d740a:	681a      	ldr	r2, [r3, #0]
   d740c:	07d1      	lsls	r1, r2, #31
   d740e:	bf5c      	itt	pl
   d7410:	2201      	movpl	r2, #1
   d7412:	601a      	strpl	r2, [r3, #0]
   d7414:	4b0e      	ldr	r3, [pc, #56]	; (d7450 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d7416:	681a      	ldr	r2, [r3, #0]
   d7418:	07d2      	lsls	r2, r2, #31
   d741a:	bf5c      	itt	pl
   d741c:	2201      	movpl	r2, #1
   d741e:	601a      	strpl	r2, [r3, #0]
   d7420:	4770      	bx	lr
   d7422:	bf00      	nop
   d7424:	2003e7ec 	.word	0x2003e7ec
   d7428:	2003e7e8 	.word	0x2003e7e8
   d742c:	2003e7e4 	.word	0x2003e7e4
   d7430:	2003e7e0 	.word	0x2003e7e0
   d7434:	2003e7dc 	.word	0x2003e7dc
   d7438:	2003e7d8 	.word	0x2003e7d8
   d743c:	2003e7d4 	.word	0x2003e7d4
   d7440:	2003e7d0 	.word	0x2003e7d0
   d7444:	2003e7cc 	.word	0x2003e7cc
   d7448:	2003e7c8 	.word	0x2003e7c8
   d744c:	2003e7c4 	.word	0x2003e7c4
   d7450:	2003e7c0 	.word	0x2003e7c0

000d7454 <__aeabi_drsub>:
   d7454:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d7458:	e002      	b.n	d7460 <__adddf3>
   d745a:	bf00      	nop

000d745c <__aeabi_dsub>:
   d745c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d7460 <__adddf3>:
   d7460:	b530      	push	{r4, r5, lr}
   d7462:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d7466:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d746a:	ea94 0f05 	teq	r4, r5
   d746e:	bf08      	it	eq
   d7470:	ea90 0f02 	teqeq	r0, r2
   d7474:	bf1f      	itttt	ne
   d7476:	ea54 0c00 	orrsne.w	ip, r4, r0
   d747a:	ea55 0c02 	orrsne.w	ip, r5, r2
   d747e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d7482:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d7486:	f000 80e2 	beq.w	d764e <__adddf3+0x1ee>
   d748a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d748e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d7492:	bfb8      	it	lt
   d7494:	426d      	neglt	r5, r5
   d7496:	dd0c      	ble.n	d74b2 <__adddf3+0x52>
   d7498:	442c      	add	r4, r5
   d749a:	ea80 0202 	eor.w	r2, r0, r2
   d749e:	ea81 0303 	eor.w	r3, r1, r3
   d74a2:	ea82 0000 	eor.w	r0, r2, r0
   d74a6:	ea83 0101 	eor.w	r1, r3, r1
   d74aa:	ea80 0202 	eor.w	r2, r0, r2
   d74ae:	ea81 0303 	eor.w	r3, r1, r3
   d74b2:	2d36      	cmp	r5, #54	; 0x36
   d74b4:	bf88      	it	hi
   d74b6:	bd30      	pophi	{r4, r5, pc}
   d74b8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d74bc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d74c0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d74c4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d74c8:	d002      	beq.n	d74d0 <__adddf3+0x70>
   d74ca:	4240      	negs	r0, r0
   d74cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d74d0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d74d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d74d8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d74dc:	d002      	beq.n	d74e4 <__adddf3+0x84>
   d74de:	4252      	negs	r2, r2
   d74e0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d74e4:	ea94 0f05 	teq	r4, r5
   d74e8:	f000 80a7 	beq.w	d763a <__adddf3+0x1da>
   d74ec:	f1a4 0401 	sub.w	r4, r4, #1
   d74f0:	f1d5 0e20 	rsbs	lr, r5, #32
   d74f4:	db0d      	blt.n	d7512 <__adddf3+0xb2>
   d74f6:	fa02 fc0e 	lsl.w	ip, r2, lr
   d74fa:	fa22 f205 	lsr.w	r2, r2, r5
   d74fe:	1880      	adds	r0, r0, r2
   d7500:	f141 0100 	adc.w	r1, r1, #0
   d7504:	fa03 f20e 	lsl.w	r2, r3, lr
   d7508:	1880      	adds	r0, r0, r2
   d750a:	fa43 f305 	asr.w	r3, r3, r5
   d750e:	4159      	adcs	r1, r3
   d7510:	e00e      	b.n	d7530 <__adddf3+0xd0>
   d7512:	f1a5 0520 	sub.w	r5, r5, #32
   d7516:	f10e 0e20 	add.w	lr, lr, #32
   d751a:	2a01      	cmp	r2, #1
   d751c:	fa03 fc0e 	lsl.w	ip, r3, lr
   d7520:	bf28      	it	cs
   d7522:	f04c 0c02 	orrcs.w	ip, ip, #2
   d7526:	fa43 f305 	asr.w	r3, r3, r5
   d752a:	18c0      	adds	r0, r0, r3
   d752c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d7530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7534:	d507      	bpl.n	d7546 <__adddf3+0xe6>
   d7536:	f04f 0e00 	mov.w	lr, #0
   d753a:	f1dc 0c00 	rsbs	ip, ip, #0
   d753e:	eb7e 0000 	sbcs.w	r0, lr, r0
   d7542:	eb6e 0101 	sbc.w	r1, lr, r1
   d7546:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d754a:	d31b      	bcc.n	d7584 <__adddf3+0x124>
   d754c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d7550:	d30c      	bcc.n	d756c <__adddf3+0x10c>
   d7552:	0849      	lsrs	r1, r1, #1
   d7554:	ea5f 0030 	movs.w	r0, r0, rrx
   d7558:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d755c:	f104 0401 	add.w	r4, r4, #1
   d7560:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d7564:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d7568:	f080 809a 	bcs.w	d76a0 <__adddf3+0x240>
   d756c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d7570:	bf08      	it	eq
   d7572:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d7576:	f150 0000 	adcs.w	r0, r0, #0
   d757a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d757e:	ea41 0105 	orr.w	r1, r1, r5
   d7582:	bd30      	pop	{r4, r5, pc}
   d7584:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d7588:	4140      	adcs	r0, r0
   d758a:	eb41 0101 	adc.w	r1, r1, r1
   d758e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7592:	f1a4 0401 	sub.w	r4, r4, #1
   d7596:	d1e9      	bne.n	d756c <__adddf3+0x10c>
   d7598:	f091 0f00 	teq	r1, #0
   d759c:	bf04      	itt	eq
   d759e:	4601      	moveq	r1, r0
   d75a0:	2000      	moveq	r0, #0
   d75a2:	fab1 f381 	clz	r3, r1
   d75a6:	bf08      	it	eq
   d75a8:	3320      	addeq	r3, #32
   d75aa:	f1a3 030b 	sub.w	r3, r3, #11
   d75ae:	f1b3 0220 	subs.w	r2, r3, #32
   d75b2:	da0c      	bge.n	d75ce <__adddf3+0x16e>
   d75b4:	320c      	adds	r2, #12
   d75b6:	dd08      	ble.n	d75ca <__adddf3+0x16a>
   d75b8:	f102 0c14 	add.w	ip, r2, #20
   d75bc:	f1c2 020c 	rsb	r2, r2, #12
   d75c0:	fa01 f00c 	lsl.w	r0, r1, ip
   d75c4:	fa21 f102 	lsr.w	r1, r1, r2
   d75c8:	e00c      	b.n	d75e4 <__adddf3+0x184>
   d75ca:	f102 0214 	add.w	r2, r2, #20
   d75ce:	bfd8      	it	le
   d75d0:	f1c2 0c20 	rsble	ip, r2, #32
   d75d4:	fa01 f102 	lsl.w	r1, r1, r2
   d75d8:	fa20 fc0c 	lsr.w	ip, r0, ip
   d75dc:	bfdc      	itt	le
   d75de:	ea41 010c 	orrle.w	r1, r1, ip
   d75e2:	4090      	lslle	r0, r2
   d75e4:	1ae4      	subs	r4, r4, r3
   d75e6:	bfa2      	ittt	ge
   d75e8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d75ec:	4329      	orrge	r1, r5
   d75ee:	bd30      	popge	{r4, r5, pc}
   d75f0:	ea6f 0404 	mvn.w	r4, r4
   d75f4:	3c1f      	subs	r4, #31
   d75f6:	da1c      	bge.n	d7632 <__adddf3+0x1d2>
   d75f8:	340c      	adds	r4, #12
   d75fa:	dc0e      	bgt.n	d761a <__adddf3+0x1ba>
   d75fc:	f104 0414 	add.w	r4, r4, #20
   d7600:	f1c4 0220 	rsb	r2, r4, #32
   d7604:	fa20 f004 	lsr.w	r0, r0, r4
   d7608:	fa01 f302 	lsl.w	r3, r1, r2
   d760c:	ea40 0003 	orr.w	r0, r0, r3
   d7610:	fa21 f304 	lsr.w	r3, r1, r4
   d7614:	ea45 0103 	orr.w	r1, r5, r3
   d7618:	bd30      	pop	{r4, r5, pc}
   d761a:	f1c4 040c 	rsb	r4, r4, #12
   d761e:	f1c4 0220 	rsb	r2, r4, #32
   d7622:	fa20 f002 	lsr.w	r0, r0, r2
   d7626:	fa01 f304 	lsl.w	r3, r1, r4
   d762a:	ea40 0003 	orr.w	r0, r0, r3
   d762e:	4629      	mov	r1, r5
   d7630:	bd30      	pop	{r4, r5, pc}
   d7632:	fa21 f004 	lsr.w	r0, r1, r4
   d7636:	4629      	mov	r1, r5
   d7638:	bd30      	pop	{r4, r5, pc}
   d763a:	f094 0f00 	teq	r4, #0
   d763e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d7642:	bf06      	itte	eq
   d7644:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d7648:	3401      	addeq	r4, #1
   d764a:	3d01      	subne	r5, #1
   d764c:	e74e      	b.n	d74ec <__adddf3+0x8c>
   d764e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d7652:	bf18      	it	ne
   d7654:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d7658:	d029      	beq.n	d76ae <__adddf3+0x24e>
   d765a:	ea94 0f05 	teq	r4, r5
   d765e:	bf08      	it	eq
   d7660:	ea90 0f02 	teqeq	r0, r2
   d7664:	d005      	beq.n	d7672 <__adddf3+0x212>
   d7666:	ea54 0c00 	orrs.w	ip, r4, r0
   d766a:	bf04      	itt	eq
   d766c:	4619      	moveq	r1, r3
   d766e:	4610      	moveq	r0, r2
   d7670:	bd30      	pop	{r4, r5, pc}
   d7672:	ea91 0f03 	teq	r1, r3
   d7676:	bf1e      	ittt	ne
   d7678:	2100      	movne	r1, #0
   d767a:	2000      	movne	r0, #0
   d767c:	bd30      	popne	{r4, r5, pc}
   d767e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d7682:	d105      	bne.n	d7690 <__adddf3+0x230>
   d7684:	0040      	lsls	r0, r0, #1
   d7686:	4149      	adcs	r1, r1
   d7688:	bf28      	it	cs
   d768a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d768e:	bd30      	pop	{r4, r5, pc}
   d7690:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d7694:	bf3c      	itt	cc
   d7696:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d769a:	bd30      	popcc	{r4, r5, pc}
   d769c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d76a0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d76a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d76a8:	f04f 0000 	mov.w	r0, #0
   d76ac:	bd30      	pop	{r4, r5, pc}
   d76ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d76b2:	bf1a      	itte	ne
   d76b4:	4619      	movne	r1, r3
   d76b6:	4610      	movne	r0, r2
   d76b8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d76bc:	bf1c      	itt	ne
   d76be:	460b      	movne	r3, r1
   d76c0:	4602      	movne	r2, r0
   d76c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d76c6:	bf06      	itte	eq
   d76c8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d76cc:	ea91 0f03 	teqeq	r1, r3
   d76d0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d76d4:	bd30      	pop	{r4, r5, pc}
   d76d6:	bf00      	nop

000d76d8 <__aeabi_ui2d>:
   d76d8:	f090 0f00 	teq	r0, #0
   d76dc:	bf04      	itt	eq
   d76de:	2100      	moveq	r1, #0
   d76e0:	4770      	bxeq	lr
   d76e2:	b530      	push	{r4, r5, lr}
   d76e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d76e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d76ec:	f04f 0500 	mov.w	r5, #0
   d76f0:	f04f 0100 	mov.w	r1, #0
   d76f4:	e750      	b.n	d7598 <__adddf3+0x138>
   d76f6:	bf00      	nop

000d76f8 <__aeabi_i2d>:
   d76f8:	f090 0f00 	teq	r0, #0
   d76fc:	bf04      	itt	eq
   d76fe:	2100      	moveq	r1, #0
   d7700:	4770      	bxeq	lr
   d7702:	b530      	push	{r4, r5, lr}
   d7704:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7708:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d770c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d7710:	bf48      	it	mi
   d7712:	4240      	negmi	r0, r0
   d7714:	f04f 0100 	mov.w	r1, #0
   d7718:	e73e      	b.n	d7598 <__adddf3+0x138>
   d771a:	bf00      	nop

000d771c <__aeabi_f2d>:
   d771c:	0042      	lsls	r2, r0, #1
   d771e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d7722:	ea4f 0131 	mov.w	r1, r1, rrx
   d7726:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d772a:	bf1f      	itttt	ne
   d772c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d7730:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d7734:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d7738:	4770      	bxne	lr
   d773a:	f092 0f00 	teq	r2, #0
   d773e:	bf14      	ite	ne
   d7740:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d7744:	4770      	bxeq	lr
   d7746:	b530      	push	{r4, r5, lr}
   d7748:	f44f 7460 	mov.w	r4, #896	; 0x380
   d774c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d7754:	e720      	b.n	d7598 <__adddf3+0x138>
   d7756:	bf00      	nop

000d7758 <__aeabi_ul2d>:
   d7758:	ea50 0201 	orrs.w	r2, r0, r1
   d775c:	bf08      	it	eq
   d775e:	4770      	bxeq	lr
   d7760:	b530      	push	{r4, r5, lr}
   d7762:	f04f 0500 	mov.w	r5, #0
   d7766:	e00a      	b.n	d777e <__aeabi_l2d+0x16>

000d7768 <__aeabi_l2d>:
   d7768:	ea50 0201 	orrs.w	r2, r0, r1
   d776c:	bf08      	it	eq
   d776e:	4770      	bxeq	lr
   d7770:	b530      	push	{r4, r5, lr}
   d7772:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d7776:	d502      	bpl.n	d777e <__aeabi_l2d+0x16>
   d7778:	4240      	negs	r0, r0
   d777a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d777e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7782:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7786:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d778a:	f43f aedc 	beq.w	d7546 <__adddf3+0xe6>
   d778e:	f04f 0203 	mov.w	r2, #3
   d7792:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d7796:	bf18      	it	ne
   d7798:	3203      	addne	r2, #3
   d779a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d779e:	bf18      	it	ne
   d77a0:	3203      	addne	r2, #3
   d77a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d77a6:	f1c2 0320 	rsb	r3, r2, #32
   d77aa:	fa00 fc03 	lsl.w	ip, r0, r3
   d77ae:	fa20 f002 	lsr.w	r0, r0, r2
   d77b2:	fa01 fe03 	lsl.w	lr, r1, r3
   d77b6:	ea40 000e 	orr.w	r0, r0, lr
   d77ba:	fa21 f102 	lsr.w	r1, r1, r2
   d77be:	4414      	add	r4, r2
   d77c0:	e6c1      	b.n	d7546 <__adddf3+0xe6>
   d77c2:	bf00      	nop

000d77c4 <__aeabi_dmul>:
   d77c4:	b570      	push	{r4, r5, r6, lr}
   d77c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d77ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d77ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d77d2:	bf1d      	ittte	ne
   d77d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d77d8:	ea94 0f0c 	teqne	r4, ip
   d77dc:	ea95 0f0c 	teqne	r5, ip
   d77e0:	f000 f8de 	bleq	d79a0 <__aeabi_dmul+0x1dc>
   d77e4:	442c      	add	r4, r5
   d77e6:	ea81 0603 	eor.w	r6, r1, r3
   d77ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d77ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d77f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d77f6:	bf18      	it	ne
   d77f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d77fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7800:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d7804:	d038      	beq.n	d7878 <__aeabi_dmul+0xb4>
   d7806:	fba0 ce02 	umull	ip, lr, r0, r2
   d780a:	f04f 0500 	mov.w	r5, #0
   d780e:	fbe1 e502 	umlal	lr, r5, r1, r2
   d7812:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d7816:	fbe0 e503 	umlal	lr, r5, r0, r3
   d781a:	f04f 0600 	mov.w	r6, #0
   d781e:	fbe1 5603 	umlal	r5, r6, r1, r3
   d7822:	f09c 0f00 	teq	ip, #0
   d7826:	bf18      	it	ne
   d7828:	f04e 0e01 	orrne.w	lr, lr, #1
   d782c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d7830:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d7834:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d7838:	d204      	bcs.n	d7844 <__aeabi_dmul+0x80>
   d783a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d783e:	416d      	adcs	r5, r5
   d7840:	eb46 0606 	adc.w	r6, r6, r6
   d7844:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d7848:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d784c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d7850:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d7854:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d7858:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d785c:	bf88      	it	hi
   d785e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d7862:	d81e      	bhi.n	d78a2 <__aeabi_dmul+0xde>
   d7864:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d7868:	bf08      	it	eq
   d786a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d786e:	f150 0000 	adcs.w	r0, r0, #0
   d7872:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7876:	bd70      	pop	{r4, r5, r6, pc}
   d7878:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d787c:	ea46 0101 	orr.w	r1, r6, r1
   d7880:	ea40 0002 	orr.w	r0, r0, r2
   d7884:	ea81 0103 	eor.w	r1, r1, r3
   d7888:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d788c:	bfc2      	ittt	gt
   d788e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d7892:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d7896:	bd70      	popgt	{r4, r5, r6, pc}
   d7898:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d789c:	f04f 0e00 	mov.w	lr, #0
   d78a0:	3c01      	subs	r4, #1
   d78a2:	f300 80ab 	bgt.w	d79fc <__aeabi_dmul+0x238>
   d78a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d78aa:	bfde      	ittt	le
   d78ac:	2000      	movle	r0, #0
   d78ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d78b2:	bd70      	pople	{r4, r5, r6, pc}
   d78b4:	f1c4 0400 	rsb	r4, r4, #0
   d78b8:	3c20      	subs	r4, #32
   d78ba:	da35      	bge.n	d7928 <__aeabi_dmul+0x164>
   d78bc:	340c      	adds	r4, #12
   d78be:	dc1b      	bgt.n	d78f8 <__aeabi_dmul+0x134>
   d78c0:	f104 0414 	add.w	r4, r4, #20
   d78c4:	f1c4 0520 	rsb	r5, r4, #32
   d78c8:	fa00 f305 	lsl.w	r3, r0, r5
   d78cc:	fa20 f004 	lsr.w	r0, r0, r4
   d78d0:	fa01 f205 	lsl.w	r2, r1, r5
   d78d4:	ea40 0002 	orr.w	r0, r0, r2
   d78d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d78dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d78e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d78e4:	fa21 f604 	lsr.w	r6, r1, r4
   d78e8:	eb42 0106 	adc.w	r1, r2, r6
   d78ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d78f0:	bf08      	it	eq
   d78f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d78f6:	bd70      	pop	{r4, r5, r6, pc}
   d78f8:	f1c4 040c 	rsb	r4, r4, #12
   d78fc:	f1c4 0520 	rsb	r5, r4, #32
   d7900:	fa00 f304 	lsl.w	r3, r0, r4
   d7904:	fa20 f005 	lsr.w	r0, r0, r5
   d7908:	fa01 f204 	lsl.w	r2, r1, r4
   d790c:	ea40 0002 	orr.w	r0, r0, r2
   d7910:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7914:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d7918:	f141 0100 	adc.w	r1, r1, #0
   d791c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7920:	bf08      	it	eq
   d7922:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7926:	bd70      	pop	{r4, r5, r6, pc}
   d7928:	f1c4 0520 	rsb	r5, r4, #32
   d792c:	fa00 f205 	lsl.w	r2, r0, r5
   d7930:	ea4e 0e02 	orr.w	lr, lr, r2
   d7934:	fa20 f304 	lsr.w	r3, r0, r4
   d7938:	fa01 f205 	lsl.w	r2, r1, r5
   d793c:	ea43 0302 	orr.w	r3, r3, r2
   d7940:	fa21 f004 	lsr.w	r0, r1, r4
   d7944:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7948:	fa21 f204 	lsr.w	r2, r1, r4
   d794c:	ea20 0002 	bic.w	r0, r0, r2
   d7950:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d7954:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7958:	bf08      	it	eq
   d795a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d795e:	bd70      	pop	{r4, r5, r6, pc}
   d7960:	f094 0f00 	teq	r4, #0
   d7964:	d10f      	bne.n	d7986 <__aeabi_dmul+0x1c2>
   d7966:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d796a:	0040      	lsls	r0, r0, #1
   d796c:	eb41 0101 	adc.w	r1, r1, r1
   d7970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7974:	bf08      	it	eq
   d7976:	3c01      	subeq	r4, #1
   d7978:	d0f7      	beq.n	d796a <__aeabi_dmul+0x1a6>
   d797a:	ea41 0106 	orr.w	r1, r1, r6
   d797e:	f095 0f00 	teq	r5, #0
   d7982:	bf18      	it	ne
   d7984:	4770      	bxne	lr
   d7986:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d798a:	0052      	lsls	r2, r2, #1
   d798c:	eb43 0303 	adc.w	r3, r3, r3
   d7990:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d7994:	bf08      	it	eq
   d7996:	3d01      	subeq	r5, #1
   d7998:	d0f7      	beq.n	d798a <__aeabi_dmul+0x1c6>
   d799a:	ea43 0306 	orr.w	r3, r3, r6
   d799e:	4770      	bx	lr
   d79a0:	ea94 0f0c 	teq	r4, ip
   d79a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d79a8:	bf18      	it	ne
   d79aa:	ea95 0f0c 	teqne	r5, ip
   d79ae:	d00c      	beq.n	d79ca <__aeabi_dmul+0x206>
   d79b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d79b4:	bf18      	it	ne
   d79b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d79ba:	d1d1      	bne.n	d7960 <__aeabi_dmul+0x19c>
   d79bc:	ea81 0103 	eor.w	r1, r1, r3
   d79c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d79c4:	f04f 0000 	mov.w	r0, #0
   d79c8:	bd70      	pop	{r4, r5, r6, pc}
   d79ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d79ce:	bf06      	itte	eq
   d79d0:	4610      	moveq	r0, r2
   d79d2:	4619      	moveq	r1, r3
   d79d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d79d8:	d019      	beq.n	d7a0e <__aeabi_dmul+0x24a>
   d79da:	ea94 0f0c 	teq	r4, ip
   d79de:	d102      	bne.n	d79e6 <__aeabi_dmul+0x222>
   d79e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d79e4:	d113      	bne.n	d7a0e <__aeabi_dmul+0x24a>
   d79e6:	ea95 0f0c 	teq	r5, ip
   d79ea:	d105      	bne.n	d79f8 <__aeabi_dmul+0x234>
   d79ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d79f0:	bf1c      	itt	ne
   d79f2:	4610      	movne	r0, r2
   d79f4:	4619      	movne	r1, r3
   d79f6:	d10a      	bne.n	d7a0e <__aeabi_dmul+0x24a>
   d79f8:	ea81 0103 	eor.w	r1, r1, r3
   d79fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7a00:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d7a04:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d7a08:	f04f 0000 	mov.w	r0, #0
   d7a0c:	bd70      	pop	{r4, r5, r6, pc}
   d7a0e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d7a12:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d7a16:	bd70      	pop	{r4, r5, r6, pc}

000d7a18 <__aeabi_ddiv>:
   d7a18:	b570      	push	{r4, r5, r6, lr}
   d7a1a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d7a1e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d7a22:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d7a26:	bf1d      	ittte	ne
   d7a28:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d7a2c:	ea94 0f0c 	teqne	r4, ip
   d7a30:	ea95 0f0c 	teqne	r5, ip
   d7a34:	f000 f8a7 	bleq	d7b86 <__aeabi_ddiv+0x16e>
   d7a38:	eba4 0405 	sub.w	r4, r4, r5
   d7a3c:	ea81 0e03 	eor.w	lr, r1, r3
   d7a40:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d7a44:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d7a48:	f000 8088 	beq.w	d7b5c <__aeabi_ddiv+0x144>
   d7a4c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d7a50:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d7a54:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d7a58:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d7a5c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d7a60:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d7a64:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d7a68:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d7a6c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d7a70:	429d      	cmp	r5, r3
   d7a72:	bf08      	it	eq
   d7a74:	4296      	cmpeq	r6, r2
   d7a76:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d7a7a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d7a7e:	d202      	bcs.n	d7a86 <__aeabi_ddiv+0x6e>
   d7a80:	085b      	lsrs	r3, r3, #1
   d7a82:	ea4f 0232 	mov.w	r2, r2, rrx
   d7a86:	1ab6      	subs	r6, r6, r2
   d7a88:	eb65 0503 	sbc.w	r5, r5, r3
   d7a8c:	085b      	lsrs	r3, r3, #1
   d7a8e:	ea4f 0232 	mov.w	r2, r2, rrx
   d7a92:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d7a96:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d7a9a:	ebb6 0e02 	subs.w	lr, r6, r2
   d7a9e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7aa2:	bf22      	ittt	cs
   d7aa4:	1ab6      	subcs	r6, r6, r2
   d7aa6:	4675      	movcs	r5, lr
   d7aa8:	ea40 000c 	orrcs.w	r0, r0, ip
   d7aac:	085b      	lsrs	r3, r3, #1
   d7aae:	ea4f 0232 	mov.w	r2, r2, rrx
   d7ab2:	ebb6 0e02 	subs.w	lr, r6, r2
   d7ab6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7aba:	bf22      	ittt	cs
   d7abc:	1ab6      	subcs	r6, r6, r2
   d7abe:	4675      	movcs	r5, lr
   d7ac0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d7ac4:	085b      	lsrs	r3, r3, #1
   d7ac6:	ea4f 0232 	mov.w	r2, r2, rrx
   d7aca:	ebb6 0e02 	subs.w	lr, r6, r2
   d7ace:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7ad2:	bf22      	ittt	cs
   d7ad4:	1ab6      	subcs	r6, r6, r2
   d7ad6:	4675      	movcs	r5, lr
   d7ad8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d7adc:	085b      	lsrs	r3, r3, #1
   d7ade:	ea4f 0232 	mov.w	r2, r2, rrx
   d7ae2:	ebb6 0e02 	subs.w	lr, r6, r2
   d7ae6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7aea:	bf22      	ittt	cs
   d7aec:	1ab6      	subcs	r6, r6, r2
   d7aee:	4675      	movcs	r5, lr
   d7af0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d7af4:	ea55 0e06 	orrs.w	lr, r5, r6
   d7af8:	d018      	beq.n	d7b2c <__aeabi_ddiv+0x114>
   d7afa:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d7afe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d7b02:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d7b06:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d7b0a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d7b0e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d7b12:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d7b16:	d1c0      	bne.n	d7a9a <__aeabi_ddiv+0x82>
   d7b18:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7b1c:	d10b      	bne.n	d7b36 <__aeabi_ddiv+0x11e>
   d7b1e:	ea41 0100 	orr.w	r1, r1, r0
   d7b22:	f04f 0000 	mov.w	r0, #0
   d7b26:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d7b2a:	e7b6      	b.n	d7a9a <__aeabi_ddiv+0x82>
   d7b2c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7b30:	bf04      	itt	eq
   d7b32:	4301      	orreq	r1, r0
   d7b34:	2000      	moveq	r0, #0
   d7b36:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d7b3a:	bf88      	it	hi
   d7b3c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d7b40:	f63f aeaf 	bhi.w	d78a2 <__aeabi_dmul+0xde>
   d7b44:	ebb5 0c03 	subs.w	ip, r5, r3
   d7b48:	bf04      	itt	eq
   d7b4a:	ebb6 0c02 	subseq.w	ip, r6, r2
   d7b4e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d7b52:	f150 0000 	adcs.w	r0, r0, #0
   d7b56:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7b5a:	bd70      	pop	{r4, r5, r6, pc}
   d7b5c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d7b60:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d7b64:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d7b68:	bfc2      	ittt	gt
   d7b6a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d7b6e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d7b72:	bd70      	popgt	{r4, r5, r6, pc}
   d7b74:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7b78:	f04f 0e00 	mov.w	lr, #0
   d7b7c:	3c01      	subs	r4, #1
   d7b7e:	e690      	b.n	d78a2 <__aeabi_dmul+0xde>
   d7b80:	ea45 0e06 	orr.w	lr, r5, r6
   d7b84:	e68d      	b.n	d78a2 <__aeabi_dmul+0xde>
   d7b86:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d7b8a:	ea94 0f0c 	teq	r4, ip
   d7b8e:	bf08      	it	eq
   d7b90:	ea95 0f0c 	teqeq	r5, ip
   d7b94:	f43f af3b 	beq.w	d7a0e <__aeabi_dmul+0x24a>
   d7b98:	ea94 0f0c 	teq	r4, ip
   d7b9c:	d10a      	bne.n	d7bb4 <__aeabi_ddiv+0x19c>
   d7b9e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d7ba2:	f47f af34 	bne.w	d7a0e <__aeabi_dmul+0x24a>
   d7ba6:	ea95 0f0c 	teq	r5, ip
   d7baa:	f47f af25 	bne.w	d79f8 <__aeabi_dmul+0x234>
   d7bae:	4610      	mov	r0, r2
   d7bb0:	4619      	mov	r1, r3
   d7bb2:	e72c      	b.n	d7a0e <__aeabi_dmul+0x24a>
   d7bb4:	ea95 0f0c 	teq	r5, ip
   d7bb8:	d106      	bne.n	d7bc8 <__aeabi_ddiv+0x1b0>
   d7bba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d7bbe:	f43f aefd 	beq.w	d79bc <__aeabi_dmul+0x1f8>
   d7bc2:	4610      	mov	r0, r2
   d7bc4:	4619      	mov	r1, r3
   d7bc6:	e722      	b.n	d7a0e <__aeabi_dmul+0x24a>
   d7bc8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7bcc:	bf18      	it	ne
   d7bce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7bd2:	f47f aec5 	bne.w	d7960 <__aeabi_dmul+0x19c>
   d7bd6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d7bda:	f47f af0d 	bne.w	d79f8 <__aeabi_dmul+0x234>
   d7bde:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d7be2:	f47f aeeb 	bne.w	d79bc <__aeabi_dmul+0x1f8>
   d7be6:	e712      	b.n	d7a0e <__aeabi_dmul+0x24a>

000d7be8 <__gedf2>:
   d7be8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d7bec:	e006      	b.n	d7bfc <__cmpdf2+0x4>
   d7bee:	bf00      	nop

000d7bf0 <__ledf2>:
   d7bf0:	f04f 0c01 	mov.w	ip, #1
   d7bf4:	e002      	b.n	d7bfc <__cmpdf2+0x4>
   d7bf6:	bf00      	nop

000d7bf8 <__cmpdf2>:
   d7bf8:	f04f 0c01 	mov.w	ip, #1
   d7bfc:	f84d cd04 	str.w	ip, [sp, #-4]!
   d7c00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d7c04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7c08:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d7c0c:	bf18      	it	ne
   d7c0e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d7c12:	d01b      	beq.n	d7c4c <__cmpdf2+0x54>
   d7c14:	b001      	add	sp, #4
   d7c16:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d7c1a:	bf0c      	ite	eq
   d7c1c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d7c20:	ea91 0f03 	teqne	r1, r3
   d7c24:	bf02      	ittt	eq
   d7c26:	ea90 0f02 	teqeq	r0, r2
   d7c2a:	2000      	moveq	r0, #0
   d7c2c:	4770      	bxeq	lr
   d7c2e:	f110 0f00 	cmn.w	r0, #0
   d7c32:	ea91 0f03 	teq	r1, r3
   d7c36:	bf58      	it	pl
   d7c38:	4299      	cmppl	r1, r3
   d7c3a:	bf08      	it	eq
   d7c3c:	4290      	cmpeq	r0, r2
   d7c3e:	bf2c      	ite	cs
   d7c40:	17d8      	asrcs	r0, r3, #31
   d7c42:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d7c46:	f040 0001 	orr.w	r0, r0, #1
   d7c4a:	4770      	bx	lr
   d7c4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d7c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7c54:	d102      	bne.n	d7c5c <__cmpdf2+0x64>
   d7c56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d7c5a:	d107      	bne.n	d7c6c <__cmpdf2+0x74>
   d7c5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d7c60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7c64:	d1d6      	bne.n	d7c14 <__cmpdf2+0x1c>
   d7c66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d7c6a:	d0d3      	beq.n	d7c14 <__cmpdf2+0x1c>
   d7c6c:	f85d 0b04 	ldr.w	r0, [sp], #4
   d7c70:	4770      	bx	lr
   d7c72:	bf00      	nop

000d7c74 <__aeabi_cdrcmple>:
   d7c74:	4684      	mov	ip, r0
   d7c76:	4610      	mov	r0, r2
   d7c78:	4662      	mov	r2, ip
   d7c7a:	468c      	mov	ip, r1
   d7c7c:	4619      	mov	r1, r3
   d7c7e:	4663      	mov	r3, ip
   d7c80:	e000      	b.n	d7c84 <__aeabi_cdcmpeq>
   d7c82:	bf00      	nop

000d7c84 <__aeabi_cdcmpeq>:
   d7c84:	b501      	push	{r0, lr}
   d7c86:	f7ff ffb7 	bl	d7bf8 <__cmpdf2>
   d7c8a:	2800      	cmp	r0, #0
   d7c8c:	bf48      	it	mi
   d7c8e:	f110 0f00 	cmnmi.w	r0, #0
   d7c92:	bd01      	pop	{r0, pc}

000d7c94 <__aeabi_dcmpeq>:
   d7c94:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7c98:	f7ff fff4 	bl	d7c84 <__aeabi_cdcmpeq>
   d7c9c:	bf0c      	ite	eq
   d7c9e:	2001      	moveq	r0, #1
   d7ca0:	2000      	movne	r0, #0
   d7ca2:	f85d fb08 	ldr.w	pc, [sp], #8
   d7ca6:	bf00      	nop

000d7ca8 <__aeabi_dcmplt>:
   d7ca8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7cac:	f7ff ffea 	bl	d7c84 <__aeabi_cdcmpeq>
   d7cb0:	bf34      	ite	cc
   d7cb2:	2001      	movcc	r0, #1
   d7cb4:	2000      	movcs	r0, #0
   d7cb6:	f85d fb08 	ldr.w	pc, [sp], #8
   d7cba:	bf00      	nop

000d7cbc <__aeabi_dcmple>:
   d7cbc:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7cc0:	f7ff ffe0 	bl	d7c84 <__aeabi_cdcmpeq>
   d7cc4:	bf94      	ite	ls
   d7cc6:	2001      	movls	r0, #1
   d7cc8:	2000      	movhi	r0, #0
   d7cca:	f85d fb08 	ldr.w	pc, [sp], #8
   d7cce:	bf00      	nop

000d7cd0 <__aeabi_dcmpge>:
   d7cd0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7cd4:	f7ff ffce 	bl	d7c74 <__aeabi_cdrcmple>
   d7cd8:	bf94      	ite	ls
   d7cda:	2001      	movls	r0, #1
   d7cdc:	2000      	movhi	r0, #0
   d7cde:	f85d fb08 	ldr.w	pc, [sp], #8
   d7ce2:	bf00      	nop

000d7ce4 <__aeabi_dcmpgt>:
   d7ce4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7ce8:	f7ff ffc4 	bl	d7c74 <__aeabi_cdrcmple>
   d7cec:	bf34      	ite	cc
   d7cee:	2001      	movcc	r0, #1
   d7cf0:	2000      	movcs	r0, #0
   d7cf2:	f85d fb08 	ldr.w	pc, [sp], #8
   d7cf6:	bf00      	nop

000d7cf8 <__aeabi_d2f>:
   d7cf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d7cfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d7d00:	bf24      	itt	cs
   d7d02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d7d06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d7d0a:	d90d      	bls.n	d7d28 <__aeabi_d2f+0x30>
   d7d0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d7d10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d7d14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d7d18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d7d1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d7d20:	bf08      	it	eq
   d7d22:	f020 0001 	biceq.w	r0, r0, #1
   d7d26:	4770      	bx	lr
   d7d28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d7d2c:	d121      	bne.n	d7d72 <__aeabi_d2f+0x7a>
   d7d2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d7d32:	bfbc      	itt	lt
   d7d34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d7d38:	4770      	bxlt	lr
   d7d3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7d3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d7d42:	f1c2 0218 	rsb	r2, r2, #24
   d7d46:	f1c2 0c20 	rsb	ip, r2, #32
   d7d4a:	fa10 f30c 	lsls.w	r3, r0, ip
   d7d4e:	fa20 f002 	lsr.w	r0, r0, r2
   d7d52:	bf18      	it	ne
   d7d54:	f040 0001 	orrne.w	r0, r0, #1
   d7d58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d7d5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d7d60:	fa03 fc0c 	lsl.w	ip, r3, ip
   d7d64:	ea40 000c 	orr.w	r0, r0, ip
   d7d68:	fa23 f302 	lsr.w	r3, r3, r2
   d7d6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d7d70:	e7cc      	b.n	d7d0c <__aeabi_d2f+0x14>
   d7d72:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d7d76:	d107      	bne.n	d7d88 <__aeabi_d2f+0x90>
   d7d78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d7d7c:	bf1e      	ittt	ne
   d7d7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d7d82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d7d86:	4770      	bxne	lr
   d7d88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d7d8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d7d90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d7d94:	4770      	bx	lr
   d7d96:	bf00      	nop

000d7d98 <__cxa_atexit>:
   d7d98:	b510      	push	{r4, lr}
   d7d9a:	4c05      	ldr	r4, [pc, #20]	; (d7db0 <__cxa_atexit+0x18>)
   d7d9c:	4613      	mov	r3, r2
   d7d9e:	b12c      	cbz	r4, d7dac <__cxa_atexit+0x14>
   d7da0:	460a      	mov	r2, r1
   d7da2:	4601      	mov	r1, r0
   d7da4:	2002      	movs	r0, #2
   d7da6:	f3af 8000 	nop.w
   d7daa:	bd10      	pop	{r4, pc}
   d7dac:	4620      	mov	r0, r4
   d7dae:	bd10      	pop	{r4, pc}
   d7db0:	00000000 	.word	0x00000000

000d7db4 <memcpy>:
   d7db4:	b510      	push	{r4, lr}
   d7db6:	1e43      	subs	r3, r0, #1
   d7db8:	440a      	add	r2, r1
   d7dba:	4291      	cmp	r1, r2
   d7dbc:	d004      	beq.n	d7dc8 <memcpy+0x14>
   d7dbe:	f811 4b01 	ldrb.w	r4, [r1], #1
   d7dc2:	f803 4f01 	strb.w	r4, [r3, #1]!
   d7dc6:	e7f8      	b.n	d7dba <memcpy+0x6>
   d7dc8:	bd10      	pop	{r4, pc}

000d7dca <memset>:
   d7dca:	4402      	add	r2, r0
   d7dcc:	4603      	mov	r3, r0
   d7dce:	4293      	cmp	r3, r2
   d7dd0:	d002      	beq.n	d7dd8 <memset+0xe>
   d7dd2:	f803 1b01 	strb.w	r1, [r3], #1
   d7dd6:	e7fa      	b.n	d7dce <memset+0x4>
   d7dd8:	4770      	bx	lr
	...

000d7ddc <srand>:
   d7ddc:	b538      	push	{r3, r4, r5, lr}
   d7dde:	4b12      	ldr	r3, [pc, #72]	; (d7e28 <srand+0x4c>)
   d7de0:	681c      	ldr	r4, [r3, #0]
   d7de2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7de4:	4605      	mov	r5, r0
   d7de6:	b9d3      	cbnz	r3, d7e1e <srand+0x42>
   d7de8:	2018      	movs	r0, #24
   d7dea:	f7fe f81d 	bl	d5e28 <malloc>
   d7dee:	f243 330e 	movw	r3, #13070	; 0x330e
   d7df2:	63a0      	str	r0, [r4, #56]	; 0x38
   d7df4:	8003      	strh	r3, [r0, #0]
   d7df6:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d7dfa:	8043      	strh	r3, [r0, #2]
   d7dfc:	f241 2334 	movw	r3, #4660	; 0x1234
   d7e00:	8083      	strh	r3, [r0, #4]
   d7e02:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d7e06:	80c3      	strh	r3, [r0, #6]
   d7e08:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d7e0c:	8103      	strh	r3, [r0, #8]
   d7e0e:	2305      	movs	r3, #5
   d7e10:	8143      	strh	r3, [r0, #10]
   d7e12:	230b      	movs	r3, #11
   d7e14:	8183      	strh	r3, [r0, #12]
   d7e16:	2201      	movs	r2, #1
   d7e18:	2300      	movs	r3, #0
   d7e1a:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d7e1e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7e20:	2200      	movs	r2, #0
   d7e22:	611d      	str	r5, [r3, #16]
   d7e24:	615a      	str	r2, [r3, #20]
   d7e26:	bd38      	pop	{r3, r4, r5, pc}
   d7e28:	2003e404 	.word	0x2003e404

000d7e2c <strcmp>:
   d7e2c:	f810 2b01 	ldrb.w	r2, [r0], #1
   d7e30:	f811 3b01 	ldrb.w	r3, [r1], #1
   d7e34:	2a01      	cmp	r2, #1
   d7e36:	bf28      	it	cs
   d7e38:	429a      	cmpcs	r2, r3
   d7e3a:	d0f7      	beq.n	d7e2c <strcmp>
   d7e3c:	1ad0      	subs	r0, r2, r3
   d7e3e:	4770      	bx	lr

000d7e40 <strcpy>:
   d7e40:	4603      	mov	r3, r0
   d7e42:	f811 2b01 	ldrb.w	r2, [r1], #1
   d7e46:	f803 2b01 	strb.w	r2, [r3], #1
   d7e4a:	2a00      	cmp	r2, #0
   d7e4c:	d1f9      	bne.n	d7e42 <strcpy+0x2>
   d7e4e:	4770      	bx	lr

000d7e50 <strdup>:
   d7e50:	4b02      	ldr	r3, [pc, #8]	; (d7e5c <strdup+0xc>)
   d7e52:	4601      	mov	r1, r0
   d7e54:	6818      	ldr	r0, [r3, #0]
   d7e56:	f000 b803 	b.w	d7e60 <_strdup_r>
   d7e5a:	bf00      	nop
   d7e5c:	2003e404 	.word	0x2003e404

000d7e60 <_strdup_r>:
   d7e60:	b570      	push	{r4, r5, r6, lr}
   d7e62:	4606      	mov	r6, r0
   d7e64:	4608      	mov	r0, r1
   d7e66:	460c      	mov	r4, r1
   d7e68:	f000 f80d 	bl	d7e86 <strlen>
   d7e6c:	1c45      	adds	r5, r0, #1
   d7e6e:	4629      	mov	r1, r5
   d7e70:	4630      	mov	r0, r6
   d7e72:	f7fd fff9 	bl	d5e68 <_malloc_r>
   d7e76:	4606      	mov	r6, r0
   d7e78:	b118      	cbz	r0, d7e82 <_strdup_r+0x22>
   d7e7a:	462a      	mov	r2, r5
   d7e7c:	4621      	mov	r1, r4
   d7e7e:	f7ff ff99 	bl	d7db4 <memcpy>
   d7e82:	4630      	mov	r0, r6
   d7e84:	bd70      	pop	{r4, r5, r6, pc}

000d7e86 <strlen>:
   d7e86:	4603      	mov	r3, r0
   d7e88:	f813 2b01 	ldrb.w	r2, [r3], #1
   d7e8c:	2a00      	cmp	r2, #0
   d7e8e:	d1fb      	bne.n	d7e88 <strlen+0x2>
   d7e90:	1a18      	subs	r0, r3, r0
   d7e92:	3801      	subs	r0, #1
   d7e94:	4770      	bx	lr

000d7e96 <link_code_end>:
	...

000d7e98 <dynalib_user>:
   d7e98:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d7ea8:	0000 0000                                   ....

000d7eac <_ZTV5Timer>:
	...
   d7eb4:	4169 000d 41b1 000d 40d5 000d 2222 5c5c     iA...A...@..""\\
   d7ec4:	0862 0c66 0a6e 0d72 0974 6e00 6c75 006c     b.f.n.r.t..null.
   d7ed4:	614e 004e 2d65 4900 666e 6e69 7469 0079     NaN.e-.Infinity.
   d7ee4:	7274 6575 6600 6c61 6573 6e00 7765 6f43     true.false.newCo
   d7ef4:	666e 6d00 646f 0065 7073 6365 6669 6369     nf.mode.specific
   d7f04:	6144 6174 6400 6e79 6d61 6369 7400 6d69     Data.dynamic.tim
   d7f14:	6f65 7475 7300 6174 6574 6700 6572 6e65     eout.state.green
   d7f24:	6954 656d 7900 6c65 6f6c 5477 6d69 0065     Time.yellowTime.
   d7f34:	6572 5464 6d69 0065 7473 7461 6369 6200     redTime.static.b
   d7f44:	7461 6574 7972 6300 6168 676e 4365 6e6f     attery.changeCon
   d7f54:	0066 227b 6f6d 6564 3a22 6422 6e79 6d61     f.{"mode":"dynam
   d7f64:	6369 2c22 2220 7073 6365 6669 6369 6144     ic", "specificDa
   d7f74:	6174 3a22 227b 6572 5464 6d69 2265 333a     ta":{"redTime":3
   d7f84:	2c30 7922 6c65 6f6c 5477 6d69 2265 363a     0,"yellowTime":6
   d7f94:	222c 7267 6565 546e 6d69 2265 333a 7d30     ,"greenTime":30}
   d7fa4:	007d 0000                                   }...

000d7fa8 <_ZTVN5spark13CellularClassE>:
	...
   d7fb0:	5eff 000d 5ef5 000d 5eeb 000d 5ea1 000d     .^...^...^...^..
   d7fc0:	5edf 000d 5ed3 000d 5ec7 000d 5ebf 000d     .^...^...^...^..
   d7fd0:	5eb5 000d 5eab 000d 6a01 000d               .^...^...j..

000d7fdc <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d7fe4:	5f49 000d 5f4f 000d 5f67 000d 5f5d 000d     I_..O_..g_..]_..
   d7ff4:	5f4b 000d                                   K_..

000d7ff8 <_ZTVN5spark13EthernetClassE>:
	...
   d8000:	656f 000d 6565 000d 655b 000d 6551 000d     oe..ee..[e..Qe..
   d8010:	6545 000d 6539 000d 652d 000d 6525 000d     Ee..9e..-e..%e..
   d8020:	651b 000d 6511 000d 6a01 000d               .e...e...j..

000d802c <_ZTV7TwoWire>:
	...
   d8034:	6671 000d 66bb 000d 6693 000d 6673 000d     qf...f...f..sf..
   d8044:	669b 000d 66a3 000d 66ab 000d 66b3 000d     .f...f...f...f..

000d8054 <_ZTV9IPAddress>:
	...
   d805c:	6753 000d 6743 000d 6745 000d 6e6c 6600     Sg..Cg..Eg..ln.f
   d806c:	006e 6f63 6564 6400 7465 6961 006c 0a0d     n.code.detail...
   d807c:	2500 3130 7530 0020 205d 2500 0064 202c     .%010u .] .%d., 
   d808c:	2800 3a29 0020 5b20 6300 646f 2065 203d     .(): . [.code = 
   d809c:	2500 0069 6564 6174 6c69 2073 203d 6200     .%i.details = .b
   d80ac:	7561 0064 6553 6972 6c61 5300 7265 6169     aud.Serial.Seria
   d80bc:	316c 7400 7079 0065 6170 6172 006d 6d63     l1.type.param.cm
   d80cc:	0064 6469 6800 646e 7300 7274 006d 6966     d.id.hnd.strm.fi
   d80dc:	746c 6c00 6c76 6100 6464 6148 646e 656c     lt.lvl.addHandle
   d80ec:	0072 6572 6f6d 6576 6148 646e 656c 0072     r.removeHandler.
   d80fc:	6e65 6d75 6148 646e 656c 7372 4a00 4f53     enumHandlers.JSO
   d810c:	534e 7274 6165 4c6d 676f 6148 646e 656c     NStreamLogHandle
   d811c:	0072 7061 0070 6f6e 656e 7400 6172 6563     r.app.none.trace
   d812c:	6900 666e 006f 6177 6e72 6500 7272 726f     .info.warn.error
   d813c:	7000 6e61 6369 6100 6c6c 0000               .panic.all..

000d8148 <_ZTVN5spark9MeshClassE>:
	...
   d8150:	6897 000d 688d 000d 6883 000d 6879 000d     .h...h...h..yh..
   d8160:	686d 000d 6861 000d 6855 000d 684d 000d     mh..ah..Uh..Mh..
   d8170:	6843 000d 6839 000d 6a01 000d               Ch..9h...j..

000d817c <_ZTVN5spark12NetworkClassE>:
	...
   d8184:	6999 000d 69a3 000d 69ad 000d 69b7 000d     .i...i...i...i..
   d8194:	69c1 000d 69cd 000d 69d9 000d 69e5 000d     .i...i...i...i..
   d81a4:	69ed 000d 69f7 000d 6a01 000d               .i...i...j..

000d81b0 <_ZTV8SPIClass>:
	...
   d81b8:	6be5 000d 6be7 000d 005a 2b25 3330 3a64     .k...k..Z.%+03d:
   d81c8:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
   d81d8:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
   d81e8:	0000 0000                                   ....

000d81ec <_ZTV11USARTSerial>:
	...
   d81f4:	6e09 000d 6e59 000d 6e67 000d 6ae1 000d     .n..Yn..gn...j..
   d8204:	6e1d 000d 6e3f 000d 6e2b 000d 6e53 000d     .n..?n..+n..Sn..
   d8214:	6e0b 000d 6e0f 000d                         .n...n..

000d821c <_ZTV9USBSerial>:
	...
   d8224:	6f4d 000d 6f9d 000d 6fab 000d 6ae1 000d     Mo...o...o...j..
   d8234:	6f89 000d 6f4f 000d 6f65 000d 6f97 000d     .o..Oo..eo...o..
   d8244:	6f7b 000d 6f49 000d                         {o..Io..

000d824c <__sf_fake_stdin>:
	...

000d826c <__sf_fake_stdout>:
	...

000d828c <__sf_fake_stderr>:
	...
   d82ac:	0043                                        C.

000d82ae <link_const_variable_data_end>:
	...

000d82b0 <link_constructors_location>:
   d82b0:	000d588d 	.word	0x000d588d
   d82b4:	000d5f09 	.word	0x000d5f09
   d82b8:	000d6579 	.word	0x000d6579
   d82bc:	000d6829 	.word	0x000d6829
   d82c0:	000d694d 	.word	0x000d694d
   d82c4:	000d6acd 	.word	0x000d6acd
   d82c8:	000d6bc9 	.word	0x000d6bc9
   d82cc:	000d6d71 	.word	0x000d6d71
   d82d0:	000d6df5 	.word	0x000d6df5
   d82d4:	000d716d 	.word	0x000d716d
   d82d8:	000d71c5 	.word	0x000d71c5
   d82dc:	000d7289 	.word	0x000d7289
   d82e0:	000d730d 	.word	0x000d730d
   d82e4:	000d7391 	.word	0x000d7391

000d82e8 <link_constructors_end>:
	...
